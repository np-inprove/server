// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/np-inprove/server/internal/ent"
	entity "github.com/np-inprove/server/internal/entity"

	jwt "github.com/lestrrat-go/jwx/v2/jwt"

	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// CheckInviteCode provides a mock function with given fields: ctx, inviteCode
func (_m *MockUseCase) CheckInviteCode(ctx context.Context, inviteCode string) (*ent.InstitutionInviteLink, error) {
	ret := _m.Called(ctx, inviteCode)

	var r0 *ent.InstitutionInviteLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.InstitutionInviteLink, error)); ok {
		return rf(ctx, inviteCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.InstitutionInviteLink); ok {
		r0 = rf(ctx, inviteCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.InstitutionInviteLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, inviteCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_CheckInviteCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckInviteCode'
type MockUseCase_CheckInviteCode_Call struct {
	*mock.Call
}

// CheckInviteCode is a helper method to define mock.On call
//   - ctx context.Context
//   - inviteCode string
func (_e *MockUseCase_Expecter) CheckInviteCode(ctx interface{}, inviteCode interface{}) *MockUseCase_CheckInviteCode_Call {
	return &MockUseCase_CheckInviteCode_Call{Call: _e.mock.On("CheckInviteCode", ctx, inviteCode)}
}

func (_c *MockUseCase_CheckInviteCode_Call) Run(run func(ctx context.Context, inviteCode string)) *MockUseCase_CheckInviteCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUseCase_CheckInviteCode_Call) Return(_a0 *ent.InstitutionInviteLink, _a1 error) *MockUseCase_CheckInviteCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_CheckInviteCode_Call) RunAndReturn(run func(context.Context, string) (*ent.InstitutionInviteLink, error)) *MockUseCase_CheckInviteCode_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *MockUseCase) Login(ctx context.Context, email string, password string) (*entity.Session, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.Session, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.Session); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUseCase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockUseCase_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *MockUseCase_Login_Call {
	return &MockUseCase_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *MockUseCase_Login_Call) Run(run func(ctx context.Context, email string, password string)) *MockUseCase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUseCase_Login_Call) Return(_a0 *entity.Session, _a1 error) *MockUseCase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Login_Call) RunAndReturn(run func(context.Context, string, string) (*entity.Session, error)) *MockUseCase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, inviteCode, firstName, lastName, email, password
func (_m *MockUseCase) Register(ctx context.Context, inviteCode string, firstName string, lastName string, email string, password string) (*entity.Session, error) {
	ret := _m.Called(ctx, inviteCode, firstName, lastName, email, password)

	var r0 *entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) (*entity.Session, error)); ok {
		return rf(ctx, inviteCode, firstName, lastName, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) *entity.Session); ok {
		r0 = rf(ctx, inviteCode, firstName, lastName, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = rf(ctx, inviteCode, firstName, lastName, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUseCase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - inviteCode string
//   - firstName string
//   - lastName string
//   - email string
//   - password string
func (_e *MockUseCase_Expecter) Register(ctx interface{}, inviteCode interface{}, firstName interface{}, lastName interface{}, email interface{}, password interface{}) *MockUseCase_Register_Call {
	return &MockUseCase_Register_Call{Call: _e.mock.On("Register", ctx, inviteCode, firstName, lastName, email, password)}
}

func (_c *MockUseCase_Register_Call) Run(run func(ctx context.Context, inviteCode string, firstName string, lastName string, email string, password string)) *MockUseCase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockUseCase_Register_Call) Return(_a0 *entity.Session, _a1 error) *MockUseCase_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Register_Call) RunAndReturn(run func(context.Context, string, string, string, string, string) (*entity.Session, error)) *MockUseCase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// WhoAmI provides a mock function with given fields: ctx, token
func (_m *MockUseCase) WhoAmI(ctx context.Context, token jwt.Token) (*ent.User, error) {
	ret := _m.Called(ctx, token)

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, jwt.Token) (*ent.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, jwt.Token) *ent.User); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, jwt.Token) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_WhoAmI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhoAmI'
type MockUseCase_WhoAmI_Call struct {
	*mock.Call
}

// WhoAmI is a helper method to define mock.On call
//   - ctx context.Context
//   - token jwt.Token
func (_e *MockUseCase_Expecter) WhoAmI(ctx interface{}, token interface{}) *MockUseCase_WhoAmI_Call {
	return &MockUseCase_WhoAmI_Call{Call: _e.mock.On("WhoAmI", ctx, token)}
}

func (_c *MockUseCase_WhoAmI_Call) Run(run func(ctx context.Context, token jwt.Token)) *MockUseCase_WhoAmI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(jwt.Token))
	})
	return _c
}

func (_c *MockUseCase_WhoAmI_Call) Return(_a0 *ent.User, _a1 error) *MockUseCase_WhoAmI_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_WhoAmI_Call) RunAndReturn(run func(context.Context, jwt.Token) (*ent.User, error)) *MockUseCase_WhoAmI_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUseCase(t mockConstructorTestingTNewMockUseCase) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
