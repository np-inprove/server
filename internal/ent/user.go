// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/department"
	"github.com/np-inprove/server/internal/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// First name of the user
	FirstName string `json:"first_name,omitempty"`
	// Last name of the user
	LastName string `json:"last_name,omitempty"`
	// Email of the user
	Email string `json:"email,omitempty"`
	// Password hash of the user
	PasswordHash string `json:"-"`
	// Points of the user.
	// Must always be positive
	Points int `json:"points,omitempty"`
	// Points awarded by the user after points_awarded_reset_time.
	// Must always be positive
	PointsAwardedCount int `json:"points_awarded_count,omitempty"`
	// Time when points_awarded_count was last reset to 0
	PointsAwardedResetTime time.Time `json:"points_awarded_reset_time,omitempty"`
	// Superuser of the iNProve platform
	GodMode bool `json:"god_mode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges            UserEdges `json:"edges"`
	department_users *int
	selectValues     sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Institution holds the value of the institution edge.
	Institution []*Institution `json:"institution,omitempty"`
	// Redemptions holds the value of the redemptions edge.
	Redemptions []*Redemption `json:"redemptions,omitempty"`
	// ForumPosts holds the value of the forum_posts edge.
	ForumPosts []*ForumPost `json:"forum_posts,omitempty"`
	// Pet holds the value of the pet edge.
	Pet []*Pet `json:"pet,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// ReactedPosts holds the value of the reacted_posts edge.
	ReactedPosts []*ForumPost `json:"reacted_posts,omitempty"`
	// VotedDeadlines holds the value of the voted_deadlines edge.
	VotedDeadlines []*Deadline `json:"voted_deadlines,omitempty"`
	// AuthoredDeadlines holds the value of the authored_deadlines edge.
	AuthoredDeadlines []*Deadline `json:"authored_deadlines,omitempty"`
	// UserPets holds the value of the user_pets edge.
	UserPets []*UserPet `json:"user_pets,omitempty"`
	// GroupUsers holds the value of the group_users edge.
	GroupUsers []*GroupUser `json:"group_users,omitempty"`
	// Reactions holds the value of the reactions edge.
	Reactions []*Reaction `json:"reactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[0] {
		if e.Department == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "department"}
}

// InstitutionOrErr returns the Institution value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InstitutionOrErr() ([]*Institution, error) {
	if e.loadedTypes[1] {
		return e.Institution, nil
	}
	return nil, &NotLoadedError{edge: "institution"}
}

// RedemptionsOrErr returns the Redemptions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RedemptionsOrErr() ([]*Redemption, error) {
	if e.loadedTypes[2] {
		return e.Redemptions, nil
	}
	return nil, &NotLoadedError{edge: "redemptions"}
}

// ForumPostsOrErr returns the ForumPosts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ForumPostsOrErr() ([]*ForumPost, error) {
	if e.loadedTypes[3] {
		return e.ForumPosts, nil
	}
	return nil, &NotLoadedError{edge: "forum_posts"}
}

// PetOrErr returns the Pet value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PetOrErr() ([]*Pet, error) {
	if e.loadedTypes[4] {
		return e.Pet, nil
	}
	return nil, &NotLoadedError{edge: "pet"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[5] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// ReactedPostsOrErr returns the ReactedPosts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ReactedPostsOrErr() ([]*ForumPost, error) {
	if e.loadedTypes[6] {
		return e.ReactedPosts, nil
	}
	return nil, &NotLoadedError{edge: "reacted_posts"}
}

// VotedDeadlinesOrErr returns the VotedDeadlines value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) VotedDeadlinesOrErr() ([]*Deadline, error) {
	if e.loadedTypes[7] {
		return e.VotedDeadlines, nil
	}
	return nil, &NotLoadedError{edge: "voted_deadlines"}
}

// AuthoredDeadlinesOrErr returns the AuthoredDeadlines value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AuthoredDeadlinesOrErr() ([]*Deadline, error) {
	if e.loadedTypes[8] {
		return e.AuthoredDeadlines, nil
	}
	return nil, &NotLoadedError{edge: "authored_deadlines"}
}

// UserPetsOrErr returns the UserPets value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserPetsOrErr() ([]*UserPet, error) {
	if e.loadedTypes[9] {
		return e.UserPets, nil
	}
	return nil, &NotLoadedError{edge: "user_pets"}
}

// GroupUsersOrErr returns the GroupUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupUsersOrErr() ([]*GroupUser, error) {
	if e.loadedTypes[10] {
		return e.GroupUsers, nil
	}
	return nil, &NotLoadedError{edge: "group_users"}
}

// ReactionsOrErr returns the Reactions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ReactionsOrErr() ([]*Reaction, error) {
	if e.loadedTypes[11] {
		return e.Reactions, nil
	}
	return nil, &NotLoadedError{edge: "reactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldGodMode:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldPoints, user.FieldPointsAwardedCount:
			values[i] = new(sql.NullInt64)
		case user.FieldFirstName, user.FieldLastName, user.FieldEmail, user.FieldPasswordHash:
			values[i] = new(sql.NullString)
		case user.FieldPointsAwardedResetTime:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // department_users
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				u.PasswordHash = value.String
			}
		case user.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				u.Points = int(value.Int64)
			}
		case user.FieldPointsAwardedCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points_awarded_count", values[i])
			} else if value.Valid {
				u.PointsAwardedCount = int(value.Int64)
			}
		case user.FieldPointsAwardedResetTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field points_awarded_reset_time", values[i])
			} else if value.Valid {
				u.PointsAwardedResetTime = value.Time
			}
		case user.FieldGodMode:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field god_mode", values[i])
			} else if value.Valid {
				u.GodMode = value.Bool
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field department_users", value)
			} else if value.Valid {
				u.department_users = new(int)
				*u.department_users = int(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryDepartment queries the "department" edge of the User entity.
func (u *User) QueryDepartment() *DepartmentQuery {
	return NewUserClient(u.config).QueryDepartment(u)
}

// QueryInstitution queries the "institution" edge of the User entity.
func (u *User) QueryInstitution() *InstitutionQuery {
	return NewUserClient(u.config).QueryInstitution(u)
}

// QueryRedemptions queries the "redemptions" edge of the User entity.
func (u *User) QueryRedemptions() *RedemptionQuery {
	return NewUserClient(u.config).QueryRedemptions(u)
}

// QueryForumPosts queries the "forum_posts" edge of the User entity.
func (u *User) QueryForumPosts() *ForumPostQuery {
	return NewUserClient(u.config).QueryForumPosts(u)
}

// QueryPet queries the "pet" edge of the User entity.
func (u *User) QueryPet() *PetQuery {
	return NewUserClient(u.config).QueryPet(u)
}

// QueryGroups queries the "groups" edge of the User entity.
func (u *User) QueryGroups() *GroupQuery {
	return NewUserClient(u.config).QueryGroups(u)
}

// QueryReactedPosts queries the "reacted_posts" edge of the User entity.
func (u *User) QueryReactedPosts() *ForumPostQuery {
	return NewUserClient(u.config).QueryReactedPosts(u)
}

// QueryVotedDeadlines queries the "voted_deadlines" edge of the User entity.
func (u *User) QueryVotedDeadlines() *DeadlineQuery {
	return NewUserClient(u.config).QueryVotedDeadlines(u)
}

// QueryAuthoredDeadlines queries the "authored_deadlines" edge of the User entity.
func (u *User) QueryAuthoredDeadlines() *DeadlineQuery {
	return NewUserClient(u.config).QueryAuthoredDeadlines(u)
}

// QueryUserPets queries the "user_pets" edge of the User entity.
func (u *User) QueryUserPets() *UserPetQuery {
	return NewUserClient(u.config).QueryUserPets(u)
}

// QueryGroupUsers queries the "group_users" edge of the User entity.
func (u *User) QueryGroupUsers() *GroupUserQuery {
	return NewUserClient(u.config).QueryGroupUsers(u)
}

// QueryReactions queries the "reactions" edge of the User entity.
func (u *User) QueryReactions() *ReactionQuery {
	return NewUserClient(u.config).QueryReactions(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password_hash=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", u.Points))
	builder.WriteString(", ")
	builder.WriteString("points_awarded_count=")
	builder.WriteString(fmt.Sprintf("%v", u.PointsAwardedCount))
	builder.WriteString(", ")
	builder.WriteString("points_awarded_reset_time=")
	builder.WriteString(u.PointsAwardedResetTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("god_mode=")
	builder.WriteString(fmt.Sprintf("%v", u.GodMode))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
