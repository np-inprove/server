// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/academicschool"
	"github.com/np-inprove/server/internal/ent/institution"
)

// AcademicSchool is the model entity for the AcademicSchool schema.
type AcademicSchool struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the academic school
	Name string `json:"name,omitempty"`
	// Short code of the academic school (example: ICT)
	SchoolCode string `json:"school_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AcademicSchoolQuery when eager-loading is set.
	Edges                        AcademicSchoolEdges `json:"edges"`
	institution_academic_schools *int
	selectValues                 sql.SelectValues
}

// AcademicSchoolEdges holds the relations/edges for other nodes in the graph.
type AcademicSchoolEdges struct {
	// Institution holds the value of the institution edge.
	Institution *Institution `json:"institution,omitempty"`
	// Courses holds the value of the courses edge.
	Courses []*Course `json:"courses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InstitutionOrErr returns the Institution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AcademicSchoolEdges) InstitutionOrErr() (*Institution, error) {
	if e.loadedTypes[0] {
		if e.Institution == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: institution.Label}
		}
		return e.Institution, nil
	}
	return nil, &NotLoadedError{edge: "institution"}
}

// CoursesOrErr returns the Courses value or an error if the edge
// was not loaded in eager-loading.
func (e AcademicSchoolEdges) CoursesOrErr() ([]*Course, error) {
	if e.loadedTypes[1] {
		return e.Courses, nil
	}
	return nil, &NotLoadedError{edge: "courses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AcademicSchool) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case academicschool.FieldID:
			values[i] = new(sql.NullInt64)
		case academicschool.FieldName, academicschool.FieldSchoolCode:
			values[i] = new(sql.NullString)
		case academicschool.ForeignKeys[0]: // institution_academic_schools
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AcademicSchool fields.
func (as *AcademicSchool) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case academicschool.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case academicschool.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				as.Name = value.String
			}
		case academicschool.FieldSchoolCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field school_code", values[i])
			} else if value.Valid {
				as.SchoolCode = value.String
			}
		case academicschool.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field institution_academic_schools", value)
			} else if value.Valid {
				as.institution_academic_schools = new(int)
				*as.institution_academic_schools = int(value.Int64)
			}
		default:
			as.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AcademicSchool.
// This includes values selected through modifiers, order, etc.
func (as *AcademicSchool) Value(name string) (ent.Value, error) {
	return as.selectValues.Get(name)
}

// QueryInstitution queries the "institution" edge of the AcademicSchool entity.
func (as *AcademicSchool) QueryInstitution() *InstitutionQuery {
	return NewAcademicSchoolClient(as.config).QueryInstitution(as)
}

// QueryCourses queries the "courses" edge of the AcademicSchool entity.
func (as *AcademicSchool) QueryCourses() *CourseQuery {
	return NewAcademicSchoolClient(as.config).QueryCourses(as)
}

// Update returns a builder for updating this AcademicSchool.
// Note that you need to call AcademicSchool.Unwrap() before calling this method if this AcademicSchool
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AcademicSchool) Update() *AcademicSchoolUpdateOne {
	return NewAcademicSchoolClient(as.config).UpdateOne(as)
}

// Unwrap unwraps the AcademicSchool entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AcademicSchool) Unwrap() *AcademicSchool {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AcademicSchool is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AcademicSchool) String() string {
	var builder strings.Builder
	builder.WriteString("AcademicSchool(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("name=")
	builder.WriteString(as.Name)
	builder.WriteString(", ")
	builder.WriteString("school_code=")
	builder.WriteString(as.SchoolCode)
	builder.WriteByte(')')
	return builder.String()
}

// AcademicSchools is a parsable slice of AcademicSchool.
type AcademicSchools []*AcademicSchool
