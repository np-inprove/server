// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/academicschool"
	"github.com/np-inprove/server/internal/ent/course"
	"github.com/np-inprove/server/internal/ent/institution"
)

// AcademicSchoolCreate is the builder for creating a AcademicSchool entity.
type AcademicSchoolCreate struct {
	config
	mutation *AcademicSchoolMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (asc *AcademicSchoolCreate) SetName(s string) *AcademicSchoolCreate {
	asc.mutation.SetName(s)
	return asc
}

// SetSchoolCode sets the "school_code" field.
func (asc *AcademicSchoolCreate) SetSchoolCode(s string) *AcademicSchoolCreate {
	asc.mutation.SetSchoolCode(s)
	return asc
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (asc *AcademicSchoolCreate) SetInstitutionID(id int) *AcademicSchoolCreate {
	asc.mutation.SetInstitutionID(id)
	return asc
}

// SetNillableInstitutionID sets the "institution" edge to the Institution entity by ID if the given value is not nil.
func (asc *AcademicSchoolCreate) SetNillableInstitutionID(id *int) *AcademicSchoolCreate {
	if id != nil {
		asc = asc.SetInstitutionID(*id)
	}
	return asc
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (asc *AcademicSchoolCreate) SetInstitution(i *Institution) *AcademicSchoolCreate {
	return asc.SetInstitutionID(i.ID)
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (asc *AcademicSchoolCreate) AddCourseIDs(ids ...int) *AcademicSchoolCreate {
	asc.mutation.AddCourseIDs(ids...)
	return asc
}

// AddCourses adds the "courses" edges to the Course entity.
func (asc *AcademicSchoolCreate) AddCourses(c ...*Course) *AcademicSchoolCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return asc.AddCourseIDs(ids...)
}

// Mutation returns the AcademicSchoolMutation object of the builder.
func (asc *AcademicSchoolCreate) Mutation() *AcademicSchoolMutation {
	return asc.mutation
}

// Save creates the AcademicSchool in the database.
func (asc *AcademicSchoolCreate) Save(ctx context.Context) (*AcademicSchool, error) {
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AcademicSchoolCreate) SaveX(ctx context.Context) *AcademicSchool {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AcademicSchoolCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AcademicSchoolCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AcademicSchoolCreate) check() error {
	if _, ok := asc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AcademicSchool.name"`)}
	}
	if v, ok := asc.mutation.Name(); ok {
		if err := academicschool.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcademicSchool.name": %w`, err)}
		}
	}
	if _, ok := asc.mutation.SchoolCode(); !ok {
		return &ValidationError{Name: "school_code", err: errors.New(`ent: missing required field "AcademicSchool.school_code"`)}
	}
	if v, ok := asc.mutation.SchoolCode(); ok {
		if err := academicschool.SchoolCodeValidator(v); err != nil {
			return &ValidationError{Name: "school_code", err: fmt.Errorf(`ent: validator failed for field "AcademicSchool.school_code": %w`, err)}
		}
	}
	return nil
}

func (asc *AcademicSchoolCreate) sqlSave(ctx context.Context) (*AcademicSchool, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AcademicSchoolCreate) createSpec() (*AcademicSchool, *sqlgraph.CreateSpec) {
	var (
		_node = &AcademicSchool{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(academicschool.Table, sqlgraph.NewFieldSpec(academicschool.FieldID, field.TypeInt))
	)
	if value, ok := asc.mutation.Name(); ok {
		_spec.SetField(academicschool.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := asc.mutation.SchoolCode(); ok {
		_spec.SetField(academicschool.FieldSchoolCode, field.TypeString, value)
		_node.SchoolCode = value
	}
	if nodes := asc.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   academicschool.InstitutionTable,
			Columns: []string{academicschool.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.institution_academic_schools = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   academicschool.CoursesTable,
			Columns: []string{academicschool.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AcademicSchoolCreateBulk is the builder for creating many AcademicSchool entities in bulk.
type AcademicSchoolCreateBulk struct {
	config
	builders []*AcademicSchoolCreate
}

// Save creates the AcademicSchool entities in the database.
func (ascb *AcademicSchoolCreateBulk) Save(ctx context.Context) ([]*AcademicSchool, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AcademicSchool, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AcademicSchoolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AcademicSchoolCreateBulk) SaveX(ctx context.Context) []*AcademicSchool {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AcademicSchoolCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AcademicSchoolCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
