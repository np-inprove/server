// Code generated by mockery v2.28.1. DO NOT EDIT.

package ent

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
)

// MockqueryHook is an autogenerated mock type for the queryHook type
type MockqueryHook struct {
	mock.Mock
}

type MockqueryHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockqueryHook) EXPECT() *MockqueryHook_Expecter {
	return &MockqueryHook_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MockqueryHook) Execute(_a0 context.Context, _a1 *sqlgraph.QuerySpec) {
	_m.Called(_a0, _a1)
}

// MockqueryHook_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockqueryHook_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *sqlgraph.QuerySpec
func (_e *MockqueryHook_Expecter) Execute(_a0 interface{}, _a1 interface{}) *MockqueryHook_Execute_Call {
	return &MockqueryHook_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *MockqueryHook_Execute_Call) Run(run func(_a0 context.Context, _a1 *sqlgraph.QuerySpec)) *MockqueryHook_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlgraph.QuerySpec))
	})
	return _c
}

func (_c *MockqueryHook_Execute_Call) Return() *MockqueryHook_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockqueryHook_Execute_Call) RunAndReturn(run func(context.Context, *sqlgraph.QuerySpec)) *MockqueryHook_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockqueryHook interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockqueryHook creates a new instance of MockqueryHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockqueryHook(t mockConstructorTestingTNewMockqueryHook) *MockqueryHook {
	mock := &MockqueryHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
