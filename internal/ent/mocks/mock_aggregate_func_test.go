// Code generated by mockery v2.28.1. DO NOT EDIT.

package ent

import (
	sql "entgo.io/ent/dialect/sql"
	mock "github.com/stretchr/testify/mock"
)

// MockAggregateFunc is an autogenerated mock type for the AggregateFunc type
type MockAggregateFunc struct {
	mock.Mock
}

type MockAggregateFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAggregateFunc) EXPECT() *MockAggregateFunc_Expecter {
	return &MockAggregateFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockAggregateFunc) Execute(_a0 *sql.Selector) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*sql.Selector) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAggregateFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAggregateFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *sql.Selector
func (_e *MockAggregateFunc_Expecter) Execute(_a0 interface{}) *MockAggregateFunc_Execute_Call {
	return &MockAggregateFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockAggregateFunc_Execute_Call) Run(run func(_a0 *sql.Selector)) *MockAggregateFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Selector))
	})
	return _c
}

func (_c *MockAggregateFunc_Execute_Call) Return(_a0 string) *MockAggregateFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateFunc_Execute_Call) RunAndReturn(run func(*sql.Selector) string) *MockAggregateFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAggregateFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAggregateFunc creates a new instance of MockAggregateFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAggregateFunc(t mockConstructorTestingTNewMockAggregateFunc) *MockAggregateFunc {
	mock := &MockAggregateFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
