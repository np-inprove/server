// Code generated by mockery v2.28.1. DO NOT EDIT.

package ent

import (
	sql "entgo.io/ent/dialect/sql"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderFunc is an autogenerated mock type for the OrderFunc type
type MockOrderFunc struct {
	mock.Mock
}

type MockOrderFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderFunc) EXPECT() *MockOrderFunc_Expecter {
	return &MockOrderFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockOrderFunc) Execute(_a0 *sql.Selector) {
	_m.Called(_a0)
}

// MockOrderFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockOrderFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *sql.Selector
func (_e *MockOrderFunc_Expecter) Execute(_a0 interface{}) *MockOrderFunc_Execute_Call {
	return &MockOrderFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockOrderFunc_Execute_Call) Run(run func(_a0 *sql.Selector)) *MockOrderFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sql.Selector))
	})
	return _c
}

func (_c *MockOrderFunc_Execute_Call) Return() *MockOrderFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOrderFunc_Execute_Call) RunAndReturn(run func(*sql.Selector)) *MockOrderFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockOrderFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOrderFunc creates a new instance of MockOrderFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOrderFunc(t mockConstructorTestingTNewMockOrderFunc) *MockOrderFunc {
	mock := &MockOrderFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
