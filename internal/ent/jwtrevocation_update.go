// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/jwtrevocation"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// JWTRevocationUpdate is the builder for updating JWTRevocation entities.
type JWTRevocationUpdate struct {
	config
	hooks    []Hook
	mutation *JWTRevocationMutation
}

// Where appends a list predicates to the JWTRevocationUpdate builder.
func (jru *JWTRevocationUpdate) Where(ps ...predicate.JWTRevocation) *JWTRevocationUpdate {
	jru.mutation.Where(ps...)
	return jru
}

// Mutation returns the JWTRevocationMutation object of the builder.
func (jru *JWTRevocationUpdate) Mutation() *JWTRevocationMutation {
	return jru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jru *JWTRevocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, jru.sqlSave, jru.mutation, jru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jru *JWTRevocationUpdate) SaveX(ctx context.Context) int {
	affected, err := jru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jru *JWTRevocationUpdate) Exec(ctx context.Context) error {
	_, err := jru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jru *JWTRevocationUpdate) ExecX(ctx context.Context) {
	if err := jru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jru *JWTRevocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jwtrevocation.Table, jwtrevocation.Columns, sqlgraph.NewFieldSpec(jwtrevocation.FieldID, field.TypeInt))
	if ps := jru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jwtrevocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jru.mutation.done = true
	return n, nil
}

// JWTRevocationUpdateOne is the builder for updating a single JWTRevocation entity.
type JWTRevocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JWTRevocationMutation
}

// Mutation returns the JWTRevocationMutation object of the builder.
func (jruo *JWTRevocationUpdateOne) Mutation() *JWTRevocationMutation {
	return jruo.mutation
}

// Where appends a list predicates to the JWTRevocationUpdate builder.
func (jruo *JWTRevocationUpdateOne) Where(ps ...predicate.JWTRevocation) *JWTRevocationUpdateOne {
	jruo.mutation.Where(ps...)
	return jruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jruo *JWTRevocationUpdateOne) Select(field string, fields ...string) *JWTRevocationUpdateOne {
	jruo.fields = append([]string{field}, fields...)
	return jruo
}

// Save executes the query and returns the updated JWTRevocation entity.
func (jruo *JWTRevocationUpdateOne) Save(ctx context.Context) (*JWTRevocation, error) {
	return withHooks(ctx, jruo.sqlSave, jruo.mutation, jruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jruo *JWTRevocationUpdateOne) SaveX(ctx context.Context) *JWTRevocation {
	node, err := jruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jruo *JWTRevocationUpdateOne) Exec(ctx context.Context) error {
	_, err := jruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jruo *JWTRevocationUpdateOne) ExecX(ctx context.Context) {
	if err := jruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jruo *JWTRevocationUpdateOne) sqlSave(ctx context.Context) (_node *JWTRevocation, err error) {
	_spec := sqlgraph.NewUpdateSpec(jwtrevocation.Table, jwtrevocation.Columns, sqlgraph.NewFieldSpec(jwtrevocation.FieldID, field.TypeInt))
	id, ok := jruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JWTRevocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jwtrevocation.FieldID)
		for _, f := range fields {
			if !jwtrevocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jwtrevocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &JWTRevocation{config: jruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jwtrevocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jruo.mutation.done = true
	return _node, nil
}
