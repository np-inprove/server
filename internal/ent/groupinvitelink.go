// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	entgroup "github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/groupinvitelink"
	"github.com/np-inprove/server/internal/entity/group"
)

// GroupInviteLink is the model entity for the GroupInviteLink schema.
type GroupInviteLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code used in the invite link
	Code string `json:"code,omitempty"`
	// Role granted in the invite
	Role group.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupInviteLinkQuery when eager-loading is set.
	Edges         GroupInviteLinkEdges `json:"edges"`
	group_invites *int
	selectValues  sql.SelectValues
}

// GroupInviteLinkEdges holds the relations/edges for other nodes in the graph.
type GroupInviteLinkEdges struct {
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupInviteLinkEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entgroup.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupInviteLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupinvitelink.FieldID:
			values[i] = new(sql.NullInt64)
		case groupinvitelink.FieldCode, groupinvitelink.FieldRole:
			values[i] = new(sql.NullString)
		case groupinvitelink.ForeignKeys[0]: // group_invites
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupInviteLink fields.
func (gil *GroupInviteLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupinvitelink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gil.ID = int(value.Int64)
		case groupinvitelink.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				gil.Code = value.String
			}
		case groupinvitelink.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				gil.Role = group.Role(value.String)
			}
		case groupinvitelink.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field group_invites", value)
			} else if value.Valid {
				gil.group_invites = new(int)
				*gil.group_invites = int(value.Int64)
			}
		default:
			gil.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroupInviteLink.
// This includes values selected through modifiers, order, etc.
func (gil *GroupInviteLink) Value(name string) (ent.Value, error) {
	return gil.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the GroupInviteLink entity.
func (gil *GroupInviteLink) QueryGroup() *GroupQuery {
	return NewGroupInviteLinkClient(gil.config).QueryGroup(gil)
}

// Update returns a builder for updating this GroupInviteLink.
// Note that you need to call GroupInviteLink.Unwrap() before calling this method if this GroupInviteLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (gil *GroupInviteLink) Update() *GroupInviteLinkUpdateOne {
	return NewGroupInviteLinkClient(gil.config).UpdateOne(gil)
}

// Unwrap unwraps the GroupInviteLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gil *GroupInviteLink) Unwrap() *GroupInviteLink {
	_tx, ok := gil.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupInviteLink is not a transactional entity")
	}
	gil.config.driver = _tx.drv
	return gil
}

// String implements the fmt.Stringer.
func (gil *GroupInviteLink) String() string {
	var builder strings.Builder
	builder.WriteString("GroupInviteLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gil.ID))
	builder.WriteString("code=")
	builder.WriteString(gil.Code)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", gil.Role))
	builder.WriteByte(')')
	return builder.String()
}

// GroupInviteLinks is a parsable slice of GroupInviteLink.
type GroupInviteLinks []*GroupInviteLink
