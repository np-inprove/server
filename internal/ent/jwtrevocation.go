// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/jwtrevocation"
)

// JWTRevocation is the model entity for the JWTRevocation schema.
type JWTRevocation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ID of the revoked JWT
	Jti string `json:"jti,omitempty"`
	// Expiry of the JWT.
	// The revocation can be deleted after the expiry has passed
	Expiry       time.Time `json:"expiry,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JWTRevocation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jwtrevocation.FieldID:
			values[i] = new(sql.NullInt64)
		case jwtrevocation.FieldJti:
			values[i] = new(sql.NullString)
		case jwtrevocation.FieldExpiry:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JWTRevocation fields.
func (jr *JWTRevocation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jwtrevocation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jr.ID = int(value.Int64)
		case jwtrevocation.FieldJti:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jti", values[i])
			} else if value.Valid {
				jr.Jti = value.String
			}
		case jwtrevocation.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				jr.Expiry = value.Time
			}
		default:
			jr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JWTRevocation.
// This includes values selected through modifiers, order, etc.
func (jr *JWTRevocation) Value(name string) (ent.Value, error) {
	return jr.selectValues.Get(name)
}

// Update returns a builder for updating this JWTRevocation.
// Note that you need to call JWTRevocation.Unwrap() before calling this method if this JWTRevocation
// was returned from a transaction, and the transaction was committed or rolled back.
func (jr *JWTRevocation) Update() *JWTRevocationUpdateOne {
	return NewJWTRevocationClient(jr.config).UpdateOne(jr)
}

// Unwrap unwraps the JWTRevocation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jr *JWTRevocation) Unwrap() *JWTRevocation {
	_tx, ok := jr.config.driver.(*txDriver)
	if !ok {
		panic("ent: JWTRevocation is not a transactional entity")
	}
	jr.config.driver = _tx.drv
	return jr
}

// String implements the fmt.Stringer.
func (jr *JWTRevocation) String() string {
	var builder strings.Builder
	builder.WriteString("JWTRevocation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jr.ID))
	builder.WriteString("jti=")
	builder.WriteString(jr.Jti)
	builder.WriteString(", ")
	builder.WriteString("expiry=")
	builder.WriteString(jr.Expiry.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JWTRevocations is a parsable slice of JWTRevocation.
type JWTRevocations []*JWTRevocation
