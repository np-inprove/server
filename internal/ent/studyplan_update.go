// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/milestone"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/studyplan"
	"github.com/np-inprove/server/internal/ent/user"
)

// StudyPlanUpdate is the builder for updating StudyPlan entities.
type StudyPlanUpdate struct {
	config
	hooks    []Hook
	mutation *StudyPlanMutation
}

// Where appends a list predicates to the StudyPlanUpdate builder.
func (spu *StudyPlanUpdate) Where(ps ...predicate.StudyPlan) *StudyPlanUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetName sets the "name" field.
func (spu *StudyPlanUpdate) SetName(s string) *StudyPlanUpdate {
	spu.mutation.SetName(s)
	return spu
}

// SetShareCode sets the "share_code" field.
func (spu *StudyPlanUpdate) SetShareCode(s string) *StudyPlanUpdate {
	spu.mutation.SetShareCode(s)
	return spu
}

// SetNillableShareCode sets the "share_code" field if the given value is not nil.
func (spu *StudyPlanUpdate) SetNillableShareCode(s *string) *StudyPlanUpdate {
	if s != nil {
		spu.SetShareCode(*s)
	}
	return spu
}

// ClearShareCode clears the value of the "share_code" field.
func (spu *StudyPlanUpdate) ClearShareCode() *StudyPlanUpdate {
	spu.mutation.ClearShareCode()
	return spu
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (spu *StudyPlanUpdate) SetAuthorID(id int) *StudyPlanUpdate {
	spu.mutation.SetAuthorID(id)
	return spu
}

// SetAuthor sets the "author" edge to the User entity.
func (spu *StudyPlanUpdate) SetAuthor(u *User) *StudyPlanUpdate {
	return spu.SetAuthorID(u.ID)
}

// AddMilestoneIDs adds the "milestones" edge to the Milestone entity by IDs.
func (spu *StudyPlanUpdate) AddMilestoneIDs(ids ...int) *StudyPlanUpdate {
	spu.mutation.AddMilestoneIDs(ids...)
	return spu
}

// AddMilestones adds the "milestones" edges to the Milestone entity.
func (spu *StudyPlanUpdate) AddMilestones(m ...*Milestone) *StudyPlanUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return spu.AddMilestoneIDs(ids...)
}

// Mutation returns the StudyPlanMutation object of the builder.
func (spu *StudyPlanUpdate) Mutation() *StudyPlanMutation {
	return spu.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (spu *StudyPlanUpdate) ClearAuthor() *StudyPlanUpdate {
	spu.mutation.ClearAuthor()
	return spu
}

// ClearMilestones clears all "milestones" edges to the Milestone entity.
func (spu *StudyPlanUpdate) ClearMilestones() *StudyPlanUpdate {
	spu.mutation.ClearMilestones()
	return spu
}

// RemoveMilestoneIDs removes the "milestones" edge to Milestone entities by IDs.
func (spu *StudyPlanUpdate) RemoveMilestoneIDs(ids ...int) *StudyPlanUpdate {
	spu.mutation.RemoveMilestoneIDs(ids...)
	return spu
}

// RemoveMilestones removes "milestones" edges to Milestone entities.
func (spu *StudyPlanUpdate) RemoveMilestones(m ...*Milestone) *StudyPlanUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return spu.RemoveMilestoneIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *StudyPlanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *StudyPlanUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *StudyPlanUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *StudyPlanUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *StudyPlanUpdate) check() error {
	if v, ok := spu.mutation.Name(); ok {
		if err := studyplan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StudyPlan.name": %w`, err)}
		}
	}
	if _, ok := spu.mutation.AuthorID(); spu.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudyPlan.author"`)
	}
	return nil
}

func (spu *StudyPlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(studyplan.Table, studyplan.Columns, sqlgraph.NewFieldSpec(studyplan.FieldID, field.TypeInt))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Name(); ok {
		_spec.SetField(studyplan.FieldName, field.TypeString, value)
	}
	if value, ok := spu.mutation.ShareCode(); ok {
		_spec.SetField(studyplan.FieldShareCode, field.TypeString, value)
	}
	if spu.mutation.ShareCodeCleared() {
		_spec.ClearField(studyplan.FieldShareCode, field.TypeString)
	}
	if spu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   studyplan.AuthorTable,
			Columns: []string{studyplan.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   studyplan.AuthorTable,
			Columns: []string{studyplan.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.MilestonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studyplan.MilestonesTable,
			Columns: []string{studyplan.MilestonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedMilestonesIDs(); len(nodes) > 0 && !spu.mutation.MilestonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studyplan.MilestonesTable,
			Columns: []string{studyplan.MilestonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.MilestonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studyplan.MilestonesTable,
			Columns: []string{studyplan.MilestonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studyplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// StudyPlanUpdateOne is the builder for updating a single StudyPlan entity.
type StudyPlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudyPlanMutation
}

// SetName sets the "name" field.
func (spuo *StudyPlanUpdateOne) SetName(s string) *StudyPlanUpdateOne {
	spuo.mutation.SetName(s)
	return spuo
}

// SetShareCode sets the "share_code" field.
func (spuo *StudyPlanUpdateOne) SetShareCode(s string) *StudyPlanUpdateOne {
	spuo.mutation.SetShareCode(s)
	return spuo
}

// SetNillableShareCode sets the "share_code" field if the given value is not nil.
func (spuo *StudyPlanUpdateOne) SetNillableShareCode(s *string) *StudyPlanUpdateOne {
	if s != nil {
		spuo.SetShareCode(*s)
	}
	return spuo
}

// ClearShareCode clears the value of the "share_code" field.
func (spuo *StudyPlanUpdateOne) ClearShareCode() *StudyPlanUpdateOne {
	spuo.mutation.ClearShareCode()
	return spuo
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (spuo *StudyPlanUpdateOne) SetAuthorID(id int) *StudyPlanUpdateOne {
	spuo.mutation.SetAuthorID(id)
	return spuo
}

// SetAuthor sets the "author" edge to the User entity.
func (spuo *StudyPlanUpdateOne) SetAuthor(u *User) *StudyPlanUpdateOne {
	return spuo.SetAuthorID(u.ID)
}

// AddMilestoneIDs adds the "milestones" edge to the Milestone entity by IDs.
func (spuo *StudyPlanUpdateOne) AddMilestoneIDs(ids ...int) *StudyPlanUpdateOne {
	spuo.mutation.AddMilestoneIDs(ids...)
	return spuo
}

// AddMilestones adds the "milestones" edges to the Milestone entity.
func (spuo *StudyPlanUpdateOne) AddMilestones(m ...*Milestone) *StudyPlanUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return spuo.AddMilestoneIDs(ids...)
}

// Mutation returns the StudyPlanMutation object of the builder.
func (spuo *StudyPlanUpdateOne) Mutation() *StudyPlanMutation {
	return spuo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (spuo *StudyPlanUpdateOne) ClearAuthor() *StudyPlanUpdateOne {
	spuo.mutation.ClearAuthor()
	return spuo
}

// ClearMilestones clears all "milestones" edges to the Milestone entity.
func (spuo *StudyPlanUpdateOne) ClearMilestones() *StudyPlanUpdateOne {
	spuo.mutation.ClearMilestones()
	return spuo
}

// RemoveMilestoneIDs removes the "milestones" edge to Milestone entities by IDs.
func (spuo *StudyPlanUpdateOne) RemoveMilestoneIDs(ids ...int) *StudyPlanUpdateOne {
	spuo.mutation.RemoveMilestoneIDs(ids...)
	return spuo
}

// RemoveMilestones removes "milestones" edges to Milestone entities.
func (spuo *StudyPlanUpdateOne) RemoveMilestones(m ...*Milestone) *StudyPlanUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return spuo.RemoveMilestoneIDs(ids...)
}

// Where appends a list predicates to the StudyPlanUpdate builder.
func (spuo *StudyPlanUpdateOne) Where(ps ...predicate.StudyPlan) *StudyPlanUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *StudyPlanUpdateOne) Select(field string, fields ...string) *StudyPlanUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated StudyPlan entity.
func (spuo *StudyPlanUpdateOne) Save(ctx context.Context) (*StudyPlan, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *StudyPlanUpdateOne) SaveX(ctx context.Context) *StudyPlan {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *StudyPlanUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *StudyPlanUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *StudyPlanUpdateOne) check() error {
	if v, ok := spuo.mutation.Name(); ok {
		if err := studyplan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StudyPlan.name": %w`, err)}
		}
	}
	if _, ok := spuo.mutation.AuthorID(); spuo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StudyPlan.author"`)
	}
	return nil
}

func (spuo *StudyPlanUpdateOne) sqlSave(ctx context.Context) (_node *StudyPlan, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(studyplan.Table, studyplan.Columns, sqlgraph.NewFieldSpec(studyplan.FieldID, field.TypeInt))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StudyPlan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studyplan.FieldID)
		for _, f := range fields {
			if !studyplan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != studyplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Name(); ok {
		_spec.SetField(studyplan.FieldName, field.TypeString, value)
	}
	if value, ok := spuo.mutation.ShareCode(); ok {
		_spec.SetField(studyplan.FieldShareCode, field.TypeString, value)
	}
	if spuo.mutation.ShareCodeCleared() {
		_spec.ClearField(studyplan.FieldShareCode, field.TypeString)
	}
	if spuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   studyplan.AuthorTable,
			Columns: []string{studyplan.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   studyplan.AuthorTable,
			Columns: []string{studyplan.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.MilestonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studyplan.MilestonesTable,
			Columns: []string{studyplan.MilestonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedMilestonesIDs(); len(nodes) > 0 && !spuo.mutation.MilestonesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studyplan.MilestonesTable,
			Columns: []string{studyplan.MilestonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.MilestonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studyplan.MilestonesTable,
			Columns: []string{studyplan.MilestonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StudyPlan{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{studyplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
