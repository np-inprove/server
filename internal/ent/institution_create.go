// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/accessory"
	"github.com/np-inprove/server/internal/ent/department"
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/user"
	"github.com/np-inprove/server/internal/ent/voucher"
)

// InstitutionCreate is the builder for creating a Institution entity.
type InstitutionCreate struct {
	config
	mutation *InstitutionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ic *InstitutionCreate) SetName(s string) *InstitutionCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetShortName sets the "short_name" field.
func (ic *InstitutionCreate) SetShortName(s string) *InstitutionCreate {
	ic.mutation.SetShortName(s)
	return ic
}

// SetAdminDomain sets the "admin_domain" field.
func (ic *InstitutionCreate) SetAdminDomain(s string) *InstitutionCreate {
	ic.mutation.SetAdminDomain(s)
	return ic
}

// SetStudentDomain sets the "student_domain" field.
func (ic *InstitutionCreate) SetStudentDomain(s string) *InstitutionCreate {
	ic.mutation.SetStudentDomain(s)
	return ic
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (ic *InstitutionCreate) AddAdminIDs(ids ...int) *InstitutionCreate {
	ic.mutation.AddAdminIDs(ids...)
	return ic
}

// AddAdmins adds the "admins" edges to the User entity.
func (ic *InstitutionCreate) AddAdmins(u ...*User) *InstitutionCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ic.AddAdminIDs(ids...)
}

// AddVoucherIDs adds the "vouchers" edge to the Voucher entity by IDs.
func (ic *InstitutionCreate) AddVoucherIDs(ids ...int) *InstitutionCreate {
	ic.mutation.AddVoucherIDs(ids...)
	return ic
}

// AddVouchers adds the "vouchers" edges to the Voucher entity.
func (ic *InstitutionCreate) AddVouchers(v ...*Voucher) *InstitutionCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ic.AddVoucherIDs(ids...)
}

// AddAccessoryIDs adds the "accessories" edge to the Accessory entity by IDs.
func (ic *InstitutionCreate) AddAccessoryIDs(ids ...int) *InstitutionCreate {
	ic.mutation.AddAccessoryIDs(ids...)
	return ic
}

// AddAccessories adds the "accessories" edges to the Accessory entity.
func (ic *InstitutionCreate) AddAccessories(a ...*Accessory) *InstitutionCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ic.AddAccessoryIDs(ids...)
}

// AddDepartmentIDs adds the "departments" edge to the Department entity by IDs.
func (ic *InstitutionCreate) AddDepartmentIDs(ids ...int) *InstitutionCreate {
	ic.mutation.AddDepartmentIDs(ids...)
	return ic
}

// AddDepartments adds the "departments" edges to the Department entity.
func (ic *InstitutionCreate) AddDepartments(d ...*Department) *InstitutionCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ic.AddDepartmentIDs(ids...)
}

// Mutation returns the InstitutionMutation object of the builder.
func (ic *InstitutionCreate) Mutation() *InstitutionMutation {
	return ic.mutation
}

// Save creates the Institution in the database.
func (ic *InstitutionCreate) Save(ctx context.Context) (*Institution, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InstitutionCreate) SaveX(ctx context.Context) *Institution {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InstitutionCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InstitutionCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InstitutionCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Institution.name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := institution.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Institution.name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.ShortName(); !ok {
		return &ValidationError{Name: "short_name", err: errors.New(`ent: missing required field "Institution.short_name"`)}
	}
	if v, ok := ic.mutation.ShortName(); ok {
		if err := institution.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "short_name", err: fmt.Errorf(`ent: validator failed for field "Institution.short_name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.AdminDomain(); !ok {
		return &ValidationError{Name: "admin_domain", err: errors.New(`ent: missing required field "Institution.admin_domain"`)}
	}
	if v, ok := ic.mutation.AdminDomain(); ok {
		if err := institution.AdminDomainValidator(v); err != nil {
			return &ValidationError{Name: "admin_domain", err: fmt.Errorf(`ent: validator failed for field "Institution.admin_domain": %w`, err)}
		}
	}
	if _, ok := ic.mutation.StudentDomain(); !ok {
		return &ValidationError{Name: "student_domain", err: errors.New(`ent: missing required field "Institution.student_domain"`)}
	}
	if v, ok := ic.mutation.StudentDomain(); ok {
		if err := institution.StudentDomainValidator(v); err != nil {
			return &ValidationError{Name: "student_domain", err: fmt.Errorf(`ent: validator failed for field "Institution.student_domain": %w`, err)}
		}
	}
	return nil
}

func (ic *InstitutionCreate) sqlSave(ctx context.Context) (*Institution, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InstitutionCreate) createSpec() (*Institution, *sqlgraph.CreateSpec) {
	var (
		_node = &Institution{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(institution.Table, sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ic.conflict
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(institution.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.ShortName(); ok {
		_spec.SetField(institution.FieldShortName, field.TypeString, value)
		_node.ShortName = value
	}
	if value, ok := ic.mutation.AdminDomain(); ok {
		_spec.SetField(institution.FieldAdminDomain, field.TypeString, value)
		_node.AdminDomain = value
	}
	if value, ok := ic.mutation.StudentDomain(); ok {
		_spec.SetField(institution.FieldStudentDomain, field.TypeString, value)
		_node.StudentDomain = value
	}
	if nodes := ic.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   institution.AdminsTable,
			Columns: institution.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.VouchersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.VouchersTable,
			Columns: []string{institution.VouchersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.AccessoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.AccessoriesTable,
			Columns: []string{institution.AccessoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.DepartmentsTable,
			Columns: []string{institution.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Institution.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstitutionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ic *InstitutionCreate) OnConflict(opts ...sql.ConflictOption) *InstitutionUpsertOne {
	ic.conflict = opts
	return &InstitutionUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Institution.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InstitutionCreate) OnConflictColumns(columns ...string) *InstitutionUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InstitutionUpsertOne{
		create: ic,
	}
}

type (
	// InstitutionUpsertOne is the builder for "upsert"-ing
	//  one Institution node.
	InstitutionUpsertOne struct {
		create *InstitutionCreate
	}

	// InstitutionUpsert is the "OnConflict" setter.
	InstitutionUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *InstitutionUpsert) SetName(v string) *InstitutionUpsert {
	u.Set(institution.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InstitutionUpsert) UpdateName() *InstitutionUpsert {
	u.SetExcluded(institution.FieldName)
	return u
}

// SetShortName sets the "short_name" field.
func (u *InstitutionUpsert) SetShortName(v string) *InstitutionUpsert {
	u.Set(institution.FieldShortName, v)
	return u
}

// UpdateShortName sets the "short_name" field to the value that was provided on create.
func (u *InstitutionUpsert) UpdateShortName() *InstitutionUpsert {
	u.SetExcluded(institution.FieldShortName)
	return u
}

// SetAdminDomain sets the "admin_domain" field.
func (u *InstitutionUpsert) SetAdminDomain(v string) *InstitutionUpsert {
	u.Set(institution.FieldAdminDomain, v)
	return u
}

// UpdateAdminDomain sets the "admin_domain" field to the value that was provided on create.
func (u *InstitutionUpsert) UpdateAdminDomain() *InstitutionUpsert {
	u.SetExcluded(institution.FieldAdminDomain)
	return u
}

// SetStudentDomain sets the "student_domain" field.
func (u *InstitutionUpsert) SetStudentDomain(v string) *InstitutionUpsert {
	u.Set(institution.FieldStudentDomain, v)
	return u
}

// UpdateStudentDomain sets the "student_domain" field to the value that was provided on create.
func (u *InstitutionUpsert) UpdateStudentDomain() *InstitutionUpsert {
	u.SetExcluded(institution.FieldStudentDomain)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Institution.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InstitutionUpsertOne) UpdateNewValues() *InstitutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Institution.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InstitutionUpsertOne) Ignore() *InstitutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstitutionUpsertOne) DoNothing() *InstitutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstitutionCreate.OnConflict
// documentation for more info.
func (u *InstitutionUpsertOne) Update(set func(*InstitutionUpsert)) *InstitutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstitutionUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *InstitutionUpsertOne) SetName(v string) *InstitutionUpsertOne {
	return u.Update(func(s *InstitutionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InstitutionUpsertOne) UpdateName() *InstitutionUpsertOne {
	return u.Update(func(s *InstitutionUpsert) {
		s.UpdateName()
	})
}

// SetShortName sets the "short_name" field.
func (u *InstitutionUpsertOne) SetShortName(v string) *InstitutionUpsertOne {
	return u.Update(func(s *InstitutionUpsert) {
		s.SetShortName(v)
	})
}

// UpdateShortName sets the "short_name" field to the value that was provided on create.
func (u *InstitutionUpsertOne) UpdateShortName() *InstitutionUpsertOne {
	return u.Update(func(s *InstitutionUpsert) {
		s.UpdateShortName()
	})
}

// SetAdminDomain sets the "admin_domain" field.
func (u *InstitutionUpsertOne) SetAdminDomain(v string) *InstitutionUpsertOne {
	return u.Update(func(s *InstitutionUpsert) {
		s.SetAdminDomain(v)
	})
}

// UpdateAdminDomain sets the "admin_domain" field to the value that was provided on create.
func (u *InstitutionUpsertOne) UpdateAdminDomain() *InstitutionUpsertOne {
	return u.Update(func(s *InstitutionUpsert) {
		s.UpdateAdminDomain()
	})
}

// SetStudentDomain sets the "student_domain" field.
func (u *InstitutionUpsertOne) SetStudentDomain(v string) *InstitutionUpsertOne {
	return u.Update(func(s *InstitutionUpsert) {
		s.SetStudentDomain(v)
	})
}

// UpdateStudentDomain sets the "student_domain" field to the value that was provided on create.
func (u *InstitutionUpsertOne) UpdateStudentDomain() *InstitutionUpsertOne {
	return u.Update(func(s *InstitutionUpsert) {
		s.UpdateStudentDomain()
	})
}

// Exec executes the query.
func (u *InstitutionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstitutionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstitutionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InstitutionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InstitutionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InstitutionCreateBulk is the builder for creating many Institution entities in bulk.
type InstitutionCreateBulk struct {
	config
	builders []*InstitutionCreate
	conflict []sql.ConflictOption
}

// Save creates the Institution entities in the database.
func (icb *InstitutionCreateBulk) Save(ctx context.Context) ([]*Institution, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Institution, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstitutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InstitutionCreateBulk) SaveX(ctx context.Context) []*Institution {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InstitutionCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InstitutionCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Institution.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstitutionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (icb *InstitutionCreateBulk) OnConflict(opts ...sql.ConflictOption) *InstitutionUpsertBulk {
	icb.conflict = opts
	return &InstitutionUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Institution.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InstitutionCreateBulk) OnConflictColumns(columns ...string) *InstitutionUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InstitutionUpsertBulk{
		create: icb,
	}
}

// InstitutionUpsertBulk is the builder for "upsert"-ing
// a bulk of Institution nodes.
type InstitutionUpsertBulk struct {
	create *InstitutionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Institution.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InstitutionUpsertBulk) UpdateNewValues() *InstitutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Institution.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InstitutionUpsertBulk) Ignore() *InstitutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstitutionUpsertBulk) DoNothing() *InstitutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstitutionCreateBulk.OnConflict
// documentation for more info.
func (u *InstitutionUpsertBulk) Update(set func(*InstitutionUpsert)) *InstitutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstitutionUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *InstitutionUpsertBulk) SetName(v string) *InstitutionUpsertBulk {
	return u.Update(func(s *InstitutionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InstitutionUpsertBulk) UpdateName() *InstitutionUpsertBulk {
	return u.Update(func(s *InstitutionUpsert) {
		s.UpdateName()
	})
}

// SetShortName sets the "short_name" field.
func (u *InstitutionUpsertBulk) SetShortName(v string) *InstitutionUpsertBulk {
	return u.Update(func(s *InstitutionUpsert) {
		s.SetShortName(v)
	})
}

// UpdateShortName sets the "short_name" field to the value that was provided on create.
func (u *InstitutionUpsertBulk) UpdateShortName() *InstitutionUpsertBulk {
	return u.Update(func(s *InstitutionUpsert) {
		s.UpdateShortName()
	})
}

// SetAdminDomain sets the "admin_domain" field.
func (u *InstitutionUpsertBulk) SetAdminDomain(v string) *InstitutionUpsertBulk {
	return u.Update(func(s *InstitutionUpsert) {
		s.SetAdminDomain(v)
	})
}

// UpdateAdminDomain sets the "admin_domain" field to the value that was provided on create.
func (u *InstitutionUpsertBulk) UpdateAdminDomain() *InstitutionUpsertBulk {
	return u.Update(func(s *InstitutionUpsert) {
		s.UpdateAdminDomain()
	})
}

// SetStudentDomain sets the "student_domain" field.
func (u *InstitutionUpsertBulk) SetStudentDomain(v string) *InstitutionUpsertBulk {
	return u.Update(func(s *InstitutionUpsert) {
		s.SetStudentDomain(v)
	})
}

// UpdateStudentDomain sets the "student_domain" field to the value that was provided on create.
func (u *InstitutionUpsertBulk) UpdateStudentDomain() *InstitutionUpsertBulk {
	return u.Update(func(s *InstitutionUpsert) {
		s.UpdateStudentDomain()
	})
}

// Exec executes the query.
func (u *InstitutionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InstitutionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstitutionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstitutionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
