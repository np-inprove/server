// Code generated by ent, DO NOT EDIT.

package academicschool

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldEQ(FieldName, v))
}

// SchoolCode applies equality check predicate on the "school_code" field. It's identical to SchoolCodeEQ.
func SchoolCode(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldEQ(FieldSchoolCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldContainsFold(FieldName, v))
}

// SchoolCodeEQ applies the EQ predicate on the "school_code" field.
func SchoolCodeEQ(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldEQ(FieldSchoolCode, v))
}

// SchoolCodeNEQ applies the NEQ predicate on the "school_code" field.
func SchoolCodeNEQ(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldNEQ(FieldSchoolCode, v))
}

// SchoolCodeIn applies the In predicate on the "school_code" field.
func SchoolCodeIn(vs ...string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldIn(FieldSchoolCode, vs...))
}

// SchoolCodeNotIn applies the NotIn predicate on the "school_code" field.
func SchoolCodeNotIn(vs ...string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldNotIn(FieldSchoolCode, vs...))
}

// SchoolCodeGT applies the GT predicate on the "school_code" field.
func SchoolCodeGT(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldGT(FieldSchoolCode, v))
}

// SchoolCodeGTE applies the GTE predicate on the "school_code" field.
func SchoolCodeGTE(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldGTE(FieldSchoolCode, v))
}

// SchoolCodeLT applies the LT predicate on the "school_code" field.
func SchoolCodeLT(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldLT(FieldSchoolCode, v))
}

// SchoolCodeLTE applies the LTE predicate on the "school_code" field.
func SchoolCodeLTE(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldLTE(FieldSchoolCode, v))
}

// SchoolCodeContains applies the Contains predicate on the "school_code" field.
func SchoolCodeContains(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldContains(FieldSchoolCode, v))
}

// SchoolCodeHasPrefix applies the HasPrefix predicate on the "school_code" field.
func SchoolCodeHasPrefix(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldHasPrefix(FieldSchoolCode, v))
}

// SchoolCodeHasSuffix applies the HasSuffix predicate on the "school_code" field.
func SchoolCodeHasSuffix(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldHasSuffix(FieldSchoolCode, v))
}

// SchoolCodeEqualFold applies the EqualFold predicate on the "school_code" field.
func SchoolCodeEqualFold(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldEqualFold(FieldSchoolCode, v))
}

// SchoolCodeContainsFold applies the ContainsFold predicate on the "school_code" field.
func SchoolCodeContainsFold(v string) predicate.AcademicSchool {
	return predicate.AcademicSchool(sql.FieldContainsFold(FieldSchoolCode, v))
}

// HasInstitution applies the HasEdge predicate on the "institution" edge.
func HasInstitution() predicate.AcademicSchool {
	return predicate.AcademicSchool(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InstitutionTable, InstitutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstitutionWith applies the HasEdge predicate on the "institution" edge with a given conditions (other predicates).
func HasInstitutionWith(preds ...predicate.Institution) predicate.AcademicSchool {
	return predicate.AcademicSchool(func(s *sql.Selector) {
		step := newInstitutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourses applies the HasEdge predicate on the "courses" edge.
func HasCourses() predicate.AcademicSchool {
	return predicate.AcademicSchool(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CoursesTable, CoursesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoursesWith applies the HasEdge predicate on the "courses" edge with a given conditions (other predicates).
func HasCoursesWith(preds ...predicate.Course) predicate.AcademicSchool {
	return predicate.AcademicSchool(func(s *sql.Selector) {
		step := newCoursesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AcademicSchool) predicate.AcademicSchool {
	return predicate.AcademicSchool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AcademicSchool) predicate.AcademicSchool {
	return predicate.AcademicSchool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AcademicSchool) predicate.AcademicSchool {
	return predicate.AcademicSchool(func(s *sql.Selector) {
		p(s.Not())
	})
}
