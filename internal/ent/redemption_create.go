// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/accessory"
	"github.com/np-inprove/server/internal/ent/redemption"
	"github.com/np-inprove/server/internal/ent/user"
	"github.com/np-inprove/server/internal/ent/voucher"
)

// RedemptionCreate is the builder for creating a Redemption entity.
type RedemptionCreate struct {
	config
	mutation *RedemptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRedeemedAt sets the "redeemed_at" field.
func (rc *RedemptionCreate) SetRedeemedAt(t time.Time) *RedemptionCreate {
	rc.mutation.SetRedeemedAt(t)
	return rc
}

// SetVoucherID sets the "voucher" edge to the Voucher entity by ID.
func (rc *RedemptionCreate) SetVoucherID(id int) *RedemptionCreate {
	rc.mutation.SetVoucherID(id)
	return rc
}

// SetNillableVoucherID sets the "voucher" edge to the Voucher entity by ID if the given value is not nil.
func (rc *RedemptionCreate) SetNillableVoucherID(id *int) *RedemptionCreate {
	if id != nil {
		rc = rc.SetVoucherID(*id)
	}
	return rc
}

// SetVoucher sets the "voucher" edge to the Voucher entity.
func (rc *RedemptionCreate) SetVoucher(v *Voucher) *RedemptionCreate {
	return rc.SetVoucherID(v.ID)
}

// SetAccessoryID sets the "accessory" edge to the Accessory entity by ID.
func (rc *RedemptionCreate) SetAccessoryID(id int) *RedemptionCreate {
	rc.mutation.SetAccessoryID(id)
	return rc
}

// SetNillableAccessoryID sets the "accessory" edge to the Accessory entity by ID if the given value is not nil.
func (rc *RedemptionCreate) SetNillableAccessoryID(id *int) *RedemptionCreate {
	if id != nil {
		rc = rc.SetAccessoryID(*id)
	}
	return rc
}

// SetAccessory sets the "accessory" edge to the Accessory entity.
func (rc *RedemptionCreate) SetAccessory(a *Accessory) *RedemptionCreate {
	return rc.SetAccessoryID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rc *RedemptionCreate) SetUserID(id int) *RedemptionCreate {
	rc.mutation.SetUserID(id)
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *RedemptionCreate) SetUser(u *User) *RedemptionCreate {
	return rc.SetUserID(u.ID)
}

// Mutation returns the RedemptionMutation object of the builder.
func (rc *RedemptionCreate) Mutation() *RedemptionMutation {
	return rc.mutation
}

// Save creates the Redemption in the database.
func (rc *RedemptionCreate) Save(ctx context.Context) (*Redemption, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RedemptionCreate) SaveX(ctx context.Context) *Redemption {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RedemptionCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RedemptionCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RedemptionCreate) check() error {
	if _, ok := rc.mutation.RedeemedAt(); !ok {
		return &ValidationError{Name: "redeemed_at", err: errors.New(`ent: missing required field "Redemption.redeemed_at"`)}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Redemption.user"`)}
	}
	return nil
}

func (rc *RedemptionCreate) sqlSave(ctx context.Context) (*Redemption, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RedemptionCreate) createSpec() (*Redemption, *sqlgraph.CreateSpec) {
	var (
		_node = &Redemption{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(redemption.Table, sqlgraph.NewFieldSpec(redemption.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.RedeemedAt(); ok {
		_spec.SetField(redemption.FieldRedeemedAt, field.TypeTime, value)
		_node.RedeemedAt = value
	}
	if nodes := rc.mutation.VoucherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.VoucherTable,
			Columns: []string{redemption.VoucherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.voucher_redemptions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AccessoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.AccessoryTable,
			Columns: []string{redemption.AccessoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.accessory_redemptions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   redemption.UserTable,
			Columns: []string{redemption.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.redemption_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Redemption.Create().
//		SetRedeemedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RedemptionUpsert) {
//			SetRedeemedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *RedemptionCreate) OnConflict(opts ...sql.ConflictOption) *RedemptionUpsertOne {
	rc.conflict = opts
	return &RedemptionUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Redemption.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RedemptionCreate) OnConflictColumns(columns ...string) *RedemptionUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RedemptionUpsertOne{
		create: rc,
	}
}

type (
	// RedemptionUpsertOne is the builder for "upsert"-ing
	//  one Redemption node.
	RedemptionUpsertOne struct {
		create *RedemptionCreate
	}

	// RedemptionUpsert is the "OnConflict" setter.
	RedemptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetRedeemedAt sets the "redeemed_at" field.
func (u *RedemptionUpsert) SetRedeemedAt(v time.Time) *RedemptionUpsert {
	u.Set(redemption.FieldRedeemedAt, v)
	return u
}

// UpdateRedeemedAt sets the "redeemed_at" field to the value that was provided on create.
func (u *RedemptionUpsert) UpdateRedeemedAt() *RedemptionUpsert {
	u.SetExcluded(redemption.FieldRedeemedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Redemption.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RedemptionUpsertOne) UpdateNewValues() *RedemptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Redemption.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RedemptionUpsertOne) Ignore() *RedemptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RedemptionUpsertOne) DoNothing() *RedemptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RedemptionCreate.OnConflict
// documentation for more info.
func (u *RedemptionUpsertOne) Update(set func(*RedemptionUpsert)) *RedemptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RedemptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRedeemedAt sets the "redeemed_at" field.
func (u *RedemptionUpsertOne) SetRedeemedAt(v time.Time) *RedemptionUpsertOne {
	return u.Update(func(s *RedemptionUpsert) {
		s.SetRedeemedAt(v)
	})
}

// UpdateRedeemedAt sets the "redeemed_at" field to the value that was provided on create.
func (u *RedemptionUpsertOne) UpdateRedeemedAt() *RedemptionUpsertOne {
	return u.Update(func(s *RedemptionUpsert) {
		s.UpdateRedeemedAt()
	})
}

// Exec executes the query.
func (u *RedemptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RedemptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RedemptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RedemptionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RedemptionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RedemptionCreateBulk is the builder for creating many Redemption entities in bulk.
type RedemptionCreateBulk struct {
	config
	builders []*RedemptionCreate
	conflict []sql.ConflictOption
}

// Save creates the Redemption entities in the database.
func (rcb *RedemptionCreateBulk) Save(ctx context.Context) ([]*Redemption, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Redemption, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RedemptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RedemptionCreateBulk) SaveX(ctx context.Context) []*Redemption {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RedemptionCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RedemptionCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Redemption.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RedemptionUpsert) {
//			SetRedeemedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *RedemptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *RedemptionUpsertBulk {
	rcb.conflict = opts
	return &RedemptionUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Redemption.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RedemptionCreateBulk) OnConflictColumns(columns ...string) *RedemptionUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RedemptionUpsertBulk{
		create: rcb,
	}
}

// RedemptionUpsertBulk is the builder for "upsert"-ing
// a bulk of Redemption nodes.
type RedemptionUpsertBulk struct {
	create *RedemptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Redemption.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RedemptionUpsertBulk) UpdateNewValues() *RedemptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Redemption.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RedemptionUpsertBulk) Ignore() *RedemptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RedemptionUpsertBulk) DoNothing() *RedemptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RedemptionCreateBulk.OnConflict
// documentation for more info.
func (u *RedemptionUpsertBulk) Update(set func(*RedemptionUpsert)) *RedemptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RedemptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRedeemedAt sets the "redeemed_at" field.
func (u *RedemptionUpsertBulk) SetRedeemedAt(v time.Time) *RedemptionUpsertBulk {
	return u.Update(func(s *RedemptionUpsert) {
		s.SetRedeemedAt(v)
	})
}

// UpdateRedeemedAt sets the "redeemed_at" field to the value that was provided on create.
func (u *RedemptionUpsertBulk) UpdateRedeemedAt() *RedemptionUpsertBulk {
	return u.Update(func(s *RedemptionUpsert) {
		s.UpdateRedeemedAt()
	})
}

// Exec executes the query.
func (u *RedemptionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RedemptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RedemptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RedemptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
