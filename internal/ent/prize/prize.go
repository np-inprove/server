// Code generated by ent, DO NOT EDIT.

package prize

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the prize type in the database.
	Label = "prize"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPointsRequired holds the string denoting the points_required field in the database.
	FieldPointsRequired = "points_required"
	// FieldDiscriminator holds the string denoting the discriminator field in the database.
	FieldDiscriminator = "discriminator"
	// EdgeInstitution holds the string denoting the institution edge name in mutations.
	EdgeInstitution = "institution"
	// EdgeRedemptionUsers holds the string denoting the redemption_users edge name in mutations.
	EdgeRedemptionUsers = "redemption_users"
	// EdgePrizeRedemptions holds the string denoting the prize_redemptions edge name in mutations.
	EdgePrizeRedemptions = "prize_redemptions"
	// Table holds the table name of the prize in the database.
	Table = "prizes"
	// InstitutionTable is the table that holds the institution relation/edge.
	InstitutionTable = "prizes"
	// InstitutionInverseTable is the table name for the Institution entity.
	// It exists in this package in order to avoid circular dependency with the "institution" package.
	InstitutionInverseTable = "institutions"
	// InstitutionColumn is the table column denoting the institution relation/edge.
	InstitutionColumn = "institution_prizes"
	// RedemptionUsersTable is the table that holds the redemption_users relation/edge. The primary key declared below.
	RedemptionUsersTable = "prize_redemptions"
	// RedemptionUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RedemptionUsersInverseTable = "users"
	// PrizeRedemptionsTable is the table that holds the prize_redemptions relation/edge.
	PrizeRedemptionsTable = "prize_redemptions"
	// PrizeRedemptionsInverseTable is the table name for the PrizeRedemptions entity.
	// It exists in this package in order to avoid circular dependency with the "prizeredemptions" package.
	PrizeRedemptionsInverseTable = "prize_redemptions"
	// PrizeRedemptionsColumn is the table column denoting the prize_redemptions relation/edge.
	PrizeRedemptionsColumn = "prize_id"
)

// Columns holds all SQL columns for prize fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldPointsRequired,
	FieldDiscriminator,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "prizes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"institution_prizes",
}

var (
	// RedemptionUsersPrimaryKey and RedemptionUsersColumn2 are the table columns denoting the
	// primary key for the redemption_users relation (M2M).
	RedemptionUsersPrimaryKey = []string{"prize_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PointsRequiredValidator is a validator for the "points_required" field. It is called by the builders before save.
	PointsRequiredValidator func(int) error
)

// Discriminator defines the type for the "discriminator" enum field.
type Discriminator string

// Discriminator values.
const (
	DiscriminatorVoucher   Discriminator = "voucher"
	DiscriminatorAccessory Discriminator = "accessory"
)

func (d Discriminator) String() string {
	return string(d)
}

// DiscriminatorValidator is a validator for the "discriminator" field enum values. It is called by the builders before save.
func DiscriminatorValidator(d Discriminator) error {
	switch d {
	case DiscriminatorVoucher, DiscriminatorAccessory:
		return nil
	default:
		return fmt.Errorf("prize: invalid enum value for discriminator field: %q", d)
	}
}

// OrderOption defines the ordering options for the Prize queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPointsRequired orders the results by the points_required field.
func ByPointsRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointsRequired, opts...).ToFunc()
}

// ByDiscriminator orders the results by the discriminator field.
func ByDiscriminator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscriminator, opts...).ToFunc()
}

// ByInstitutionField orders the results by institution field.
func ByInstitutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstitutionStep(), sql.OrderByField(field, opts...))
	}
}

// ByRedemptionUsersCount orders the results by redemption_users count.
func ByRedemptionUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRedemptionUsersStep(), opts...)
	}
}

// ByRedemptionUsers orders the results by redemption_users terms.
func ByRedemptionUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRedemptionUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPrizeRedemptionsCount orders the results by prize_redemptions count.
func ByPrizeRedemptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrizeRedemptionsStep(), opts...)
	}
}

// ByPrizeRedemptions orders the results by prize_redemptions terms.
func ByPrizeRedemptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrizeRedemptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newInstitutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstitutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InstitutionTable, InstitutionColumn),
	)
}
func newRedemptionUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RedemptionUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RedemptionUsersTable, RedemptionUsersPrimaryKey...),
	)
}
func newPrizeRedemptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrizeRedemptionsInverseTable, PrizeRedemptionsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, PrizeRedemptionsTable, PrizeRedemptionsColumn),
	)
}
