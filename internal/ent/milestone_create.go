// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/milestone"
	"github.com/np-inprove/server/internal/ent/studyplan"
)

// MilestoneCreate is the builder for creating a Milestone entity.
type MilestoneCreate struct {
	config
	mutation *MilestoneMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *MilestoneCreate) SetName(s string) *MilestoneCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetTargetCompletionTime sets the "target_completion_time" field.
func (mc *MilestoneCreate) SetTargetCompletionTime(t time.Time) *MilestoneCreate {
	mc.mutation.SetTargetCompletionTime(t)
	return mc
}

// SetStudyPlanID sets the "study_plan" edge to the StudyPlan entity by ID.
func (mc *MilestoneCreate) SetStudyPlanID(id int) *MilestoneCreate {
	mc.mutation.SetStudyPlanID(id)
	return mc
}

// SetStudyPlan sets the "study_plan" edge to the StudyPlan entity.
func (mc *MilestoneCreate) SetStudyPlan(s *StudyPlan) *MilestoneCreate {
	return mc.SetStudyPlanID(s.ID)
}

// Mutation returns the MilestoneMutation object of the builder.
func (mc *MilestoneCreate) Mutation() *MilestoneMutation {
	return mc.mutation
}

// Save creates the Milestone in the database.
func (mc *MilestoneCreate) Save(ctx context.Context) (*Milestone, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MilestoneCreate) SaveX(ctx context.Context) *Milestone {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MilestoneCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MilestoneCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MilestoneCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Milestone.name"`)}
	}
	if v, ok := mc.mutation.Name(); ok {
		if err := milestone.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Milestone.name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.TargetCompletionTime(); !ok {
		return &ValidationError{Name: "target_completion_time", err: errors.New(`ent: missing required field "Milestone.target_completion_time"`)}
	}
	if _, ok := mc.mutation.StudyPlanID(); !ok {
		return &ValidationError{Name: "study_plan", err: errors.New(`ent: missing required edge "Milestone.study_plan"`)}
	}
	return nil
}

func (mc *MilestoneCreate) sqlSave(ctx context.Context) (*Milestone, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MilestoneCreate) createSpec() (*Milestone, *sqlgraph.CreateSpec) {
	var (
		_node = &Milestone{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(milestone.Table, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(milestone.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.TargetCompletionTime(); ok {
		_spec.SetField(milestone.FieldTargetCompletionTime, field.TypeTime, value)
		_node.TargetCompletionTime = value
	}
	if nodes := mc.mutation.StudyPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.StudyPlanTable,
			Columns: []string{milestone.StudyPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studyplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.study_plan_milestones = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MilestoneCreateBulk is the builder for creating many Milestone entities in bulk.
type MilestoneCreateBulk struct {
	config
	builders []*MilestoneCreate
}

// Save creates the Milestone entities in the database.
func (mcb *MilestoneCreateBulk) Save(ctx context.Context) ([]*Milestone, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Milestone, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MilestoneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MilestoneCreateBulk) SaveX(ctx context.Context) []*Milestone {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MilestoneCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MilestoneCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
