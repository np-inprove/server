// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/event"
	"github.com/np-inprove/server/internal/ent/group"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ec *EventCreate) SetName(s string) *EventCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetStartTime sets the "start_time" field.
func (ec *EventCreate) SetStartTime(t time.Time) *EventCreate {
	ec.mutation.SetStartTime(t)
	return ec
}

// SetEndTime sets the "end_time" field.
func (ec *EventCreate) SetEndTime(t time.Time) *EventCreate {
	ec.mutation.SetEndTime(t)
	return ec
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableEndTime(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetEndTime(*t)
	}
	return ec
}

// SetLocation sets the "location" field.
func (ec *EventCreate) SetLocation(s string) *EventCreate {
	ec.mutation.SetLocation(s)
	return ec
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ec *EventCreate) SetNillableLocation(s *string) *EventCreate {
	if s != nil {
		ec.SetLocation(*s)
	}
	return ec
}

// SetRepeatPattern sets the "repeat_pattern" field.
func (ec *EventCreate) SetRepeatPattern(s string) *EventCreate {
	ec.mutation.SetRepeatPattern(s)
	return ec
}

// SetNillableRepeatPattern sets the "repeat_pattern" field if the given value is not nil.
func (ec *EventCreate) SetNillableRepeatPattern(s *string) *EventCreate {
	if s != nil {
		ec.SetRepeatPattern(*s)
	}
	return ec
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (ec *EventCreate) SetGroupID(id int) *EventCreate {
	ec.mutation.SetGroupID(id)
	return ec
}

// SetGroup sets the "group" edge to the Group entity.
func (ec *EventCreate) SetGroup(g *Group) *EventCreate {
	return ec.SetGroupID(g.ID)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Event.name"`)}
	}
	if v, ok := ec.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Event.name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Event.start_time"`)}
	}
	if _, ok := ec.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "Event.group"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.StartTime(); ok {
		_spec.SetField(event.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ec.mutation.EndTime(); ok {
		_spec.SetField(event.FieldEndTime, field.TypeTime, value)
		_node.EndTime = &value
	}
	if value, ok := ec.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ec.mutation.RepeatPattern(); ok {
		_spec.SetField(event.FieldRepeatPattern, field.TypeString, value)
		_node.RepeatPattern = value
	}
	if nodes := ec.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.GroupTable,
			Columns: []string{event.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ec *EventCreate) OnConflict(opts ...sql.ConflictOption) *EventUpsertOne {
	ec.conflict = opts
	return &EventUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EventCreate) OnConflictColumns(columns ...string) *EventUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertOne{
		create: ec,
	}
}

type (
	// EventUpsertOne is the builder for "upsert"-ing
	//  one Event node.
	EventUpsertOne struct {
		create *EventCreate
	}

	// EventUpsert is the "OnConflict" setter.
	EventUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *EventUpsert) SetName(v string) *EventUpsert {
	u.Set(event.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsert) UpdateName() *EventUpsert {
	u.SetExcluded(event.FieldName)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *EventUpsert) SetStartTime(v time.Time) *EventUpsert {
	u.Set(event.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *EventUpsert) UpdateStartTime() *EventUpsert {
	u.SetExcluded(event.FieldStartTime)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *EventUpsert) SetEndTime(v time.Time) *EventUpsert {
	u.Set(event.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *EventUpsert) UpdateEndTime() *EventUpsert {
	u.SetExcluded(event.FieldEndTime)
	return u
}

// ClearEndTime clears the value of the "end_time" field.
func (u *EventUpsert) ClearEndTime() *EventUpsert {
	u.SetNull(event.FieldEndTime)
	return u
}

// SetLocation sets the "location" field.
func (u *EventUpsert) SetLocation(v string) *EventUpsert {
	u.Set(event.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *EventUpsert) UpdateLocation() *EventUpsert {
	u.SetExcluded(event.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *EventUpsert) ClearLocation() *EventUpsert {
	u.SetNull(event.FieldLocation)
	return u
}

// SetRepeatPattern sets the "repeat_pattern" field.
func (u *EventUpsert) SetRepeatPattern(v string) *EventUpsert {
	u.Set(event.FieldRepeatPattern, v)
	return u
}

// UpdateRepeatPattern sets the "repeat_pattern" field to the value that was provided on create.
func (u *EventUpsert) UpdateRepeatPattern() *EventUpsert {
	u.SetExcluded(event.FieldRepeatPattern)
	return u
}

// ClearRepeatPattern clears the value of the "repeat_pattern" field.
func (u *EventUpsert) ClearRepeatPattern() *EventUpsert {
	u.SetNull(event.FieldRepeatPattern)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertOne) UpdateNewValues() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventUpsertOne) Ignore() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertOne) DoNothing() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreate.OnConflict
// documentation for more info.
func (u *EventUpsertOne) Update(set func(*EventUpsert)) *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EventUpsertOne) SetName(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateName() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateName()
	})
}

// SetStartTime sets the "start_time" field.
func (u *EventUpsertOne) SetStartTime(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateStartTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *EventUpsertOne) SetEndTime(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEndTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *EventUpsertOne) ClearEndTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearEndTime()
	})
}

// SetLocation sets the "location" field.
func (u *EventUpsertOne) SetLocation(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLocation() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *EventUpsertOne) ClearLocation() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocation()
	})
}

// SetRepeatPattern sets the "repeat_pattern" field.
func (u *EventUpsertOne) SetRepeatPattern(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetRepeatPattern(v)
	})
}

// UpdateRepeatPattern sets the "repeat_pattern" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateRepeatPattern() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRepeatPattern()
	})
}

// ClearRepeatPattern clears the value of the "repeat_pattern" field.
func (u *EventUpsertOne) ClearRepeatPattern() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearRepeatPattern()
	})
}

// Exec executes the query.
func (u *EventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	builders []*EventCreate
	conflict []sql.ConflictOption
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUpsertBulk {
	ecb.conflict = opts
	return &EventUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflictColumns(columns ...string) *EventUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertBulk{
		create: ecb,
	}
}

// EventUpsertBulk is the builder for "upsert"-ing
// a bulk of Event nodes.
type EventUpsertBulk struct {
	create *EventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertBulk) UpdateNewValues() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventUpsertBulk) Ignore() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertBulk) DoNothing() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreateBulk.OnConflict
// documentation for more info.
func (u *EventUpsertBulk) Update(set func(*EventUpsert)) *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EventUpsertBulk) SetName(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateName() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateName()
	})
}

// SetStartTime sets the "start_time" field.
func (u *EventUpsertBulk) SetStartTime(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateStartTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *EventUpsertBulk) SetEndTime(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEndTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *EventUpsertBulk) ClearEndTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearEndTime()
	})
}

// SetLocation sets the "location" field.
func (u *EventUpsertBulk) SetLocation(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLocation() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *EventUpsertBulk) ClearLocation() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocation()
	})
}

// SetRepeatPattern sets the "repeat_pattern" field.
func (u *EventUpsertBulk) SetRepeatPattern(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetRepeatPattern(v)
	})
}

// UpdateRepeatPattern sets the "repeat_pattern" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateRepeatPattern() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRepeatPattern()
	})
}

// ClearRepeatPattern clears the value of the "repeat_pattern" field.
func (u *EventUpsertBulk) ClearRepeatPattern() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearRepeatPattern()
	})
}

// Exec executes the query.
func (u *EventUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
