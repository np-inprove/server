// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	entinstitution "github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/institutioninvitelink"
	"github.com/np-inprove/server/internal/entity/institution"
)

// InstitutionInviteLinkCreate is the builder for creating a InstitutionInviteLink entity.
type InstitutionInviteLinkCreate struct {
	config
	mutation *InstitutionInviteLinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (iilc *InstitutionInviteLinkCreate) SetCode(s string) *InstitutionInviteLinkCreate {
	iilc.mutation.SetCode(s)
	return iilc
}

// SetRole sets the "role" field.
func (iilc *InstitutionInviteLinkCreate) SetRole(i institution.Role) *InstitutionInviteLinkCreate {
	iilc.mutation.SetRole(i)
	return iilc
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (iilc *InstitutionInviteLinkCreate) SetInstitutionID(id int) *InstitutionInviteLinkCreate {
	iilc.mutation.SetInstitutionID(id)
	return iilc
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (iilc *InstitutionInviteLinkCreate) SetInstitution(i *Institution) *InstitutionInviteLinkCreate {
	return iilc.SetInstitutionID(i.ID)
}

// Mutation returns the InstitutionInviteLinkMutation object of the builder.
func (iilc *InstitutionInviteLinkCreate) Mutation() *InstitutionInviteLinkMutation {
	return iilc.mutation
}

// Save creates the InstitutionInviteLink in the database.
func (iilc *InstitutionInviteLinkCreate) Save(ctx context.Context) (*InstitutionInviteLink, error) {
	return withHooks(ctx, iilc.sqlSave, iilc.mutation, iilc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iilc *InstitutionInviteLinkCreate) SaveX(ctx context.Context) *InstitutionInviteLink {
	v, err := iilc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iilc *InstitutionInviteLinkCreate) Exec(ctx context.Context) error {
	_, err := iilc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iilc *InstitutionInviteLinkCreate) ExecX(ctx context.Context) {
	if err := iilc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iilc *InstitutionInviteLinkCreate) check() error {
	if _, ok := iilc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "InstitutionInviteLink.code"`)}
	}
	if v, ok := iilc.mutation.Code(); ok {
		if err := institutioninvitelink.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "InstitutionInviteLink.code": %w`, err)}
		}
	}
	if _, ok := iilc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "InstitutionInviteLink.role"`)}
	}
	if v, ok := iilc.mutation.Role(); ok {
		if err := institutioninvitelink.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "InstitutionInviteLink.role": %w`, err)}
		}
	}
	if _, ok := iilc.mutation.InstitutionID(); !ok {
		return &ValidationError{Name: "institution", err: errors.New(`ent: missing required edge "InstitutionInviteLink.institution"`)}
	}
	return nil
}

func (iilc *InstitutionInviteLinkCreate) sqlSave(ctx context.Context) (*InstitutionInviteLink, error) {
	if err := iilc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iilc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iilc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	iilc.mutation.id = &_node.ID
	iilc.mutation.done = true
	return _node, nil
}

func (iilc *InstitutionInviteLinkCreate) createSpec() (*InstitutionInviteLink, *sqlgraph.CreateSpec) {
	var (
		_node = &InstitutionInviteLink{config: iilc.config}
		_spec = sqlgraph.NewCreateSpec(institutioninvitelink.Table, sqlgraph.NewFieldSpec(institutioninvitelink.FieldID, field.TypeInt))
	)
	_spec.OnConflict = iilc.conflict
	if value, ok := iilc.mutation.Code(); ok {
		_spec.SetField(institutioninvitelink.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := iilc.mutation.Role(); ok {
		_spec.SetField(institutioninvitelink.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if nodes := iilc.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   institutioninvitelink.InstitutionTable,
			Columns: []string{institutioninvitelink.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entinstitution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.institution_invites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InstitutionInviteLink.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstitutionInviteLinkUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (iilc *InstitutionInviteLinkCreate) OnConflict(opts ...sql.ConflictOption) *InstitutionInviteLinkUpsertOne {
	iilc.conflict = opts
	return &InstitutionInviteLinkUpsertOne{
		create: iilc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InstitutionInviteLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iilc *InstitutionInviteLinkCreate) OnConflictColumns(columns ...string) *InstitutionInviteLinkUpsertOne {
	iilc.conflict = append(iilc.conflict, sql.ConflictColumns(columns...))
	return &InstitutionInviteLinkUpsertOne{
		create: iilc,
	}
}

type (
	// InstitutionInviteLinkUpsertOne is the builder for "upsert"-ing
	//  one InstitutionInviteLink node.
	InstitutionInviteLinkUpsertOne struct {
		create *InstitutionInviteLinkCreate
	}

	// InstitutionInviteLinkUpsert is the "OnConflict" setter.
	InstitutionInviteLinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *InstitutionInviteLinkUpsert) SetCode(v string) *InstitutionInviteLinkUpsert {
	u.Set(institutioninvitelink.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *InstitutionInviteLinkUpsert) UpdateCode() *InstitutionInviteLinkUpsert {
	u.SetExcluded(institutioninvitelink.FieldCode)
	return u
}

// SetRole sets the "role" field.
func (u *InstitutionInviteLinkUpsert) SetRole(v institution.Role) *InstitutionInviteLinkUpsert {
	u.Set(institutioninvitelink.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *InstitutionInviteLinkUpsert) UpdateRole() *InstitutionInviteLinkUpsert {
	u.SetExcluded(institutioninvitelink.FieldRole)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.InstitutionInviteLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InstitutionInviteLinkUpsertOne) UpdateNewValues() *InstitutionInviteLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InstitutionInviteLink.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InstitutionInviteLinkUpsertOne) Ignore() *InstitutionInviteLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstitutionInviteLinkUpsertOne) DoNothing() *InstitutionInviteLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstitutionInviteLinkCreate.OnConflict
// documentation for more info.
func (u *InstitutionInviteLinkUpsertOne) Update(set func(*InstitutionInviteLinkUpsert)) *InstitutionInviteLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstitutionInviteLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *InstitutionInviteLinkUpsertOne) SetCode(v string) *InstitutionInviteLinkUpsertOne {
	return u.Update(func(s *InstitutionInviteLinkUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *InstitutionInviteLinkUpsertOne) UpdateCode() *InstitutionInviteLinkUpsertOne {
	return u.Update(func(s *InstitutionInviteLinkUpsert) {
		s.UpdateCode()
	})
}

// SetRole sets the "role" field.
func (u *InstitutionInviteLinkUpsertOne) SetRole(v institution.Role) *InstitutionInviteLinkUpsertOne {
	return u.Update(func(s *InstitutionInviteLinkUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *InstitutionInviteLinkUpsertOne) UpdateRole() *InstitutionInviteLinkUpsertOne {
	return u.Update(func(s *InstitutionInviteLinkUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *InstitutionInviteLinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstitutionInviteLinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstitutionInviteLinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InstitutionInviteLinkUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InstitutionInviteLinkUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InstitutionInviteLinkCreateBulk is the builder for creating many InstitutionInviteLink entities in bulk.
type InstitutionInviteLinkCreateBulk struct {
	config
	builders []*InstitutionInviteLinkCreate
	conflict []sql.ConflictOption
}

// Save creates the InstitutionInviteLink entities in the database.
func (iilcb *InstitutionInviteLinkCreateBulk) Save(ctx context.Context) ([]*InstitutionInviteLink, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iilcb.builders))
	nodes := make([]*InstitutionInviteLink, len(iilcb.builders))
	mutators := make([]Mutator, len(iilcb.builders))
	for i := range iilcb.builders {
		func(i int, root context.Context) {
			builder := iilcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstitutionInviteLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iilcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iilcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iilcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iilcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iilcb *InstitutionInviteLinkCreateBulk) SaveX(ctx context.Context) []*InstitutionInviteLink {
	v, err := iilcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iilcb *InstitutionInviteLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := iilcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iilcb *InstitutionInviteLinkCreateBulk) ExecX(ctx context.Context) {
	if err := iilcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InstitutionInviteLink.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InstitutionInviteLinkUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (iilcb *InstitutionInviteLinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *InstitutionInviteLinkUpsertBulk {
	iilcb.conflict = opts
	return &InstitutionInviteLinkUpsertBulk{
		create: iilcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InstitutionInviteLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iilcb *InstitutionInviteLinkCreateBulk) OnConflictColumns(columns ...string) *InstitutionInviteLinkUpsertBulk {
	iilcb.conflict = append(iilcb.conflict, sql.ConflictColumns(columns...))
	return &InstitutionInviteLinkUpsertBulk{
		create: iilcb,
	}
}

// InstitutionInviteLinkUpsertBulk is the builder for "upsert"-ing
// a bulk of InstitutionInviteLink nodes.
type InstitutionInviteLinkUpsertBulk struct {
	create *InstitutionInviteLinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InstitutionInviteLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InstitutionInviteLinkUpsertBulk) UpdateNewValues() *InstitutionInviteLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InstitutionInviteLink.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InstitutionInviteLinkUpsertBulk) Ignore() *InstitutionInviteLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InstitutionInviteLinkUpsertBulk) DoNothing() *InstitutionInviteLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InstitutionInviteLinkCreateBulk.OnConflict
// documentation for more info.
func (u *InstitutionInviteLinkUpsertBulk) Update(set func(*InstitutionInviteLinkUpsert)) *InstitutionInviteLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InstitutionInviteLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *InstitutionInviteLinkUpsertBulk) SetCode(v string) *InstitutionInviteLinkUpsertBulk {
	return u.Update(func(s *InstitutionInviteLinkUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *InstitutionInviteLinkUpsertBulk) UpdateCode() *InstitutionInviteLinkUpsertBulk {
	return u.Update(func(s *InstitutionInviteLinkUpsert) {
		s.UpdateCode()
	})
}

// SetRole sets the "role" field.
func (u *InstitutionInviteLinkUpsertBulk) SetRole(v institution.Role) *InstitutionInviteLinkUpsertBulk {
	return u.Update(func(s *InstitutionInviteLinkUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *InstitutionInviteLinkUpsertBulk) UpdateRole() *InstitutionInviteLinkUpsertBulk {
	return u.Update(func(s *InstitutionInviteLinkUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *InstitutionInviteLinkUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InstitutionInviteLinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InstitutionInviteLinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InstitutionInviteLinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
