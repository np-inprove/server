// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/studyplan"
	"github.com/np-inprove/server/internal/ent/user"
)

// StudyPlan is the model entity for the StudyPlan schema.
type StudyPlan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the study plan
	Name string `json:"name,omitempty"`
	// Short share code for the study plan
	ShareCode string `json:"share_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudyPlanQuery when eager-loading is set.
	Edges             StudyPlanEdges `json:"edges"`
	study_plan_author *int
	selectValues      sql.SelectValues
}

// StudyPlanEdges holds the relations/edges for other nodes in the graph.
type StudyPlanEdges struct {
	// Author of the study plan
	Author *User `json:"author,omitempty"`
	// Milestones of the study plan
	Milestones []*Milestone `json:"milestones,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudyPlanEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// MilestonesOrErr returns the Milestones value or an error if the edge
// was not loaded in eager-loading.
func (e StudyPlanEdges) MilestonesOrErr() ([]*Milestone, error) {
	if e.loadedTypes[1] {
		return e.Milestones, nil
	}
	return nil, &NotLoadedError{edge: "milestones"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StudyPlan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case studyplan.FieldID:
			values[i] = new(sql.NullInt64)
		case studyplan.FieldName, studyplan.FieldShareCode:
			values[i] = new(sql.NullString)
		case studyplan.ForeignKeys[0]: // study_plan_author
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StudyPlan fields.
func (sp *StudyPlan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case studyplan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = int(value.Int64)
		case studyplan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sp.Name = value.String
			}
		case studyplan.FieldShareCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field share_code", values[i])
			} else if value.Valid {
				sp.ShareCode = value.String
			}
		case studyplan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field study_plan_author", value)
			} else if value.Valid {
				sp.study_plan_author = new(int)
				*sp.study_plan_author = int(value.Int64)
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StudyPlan.
// This includes values selected through modifiers, order, etc.
func (sp *StudyPlan) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the StudyPlan entity.
func (sp *StudyPlan) QueryAuthor() *UserQuery {
	return NewStudyPlanClient(sp.config).QueryAuthor(sp)
}

// QueryMilestones queries the "milestones" edge of the StudyPlan entity.
func (sp *StudyPlan) QueryMilestones() *MilestoneQuery {
	return NewStudyPlanClient(sp.config).QueryMilestones(sp)
}

// Update returns a builder for updating this StudyPlan.
// Note that you need to call StudyPlan.Unwrap() before calling this method if this StudyPlan
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *StudyPlan) Update() *StudyPlanUpdateOne {
	return NewStudyPlanClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the StudyPlan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *StudyPlan) Unwrap() *StudyPlan {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: StudyPlan is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *StudyPlan) String() string {
	var builder strings.Builder
	builder.WriteString("StudyPlan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("name=")
	builder.WriteString(sp.Name)
	builder.WriteString(", ")
	builder.WriteString("share_code=")
	builder.WriteString(sp.ShareCode)
	builder.WriteByte(')')
	return builder.String()
}

// StudyPlans is a parsable slice of StudyPlan.
type StudyPlans []*StudyPlan
