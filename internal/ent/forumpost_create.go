// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/forumpost"
	entgroup "github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/user"
)

// ForumPostCreate is the builder for creating a ForumPost entity.
type ForumPostCreate struct {
	config
	mutation *ForumPostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (fpc *ForumPostCreate) SetTitle(s string) *ForumPostCreate {
	fpc.mutation.SetTitle(s)
	return fpc
}

// SetContent sets the "content" field.
func (fpc *ForumPostCreate) SetContent(s string) *ForumPostCreate {
	fpc.mutation.SetContent(s)
	return fpc
}

// SetMentionedUsersJSON sets the "mentioned_users_json" field.
func (fpc *ForumPostCreate) SetMentionedUsersJSON(i []int) *ForumPostCreate {
	fpc.mutation.SetMentionedUsersJSON(i)
	return fpc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (fpc *ForumPostCreate) SetAuthorID(id int) *ForumPostCreate {
	fpc.mutation.SetAuthorID(id)
	return fpc
}

// SetAuthor sets the "author" edge to the User entity.
func (fpc *ForumPostCreate) SetAuthor(u *User) *ForumPostCreate {
	return fpc.SetAuthorID(u.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (fpc *ForumPostCreate) SetGroupID(id int) *ForumPostCreate {
	fpc.mutation.SetGroupID(id)
	return fpc
}

// SetGroup sets the "group" edge to the Group entity.
func (fpc *ForumPostCreate) SetGroup(g *Group) *ForumPostCreate {
	return fpc.SetGroupID(g.ID)
}

// SetParentID sets the "parent" edge to the ForumPost entity by ID.
func (fpc *ForumPostCreate) SetParentID(id int) *ForumPostCreate {
	fpc.mutation.SetParentID(id)
	return fpc
}

// SetNillableParentID sets the "parent" edge to the ForumPost entity by ID if the given value is not nil.
func (fpc *ForumPostCreate) SetNillableParentID(id *int) *ForumPostCreate {
	if id != nil {
		fpc = fpc.SetParentID(*id)
	}
	return fpc
}

// SetParent sets the "parent" edge to the ForumPost entity.
func (fpc *ForumPostCreate) SetParent(f *ForumPost) *ForumPostCreate {
	return fpc.SetParentID(f.ID)
}

// AddChildIDs adds the "children" edge to the ForumPost entity by IDs.
func (fpc *ForumPostCreate) AddChildIDs(ids ...int) *ForumPostCreate {
	fpc.mutation.AddChildIDs(ids...)
	return fpc
}

// AddChildren adds the "children" edges to the ForumPost entity.
func (fpc *ForumPostCreate) AddChildren(f ...*ForumPost) *ForumPostCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fpc.AddChildIDs(ids...)
}

// AddReactedUserIDs adds the "reacted_users" edge to the User entity by IDs.
func (fpc *ForumPostCreate) AddReactedUserIDs(ids ...int) *ForumPostCreate {
	fpc.mutation.AddReactedUserIDs(ids...)
	return fpc
}

// AddReactedUsers adds the "reacted_users" edges to the User entity.
func (fpc *ForumPostCreate) AddReactedUsers(u ...*User) *ForumPostCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fpc.AddReactedUserIDs(ids...)
}

// Mutation returns the ForumPostMutation object of the builder.
func (fpc *ForumPostCreate) Mutation() *ForumPostMutation {
	return fpc.mutation
}

// Save creates the ForumPost in the database.
func (fpc *ForumPostCreate) Save(ctx context.Context) (*ForumPost, error) {
	return withHooks(ctx, fpc.sqlSave, fpc.mutation, fpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fpc *ForumPostCreate) SaveX(ctx context.Context) *ForumPost {
	v, err := fpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fpc *ForumPostCreate) Exec(ctx context.Context) error {
	_, err := fpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpc *ForumPostCreate) ExecX(ctx context.Context) {
	if err := fpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fpc *ForumPostCreate) check() error {
	if _, ok := fpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ForumPost.title"`)}
	}
	if v, ok := fpc.mutation.Title(); ok {
		if err := forumpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ForumPost.title": %w`, err)}
		}
	}
	if _, ok := fpc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "ForumPost.content"`)}
	}
	if v, ok := fpc.mutation.Content(); ok {
		if err := forumpost.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "ForumPost.content": %w`, err)}
		}
	}
	if _, ok := fpc.mutation.MentionedUsersJSON(); !ok {
		return &ValidationError{Name: "mentioned_users_json", err: errors.New(`ent: missing required field "ForumPost.mentioned_users_json"`)}
	}
	if _, ok := fpc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "ForumPost.author"`)}
	}
	if _, ok := fpc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "ForumPost.group"`)}
	}
	return nil
}

func (fpc *ForumPostCreate) sqlSave(ctx context.Context) (*ForumPost, error) {
	if err := fpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fpc.mutation.id = &_node.ID
	fpc.mutation.done = true
	return _node, nil
}

func (fpc *ForumPostCreate) createSpec() (*ForumPost, *sqlgraph.CreateSpec) {
	var (
		_node = &ForumPost{config: fpc.config}
		_spec = sqlgraph.NewCreateSpec(forumpost.Table, sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fpc.conflict
	if value, ok := fpc.mutation.Title(); ok {
		_spec.SetField(forumpost.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := fpc.mutation.Content(); ok {
		_spec.SetField(forumpost.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := fpc.mutation.MentionedUsersJSON(); ok {
		_spec.SetField(forumpost.FieldMentionedUsersJSON, field.TypeJSON, value)
		_node.MentionedUsersJSON = value
	}
	if nodes := fpc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   forumpost.AuthorTable,
			Columns: []string{forumpost.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.forum_post_author = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fpc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumpost.GroupTable,
			Columns: []string{forumpost.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_forum_posts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fpc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forumpost.ParentTable,
			Columns: []string{forumpost.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.forum_post_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fpc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forumpost.ChildrenTable,
			Columns: []string{forumpost.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fpc.mutation.ReactedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   forumpost.ReactedUsersTable,
			Columns: forumpost.ReactedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ForumPost.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ForumPostUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (fpc *ForumPostCreate) OnConflict(opts ...sql.ConflictOption) *ForumPostUpsertOne {
	fpc.conflict = opts
	return &ForumPostUpsertOne{
		create: fpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ForumPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fpc *ForumPostCreate) OnConflictColumns(columns ...string) *ForumPostUpsertOne {
	fpc.conflict = append(fpc.conflict, sql.ConflictColumns(columns...))
	return &ForumPostUpsertOne{
		create: fpc,
	}
}

type (
	// ForumPostUpsertOne is the builder for "upsert"-ing
	//  one ForumPost node.
	ForumPostUpsertOne struct {
		create *ForumPostCreate
	}

	// ForumPostUpsert is the "OnConflict" setter.
	ForumPostUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *ForumPostUpsert) SetTitle(v string) *ForumPostUpsert {
	u.Set(forumpost.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ForumPostUpsert) UpdateTitle() *ForumPostUpsert {
	u.SetExcluded(forumpost.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *ForumPostUpsert) SetContent(v string) *ForumPostUpsert {
	u.Set(forumpost.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ForumPostUpsert) UpdateContent() *ForumPostUpsert {
	u.SetExcluded(forumpost.FieldContent)
	return u
}

// SetMentionedUsersJSON sets the "mentioned_users_json" field.
func (u *ForumPostUpsert) SetMentionedUsersJSON(v []int) *ForumPostUpsert {
	u.Set(forumpost.FieldMentionedUsersJSON, v)
	return u
}

// UpdateMentionedUsersJSON sets the "mentioned_users_json" field to the value that was provided on create.
func (u *ForumPostUpsert) UpdateMentionedUsersJSON() *ForumPostUpsert {
	u.SetExcluded(forumpost.FieldMentionedUsersJSON)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ForumPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ForumPostUpsertOne) UpdateNewValues() *ForumPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ForumPost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ForumPostUpsertOne) Ignore() *ForumPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ForumPostUpsertOne) DoNothing() *ForumPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ForumPostCreate.OnConflict
// documentation for more info.
func (u *ForumPostUpsertOne) Update(set func(*ForumPostUpsert)) *ForumPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ForumPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *ForumPostUpsertOne) SetTitle(v string) *ForumPostUpsertOne {
	return u.Update(func(s *ForumPostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ForumPostUpsertOne) UpdateTitle() *ForumPostUpsertOne {
	return u.Update(func(s *ForumPostUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *ForumPostUpsertOne) SetContent(v string) *ForumPostUpsertOne {
	return u.Update(func(s *ForumPostUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ForumPostUpsertOne) UpdateContent() *ForumPostUpsertOne {
	return u.Update(func(s *ForumPostUpsert) {
		s.UpdateContent()
	})
}

// SetMentionedUsersJSON sets the "mentioned_users_json" field.
func (u *ForumPostUpsertOne) SetMentionedUsersJSON(v []int) *ForumPostUpsertOne {
	return u.Update(func(s *ForumPostUpsert) {
		s.SetMentionedUsersJSON(v)
	})
}

// UpdateMentionedUsersJSON sets the "mentioned_users_json" field to the value that was provided on create.
func (u *ForumPostUpsertOne) UpdateMentionedUsersJSON() *ForumPostUpsertOne {
	return u.Update(func(s *ForumPostUpsert) {
		s.UpdateMentionedUsersJSON()
	})
}

// Exec executes the query.
func (u *ForumPostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ForumPostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ForumPostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ForumPostUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ForumPostUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ForumPostCreateBulk is the builder for creating many ForumPost entities in bulk.
type ForumPostCreateBulk struct {
	config
	builders []*ForumPostCreate
	conflict []sql.ConflictOption
}

// Save creates the ForumPost entities in the database.
func (fpcb *ForumPostCreateBulk) Save(ctx context.Context) ([]*ForumPost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fpcb.builders))
	nodes := make([]*ForumPost, len(fpcb.builders))
	mutators := make([]Mutator, len(fpcb.builders))
	for i := range fpcb.builders {
		func(i int, root context.Context) {
			builder := fpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ForumPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fpcb *ForumPostCreateBulk) SaveX(ctx context.Context) []*ForumPost {
	v, err := fpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fpcb *ForumPostCreateBulk) Exec(ctx context.Context) error {
	_, err := fpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpcb *ForumPostCreateBulk) ExecX(ctx context.Context) {
	if err := fpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ForumPost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ForumPostUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (fpcb *ForumPostCreateBulk) OnConflict(opts ...sql.ConflictOption) *ForumPostUpsertBulk {
	fpcb.conflict = opts
	return &ForumPostUpsertBulk{
		create: fpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ForumPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fpcb *ForumPostCreateBulk) OnConflictColumns(columns ...string) *ForumPostUpsertBulk {
	fpcb.conflict = append(fpcb.conflict, sql.ConflictColumns(columns...))
	return &ForumPostUpsertBulk{
		create: fpcb,
	}
}

// ForumPostUpsertBulk is the builder for "upsert"-ing
// a bulk of ForumPost nodes.
type ForumPostUpsertBulk struct {
	create *ForumPostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ForumPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ForumPostUpsertBulk) UpdateNewValues() *ForumPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ForumPost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ForumPostUpsertBulk) Ignore() *ForumPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ForumPostUpsertBulk) DoNothing() *ForumPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ForumPostCreateBulk.OnConflict
// documentation for more info.
func (u *ForumPostUpsertBulk) Update(set func(*ForumPostUpsert)) *ForumPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ForumPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *ForumPostUpsertBulk) SetTitle(v string) *ForumPostUpsertBulk {
	return u.Update(func(s *ForumPostUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ForumPostUpsertBulk) UpdateTitle() *ForumPostUpsertBulk {
	return u.Update(func(s *ForumPostUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *ForumPostUpsertBulk) SetContent(v string) *ForumPostUpsertBulk {
	return u.Update(func(s *ForumPostUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *ForumPostUpsertBulk) UpdateContent() *ForumPostUpsertBulk {
	return u.Update(func(s *ForumPostUpsert) {
		s.UpdateContent()
	})
}

// SetMentionedUsersJSON sets the "mentioned_users_json" field.
func (u *ForumPostUpsertBulk) SetMentionedUsersJSON(v []int) *ForumPostUpsertBulk {
	return u.Update(func(s *ForumPostUpsert) {
		s.SetMentionedUsersJSON(v)
	})
}

// UpdateMentionedUsersJSON sets the "mentioned_users_json" field to the value that was provided on create.
func (u *ForumPostUpsertBulk) UpdateMentionedUsersJSON() *ForumPostUpsertBulk {
	return u.Update(func(s *ForumPostUpsert) {
		s.UpdateMentionedUsersJSON()
	})
}

// Exec executes the query.
func (u *ForumPostUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ForumPostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ForumPostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ForumPostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
