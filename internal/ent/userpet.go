// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/pet"
	"github.com/np-inprove/server/internal/ent/user"
	"github.com/np-inprove/server/internal/ent/userpet"
)

// UserPet is the model entity for the UserPet schema.
type UserPet struct {
	config `json:"-"`
	// Hunger percentage of the pet (0-1)
	HungerPercentage float64 `json:"hunger_percentage,omitempty"`
	// Map of enabled SVG group element IDs
	EnabledSvgGroupElementIds map[string]bool `json:"enabled_svg_group_element_ids,omitempty"`
	// ID of the pet
	PetID int `json:"pet_id,omitempty"`
	// ID of the user
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPetQuery when eager-loading is set.
	Edges        UserPetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserPetEdges holds the relations/edges for other nodes in the graph.
type UserPetEdges struct {
	// Pet holds the value of the pet edge.
	Pet *Pet `json:"pet,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PetOrErr returns the Pet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPetEdges) PetOrErr() (*Pet, error) {
	if e.loadedTypes[0] {
		if e.Pet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: pet.Label}
		}
		return e.Pet, nil
	}
	return nil, &NotLoadedError{edge: "pet"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPetEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpet.FieldEnabledSvgGroupElementIds:
			values[i] = new([]byte)
		case userpet.FieldHungerPercentage:
			values[i] = new(sql.NullFloat64)
		case userpet.FieldPetID, userpet.FieldUserID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPet fields.
func (up *UserPet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpet.FieldHungerPercentage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field hunger_percentage", values[i])
			} else if value.Valid {
				up.HungerPercentage = value.Float64
			}
		case userpet.FieldEnabledSvgGroupElementIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field enabled_svg_group_element_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.EnabledSvgGroupElementIds); err != nil {
					return fmt.Errorf("unmarshal field enabled_svg_group_element_ids: %w", err)
				}
			}
		case userpet.FieldPetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pet_id", values[i])
			} else if value.Valid {
				up.PetID = int(value.Int64)
			}
		case userpet.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				up.UserID = int(value.Int64)
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPet.
// This includes values selected through modifiers, order, etc.
func (up *UserPet) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// QueryPet queries the "pet" edge of the UserPet entity.
func (up *UserPet) QueryPet() *PetQuery {
	return NewUserPetClient(up.config).QueryPet(up)
}

// QueryUser queries the "user" edge of the UserPet entity.
func (up *UserPet) QueryUser() *UserQuery {
	return NewUserPetClient(up.config).QueryUser(up)
}

// Update returns a builder for updating this UserPet.
// Note that you need to call UserPet.Unwrap() before calling this method if this UserPet
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPet) Update() *UserPetUpdateOne {
	return NewUserPetClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserPet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPet) Unwrap() *UserPet {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPet is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPet) String() string {
	var builder strings.Builder
	builder.WriteString("UserPet(")
	builder.WriteString("hunger_percentage=")
	builder.WriteString(fmt.Sprintf("%v", up.HungerPercentage))
	builder.WriteString(", ")
	builder.WriteString("enabled_svg_group_element_ids=")
	builder.WriteString(fmt.Sprintf("%v", up.EnabledSvgGroupElementIds))
	builder.WriteString(", ")
	builder.WriteString("pet_id=")
	builder.WriteString(fmt.Sprintf("%v", up.PetID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", up.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// UserPets is a parsable slice of UserPet.
type UserPets []*UserPet
