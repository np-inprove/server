// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	entinstitution "github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/institutioninvitelink"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// InstitutionInviteLinkQuery is the builder for querying InstitutionInviteLink entities.
type InstitutionInviteLinkQuery struct {
	config
	ctx             *QueryContext
	order           []institutioninvitelink.OrderOption
	inters          []Interceptor
	predicates      []predicate.InstitutionInviteLink
	withInstitution *InstitutionQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InstitutionInviteLinkQuery builder.
func (iilq *InstitutionInviteLinkQuery) Where(ps ...predicate.InstitutionInviteLink) *InstitutionInviteLinkQuery {
	iilq.predicates = append(iilq.predicates, ps...)
	return iilq
}

// Limit the number of records to be returned by this query.
func (iilq *InstitutionInviteLinkQuery) Limit(limit int) *InstitutionInviteLinkQuery {
	iilq.ctx.Limit = &limit
	return iilq
}

// Offset to start from.
func (iilq *InstitutionInviteLinkQuery) Offset(offset int) *InstitutionInviteLinkQuery {
	iilq.ctx.Offset = &offset
	return iilq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iilq *InstitutionInviteLinkQuery) Unique(unique bool) *InstitutionInviteLinkQuery {
	iilq.ctx.Unique = &unique
	return iilq
}

// Order specifies how the records should be ordered.
func (iilq *InstitutionInviteLinkQuery) Order(o ...institutioninvitelink.OrderOption) *InstitutionInviteLinkQuery {
	iilq.order = append(iilq.order, o...)
	return iilq
}

// QueryInstitution chains the current query on the "institution" edge.
func (iilq *InstitutionInviteLinkQuery) QueryInstitution() *InstitutionQuery {
	query := (&InstitutionClient{config: iilq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iilq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iilq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(institutioninvitelink.Table, institutioninvitelink.FieldID, selector),
			sqlgraph.To(entinstitution.Table, entinstitution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, institutioninvitelink.InstitutionTable, institutioninvitelink.InstitutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(iilq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InstitutionInviteLink entity from the query.
// Returns a *NotFoundError when no InstitutionInviteLink was found.
func (iilq *InstitutionInviteLinkQuery) First(ctx context.Context) (*InstitutionInviteLink, error) {
	nodes, err := iilq.Limit(1).All(setContextOp(ctx, iilq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{institutioninvitelink.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iilq *InstitutionInviteLinkQuery) FirstX(ctx context.Context) *InstitutionInviteLink {
	node, err := iilq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InstitutionInviteLink ID from the query.
// Returns a *NotFoundError when no InstitutionInviteLink ID was found.
func (iilq *InstitutionInviteLinkQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = iilq.Limit(1).IDs(setContextOp(ctx, iilq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{institutioninvitelink.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iilq *InstitutionInviteLinkQuery) FirstIDX(ctx context.Context) int {
	id, err := iilq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InstitutionInviteLink entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InstitutionInviteLink entity is found.
// Returns a *NotFoundError when no InstitutionInviteLink entities are found.
func (iilq *InstitutionInviteLinkQuery) Only(ctx context.Context) (*InstitutionInviteLink, error) {
	nodes, err := iilq.Limit(2).All(setContextOp(ctx, iilq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{institutioninvitelink.Label}
	default:
		return nil, &NotSingularError{institutioninvitelink.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iilq *InstitutionInviteLinkQuery) OnlyX(ctx context.Context) *InstitutionInviteLink {
	node, err := iilq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InstitutionInviteLink ID in the query.
// Returns a *NotSingularError when more than one InstitutionInviteLink ID is found.
// Returns a *NotFoundError when no entities are found.
func (iilq *InstitutionInviteLinkQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = iilq.Limit(2).IDs(setContextOp(ctx, iilq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{institutioninvitelink.Label}
	default:
		err = &NotSingularError{institutioninvitelink.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iilq *InstitutionInviteLinkQuery) OnlyIDX(ctx context.Context) int {
	id, err := iilq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InstitutionInviteLinks.
func (iilq *InstitutionInviteLinkQuery) All(ctx context.Context) ([]*InstitutionInviteLink, error) {
	ctx = setContextOp(ctx, iilq.ctx, "All")
	if err := iilq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InstitutionInviteLink, *InstitutionInviteLinkQuery]()
	return withInterceptors[[]*InstitutionInviteLink](ctx, iilq, qr, iilq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iilq *InstitutionInviteLinkQuery) AllX(ctx context.Context) []*InstitutionInviteLink {
	nodes, err := iilq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InstitutionInviteLink IDs.
func (iilq *InstitutionInviteLinkQuery) IDs(ctx context.Context) (ids []int, err error) {
	if iilq.ctx.Unique == nil && iilq.path != nil {
		iilq.Unique(true)
	}
	ctx = setContextOp(ctx, iilq.ctx, "IDs")
	if err = iilq.Select(institutioninvitelink.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iilq *InstitutionInviteLinkQuery) IDsX(ctx context.Context) []int {
	ids, err := iilq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iilq *InstitutionInviteLinkQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iilq.ctx, "Count")
	if err := iilq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iilq, querierCount[*InstitutionInviteLinkQuery](), iilq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iilq *InstitutionInviteLinkQuery) CountX(ctx context.Context) int {
	count, err := iilq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iilq *InstitutionInviteLinkQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iilq.ctx, "Exist")
	switch _, err := iilq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iilq *InstitutionInviteLinkQuery) ExistX(ctx context.Context) bool {
	exist, err := iilq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InstitutionInviteLinkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iilq *InstitutionInviteLinkQuery) Clone() *InstitutionInviteLinkQuery {
	if iilq == nil {
		return nil
	}
	return &InstitutionInviteLinkQuery{
		config:          iilq.config,
		ctx:             iilq.ctx.Clone(),
		order:           append([]institutioninvitelink.OrderOption{}, iilq.order...),
		inters:          append([]Interceptor{}, iilq.inters...),
		predicates:      append([]predicate.InstitutionInviteLink{}, iilq.predicates...),
		withInstitution: iilq.withInstitution.Clone(),
		// clone intermediate query.
		sql:  iilq.sql.Clone(),
		path: iilq.path,
	}
}

// WithInstitution tells the query-builder to eager-load the nodes that are connected to
// the "institution" edge. The optional arguments are used to configure the query builder of the edge.
func (iilq *InstitutionInviteLinkQuery) WithInstitution(opts ...func(*InstitutionQuery)) *InstitutionInviteLinkQuery {
	query := (&InstitutionClient{config: iilq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iilq.withInstitution = query
	return iilq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InstitutionInviteLink.Query().
//		GroupBy(institutioninvitelink.FieldCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iilq *InstitutionInviteLinkQuery) GroupBy(field string, fields ...string) *InstitutionInviteLinkGroupBy {
	iilq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InstitutionInviteLinkGroupBy{build: iilq}
	grbuild.flds = &iilq.ctx.Fields
	grbuild.label = institutioninvitelink.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//	}
//
//	client.InstitutionInviteLink.Query().
//		Select(institutioninvitelink.FieldCode).
//		Scan(ctx, &v)
func (iilq *InstitutionInviteLinkQuery) Select(fields ...string) *InstitutionInviteLinkSelect {
	iilq.ctx.Fields = append(iilq.ctx.Fields, fields...)
	sbuild := &InstitutionInviteLinkSelect{InstitutionInviteLinkQuery: iilq}
	sbuild.label = institutioninvitelink.Label
	sbuild.flds, sbuild.scan = &iilq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InstitutionInviteLinkSelect configured with the given aggregations.
func (iilq *InstitutionInviteLinkQuery) Aggregate(fns ...AggregateFunc) *InstitutionInviteLinkSelect {
	return iilq.Select().Aggregate(fns...)
}

func (iilq *InstitutionInviteLinkQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iilq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iilq); err != nil {
				return err
			}
		}
	}
	for _, f := range iilq.ctx.Fields {
		if !institutioninvitelink.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iilq.path != nil {
		prev, err := iilq.path(ctx)
		if err != nil {
			return err
		}
		iilq.sql = prev
	}
	return nil
}

func (iilq *InstitutionInviteLinkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InstitutionInviteLink, error) {
	var (
		nodes       = []*InstitutionInviteLink{}
		withFKs     = iilq.withFKs
		_spec       = iilq.querySpec()
		loadedTypes = [1]bool{
			iilq.withInstitution != nil,
		}
	)
	if iilq.withInstitution != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, institutioninvitelink.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InstitutionInviteLink).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InstitutionInviteLink{config: iilq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iilq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iilq.withInstitution; query != nil {
		if err := iilq.loadInstitution(ctx, query, nodes, nil,
			func(n *InstitutionInviteLink, e *Institution) { n.Edges.Institution = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iilq *InstitutionInviteLinkQuery) loadInstitution(ctx context.Context, query *InstitutionQuery, nodes []*InstitutionInviteLink, init func(*InstitutionInviteLink), assign func(*InstitutionInviteLink, *Institution)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*InstitutionInviteLink)
	for i := range nodes {
		if nodes[i].institution_invites == nil {
			continue
		}
		fk := *nodes[i].institution_invites
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entinstitution.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "institution_invites" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (iilq *InstitutionInviteLinkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iilq.querySpec()
	_spec.Node.Columns = iilq.ctx.Fields
	if len(iilq.ctx.Fields) > 0 {
		_spec.Unique = iilq.ctx.Unique != nil && *iilq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iilq.driver, _spec)
}

func (iilq *InstitutionInviteLinkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(institutioninvitelink.Table, institutioninvitelink.Columns, sqlgraph.NewFieldSpec(institutioninvitelink.FieldID, field.TypeInt))
	_spec.From = iilq.sql
	if unique := iilq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iilq.path != nil {
		_spec.Unique = true
	}
	if fields := iilq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, institutioninvitelink.FieldID)
		for i := range fields {
			if fields[i] != institutioninvitelink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iilq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iilq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iilq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iilq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iilq *InstitutionInviteLinkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iilq.driver.Dialect())
	t1 := builder.Table(institutioninvitelink.Table)
	columns := iilq.ctx.Fields
	if len(columns) == 0 {
		columns = institutioninvitelink.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iilq.sql != nil {
		selector = iilq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iilq.ctx.Unique != nil && *iilq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range iilq.predicates {
		p(selector)
	}
	for _, p := range iilq.order {
		p(selector)
	}
	if offset := iilq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iilq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InstitutionInviteLinkGroupBy is the group-by builder for InstitutionInviteLink entities.
type InstitutionInviteLinkGroupBy struct {
	selector
	build *InstitutionInviteLinkQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iilgb *InstitutionInviteLinkGroupBy) Aggregate(fns ...AggregateFunc) *InstitutionInviteLinkGroupBy {
	iilgb.fns = append(iilgb.fns, fns...)
	return iilgb
}

// Scan applies the selector query and scans the result into the given value.
func (iilgb *InstitutionInviteLinkGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iilgb.build.ctx, "GroupBy")
	if err := iilgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstitutionInviteLinkQuery, *InstitutionInviteLinkGroupBy](ctx, iilgb.build, iilgb, iilgb.build.inters, v)
}

func (iilgb *InstitutionInviteLinkGroupBy) sqlScan(ctx context.Context, root *InstitutionInviteLinkQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iilgb.fns))
	for _, fn := range iilgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iilgb.flds)+len(iilgb.fns))
		for _, f := range *iilgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iilgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iilgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InstitutionInviteLinkSelect is the builder for selecting fields of InstitutionInviteLink entities.
type InstitutionInviteLinkSelect struct {
	*InstitutionInviteLinkQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (iils *InstitutionInviteLinkSelect) Aggregate(fns ...AggregateFunc) *InstitutionInviteLinkSelect {
	iils.fns = append(iils.fns, fns...)
	return iils
}

// Scan applies the selector query and scans the result into the given value.
func (iils *InstitutionInviteLinkSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iils.ctx, "Select")
	if err := iils.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstitutionInviteLinkQuery, *InstitutionInviteLinkSelect](ctx, iils.InstitutionInviteLinkQuery, iils, iils.inters, v)
}

func (iils *InstitutionInviteLinkSelect) sqlScan(ctx context.Context, root *InstitutionInviteLinkQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(iils.fns))
	for _, fn := range iils.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*iils.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iils.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
