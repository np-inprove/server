// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/deadline"
	"github.com/np-inprove/server/internal/ent/event"
	"github.com/np-inprove/server/internal/ent/forumpost"
	entgroup "github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/groupinvitelink"
	entinstitution "github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/user"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetName sets the "name" field.
func (gu *GroupUpdate) SetName(s string) *GroupUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetShortName sets the "short_name" field.
func (gu *GroupUpdate) SetShortName(s string) *GroupUpdate {
	gu.mutation.SetShortName(s)
	return gu
}

// SetDescription sets the "description" field.
func (gu *GroupUpdate) SetDescription(s string) *GroupUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (gu *GroupUpdate) AddUserIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddUserIDs(ids...)
	return gu
}

// AddUsers adds the "users" edges to the User entity.
func (gu *GroupUpdate) AddUsers(u ...*User) *GroupUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddUserIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (gu *GroupUpdate) AddEventIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddEventIDs(ids...)
	return gu
}

// AddEvents adds the "events" edges to the Event entity.
func (gu *GroupUpdate) AddEvents(e ...*Event) *GroupUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gu.AddEventIDs(ids...)
}

// AddForumPostIDs adds the "forum_posts" edge to the ForumPost entity by IDs.
func (gu *GroupUpdate) AddForumPostIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddForumPostIDs(ids...)
	return gu
}

// AddForumPosts adds the "forum_posts" edges to the ForumPost entity.
func (gu *GroupUpdate) AddForumPosts(f ...*ForumPost) *GroupUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return gu.AddForumPostIDs(ids...)
}

// AddDeadlineIDs adds the "deadlines" edge to the Deadline entity by IDs.
func (gu *GroupUpdate) AddDeadlineIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddDeadlineIDs(ids...)
	return gu
}

// AddDeadlines adds the "deadlines" edges to the Deadline entity.
func (gu *GroupUpdate) AddDeadlines(d ...*Deadline) *GroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return gu.AddDeadlineIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the GroupInviteLink entity by IDs.
func (gu *GroupUpdate) AddInviteIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddInviteIDs(ids...)
	return gu
}

// AddInvites adds the "invites" edges to the GroupInviteLink entity.
func (gu *GroupUpdate) AddInvites(g ...*GroupInviteLink) *GroupUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddInviteIDs(ids...)
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (gu *GroupUpdate) SetInstitutionID(id int) *GroupUpdate {
	gu.mutation.SetInstitutionID(id)
	return gu
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (gu *GroupUpdate) SetInstitution(i *Institution) *GroupUpdate {
	return gu.SetInstitutionID(i.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (gu *GroupUpdate) ClearUsers() *GroupUpdate {
	gu.mutation.ClearUsers()
	return gu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (gu *GroupUpdate) RemoveUserIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveUserIDs(ids...)
	return gu
}

// RemoveUsers removes "users" edges to User entities.
func (gu *GroupUpdate) RemoveUsers(u ...*User) *GroupUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveUserIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (gu *GroupUpdate) ClearEvents() *GroupUpdate {
	gu.mutation.ClearEvents()
	return gu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (gu *GroupUpdate) RemoveEventIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveEventIDs(ids...)
	return gu
}

// RemoveEvents removes "events" edges to Event entities.
func (gu *GroupUpdate) RemoveEvents(e ...*Event) *GroupUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return gu.RemoveEventIDs(ids...)
}

// ClearForumPosts clears all "forum_posts" edges to the ForumPost entity.
func (gu *GroupUpdate) ClearForumPosts() *GroupUpdate {
	gu.mutation.ClearForumPosts()
	return gu
}

// RemoveForumPostIDs removes the "forum_posts" edge to ForumPost entities by IDs.
func (gu *GroupUpdate) RemoveForumPostIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveForumPostIDs(ids...)
	return gu
}

// RemoveForumPosts removes "forum_posts" edges to ForumPost entities.
func (gu *GroupUpdate) RemoveForumPosts(f ...*ForumPost) *GroupUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return gu.RemoveForumPostIDs(ids...)
}

// ClearDeadlines clears all "deadlines" edges to the Deadline entity.
func (gu *GroupUpdate) ClearDeadlines() *GroupUpdate {
	gu.mutation.ClearDeadlines()
	return gu
}

// RemoveDeadlineIDs removes the "deadlines" edge to Deadline entities by IDs.
func (gu *GroupUpdate) RemoveDeadlineIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveDeadlineIDs(ids...)
	return gu
}

// RemoveDeadlines removes "deadlines" edges to Deadline entities.
func (gu *GroupUpdate) RemoveDeadlines(d ...*Deadline) *GroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return gu.RemoveDeadlineIDs(ids...)
}

// ClearInvites clears all "invites" edges to the GroupInviteLink entity.
func (gu *GroupUpdate) ClearInvites() *GroupUpdate {
	gu.mutation.ClearInvites()
	return gu
}

// RemoveInviteIDs removes the "invites" edge to GroupInviteLink entities by IDs.
func (gu *GroupUpdate) RemoveInviteIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveInviteIDs(ids...)
	return gu
}

// RemoveInvites removes "invites" edges to GroupInviteLink entities.
func (gu *GroupUpdate) RemoveInvites(g ...*GroupInviteLink) *GroupUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveInviteIDs(ids...)
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (gu *GroupUpdate) ClearInstitution() *GroupUpdate {
	gu.mutation.ClearInstitution()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := entgroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Group.name": %w`, err)}
		}
	}
	if v, ok := gu.mutation.ShortName(); ok {
		if err := entgroup.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "short_name", err: fmt.Errorf(`ent: validator failed for field "Group.short_name": %w`, err)}
		}
	}
	if _, ok := gu.mutation.InstitutionID(); gu.mutation.InstitutionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Group.institution"`)
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entgroup.Table, entgroup.Columns, sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(entgroup.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.ShortName(); ok {
		_spec.SetField(entgroup.FieldShortName, field.TypeString, value)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(entgroup.FieldDescription, field.TypeString, value)
	}
	if gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entgroup.UsersTable,
			Columns: entgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entgroup.UsersTable,
			Columns: entgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entgroup.UsersTable,
			Columns: entgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.EventsTable,
			Columns: []string{entgroup.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !gu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.EventsTable,
			Columns: []string{entgroup.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.EventsTable,
			Columns: []string{entgroup.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ForumPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.ForumPostsTable,
			Columns: []string{entgroup.ForumPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedForumPostsIDs(); len(nodes) > 0 && !gu.mutation.ForumPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.ForumPostsTable,
			Columns: []string{entgroup.ForumPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ForumPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.ForumPostsTable,
			Columns: []string{entgroup.ForumPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.DeadlinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.DeadlinesTable,
			Columns: []string{entgroup.DeadlinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deadline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedDeadlinesIDs(); len(nodes) > 0 && !gu.mutation.DeadlinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.DeadlinesTable,
			Columns: []string{entgroup.DeadlinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deadline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.DeadlinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.DeadlinesTable,
			Columns: []string{entgroup.DeadlinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deadline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.InvitesTable,
			Columns: []string{entgroup.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !gu.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.InvitesTable,
			Columns: []string{entgroup.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.InvitesTable,
			Columns: []string{entgroup.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entgroup.InstitutionTable,
			Columns: []string{entgroup.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entinstitution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entgroup.InstitutionTable,
			Columns: []string{entgroup.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entinstitution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetName sets the "name" field.
func (guo *GroupUpdateOne) SetName(s string) *GroupUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetShortName sets the "short_name" field.
func (guo *GroupUpdateOne) SetShortName(s string) *GroupUpdateOne {
	guo.mutation.SetShortName(s)
	return guo
}

// SetDescription sets the "description" field.
func (guo *GroupUpdateOne) SetDescription(s string) *GroupUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (guo *GroupUpdateOne) AddUserIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddUserIDs(ids...)
	return guo
}

// AddUsers adds the "users" edges to the User entity.
func (guo *GroupUpdateOne) AddUsers(u ...*User) *GroupUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddUserIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (guo *GroupUpdateOne) AddEventIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddEventIDs(ids...)
	return guo
}

// AddEvents adds the "events" edges to the Event entity.
func (guo *GroupUpdateOne) AddEvents(e ...*Event) *GroupUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return guo.AddEventIDs(ids...)
}

// AddForumPostIDs adds the "forum_posts" edge to the ForumPost entity by IDs.
func (guo *GroupUpdateOne) AddForumPostIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddForumPostIDs(ids...)
	return guo
}

// AddForumPosts adds the "forum_posts" edges to the ForumPost entity.
func (guo *GroupUpdateOne) AddForumPosts(f ...*ForumPost) *GroupUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return guo.AddForumPostIDs(ids...)
}

// AddDeadlineIDs adds the "deadlines" edge to the Deadline entity by IDs.
func (guo *GroupUpdateOne) AddDeadlineIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddDeadlineIDs(ids...)
	return guo
}

// AddDeadlines adds the "deadlines" edges to the Deadline entity.
func (guo *GroupUpdateOne) AddDeadlines(d ...*Deadline) *GroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return guo.AddDeadlineIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the GroupInviteLink entity by IDs.
func (guo *GroupUpdateOne) AddInviteIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddInviteIDs(ids...)
	return guo
}

// AddInvites adds the "invites" edges to the GroupInviteLink entity.
func (guo *GroupUpdateOne) AddInvites(g ...*GroupInviteLink) *GroupUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddInviteIDs(ids...)
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (guo *GroupUpdateOne) SetInstitutionID(id int) *GroupUpdateOne {
	guo.mutation.SetInstitutionID(id)
	return guo
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (guo *GroupUpdateOne) SetInstitution(i *Institution) *GroupUpdateOne {
	return guo.SetInstitutionID(i.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (guo *GroupUpdateOne) ClearUsers() *GroupUpdateOne {
	guo.mutation.ClearUsers()
	return guo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (guo *GroupUpdateOne) RemoveUserIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveUserIDs(ids...)
	return guo
}

// RemoveUsers removes "users" edges to User entities.
func (guo *GroupUpdateOne) RemoveUsers(u ...*User) *GroupUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveUserIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (guo *GroupUpdateOne) ClearEvents() *GroupUpdateOne {
	guo.mutation.ClearEvents()
	return guo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (guo *GroupUpdateOne) RemoveEventIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveEventIDs(ids...)
	return guo
}

// RemoveEvents removes "events" edges to Event entities.
func (guo *GroupUpdateOne) RemoveEvents(e ...*Event) *GroupUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return guo.RemoveEventIDs(ids...)
}

// ClearForumPosts clears all "forum_posts" edges to the ForumPost entity.
func (guo *GroupUpdateOne) ClearForumPosts() *GroupUpdateOne {
	guo.mutation.ClearForumPosts()
	return guo
}

// RemoveForumPostIDs removes the "forum_posts" edge to ForumPost entities by IDs.
func (guo *GroupUpdateOne) RemoveForumPostIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveForumPostIDs(ids...)
	return guo
}

// RemoveForumPosts removes "forum_posts" edges to ForumPost entities.
func (guo *GroupUpdateOne) RemoveForumPosts(f ...*ForumPost) *GroupUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return guo.RemoveForumPostIDs(ids...)
}

// ClearDeadlines clears all "deadlines" edges to the Deadline entity.
func (guo *GroupUpdateOne) ClearDeadlines() *GroupUpdateOne {
	guo.mutation.ClearDeadlines()
	return guo
}

// RemoveDeadlineIDs removes the "deadlines" edge to Deadline entities by IDs.
func (guo *GroupUpdateOne) RemoveDeadlineIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveDeadlineIDs(ids...)
	return guo
}

// RemoveDeadlines removes "deadlines" edges to Deadline entities.
func (guo *GroupUpdateOne) RemoveDeadlines(d ...*Deadline) *GroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return guo.RemoveDeadlineIDs(ids...)
}

// ClearInvites clears all "invites" edges to the GroupInviteLink entity.
func (guo *GroupUpdateOne) ClearInvites() *GroupUpdateOne {
	guo.mutation.ClearInvites()
	return guo
}

// RemoveInviteIDs removes the "invites" edge to GroupInviteLink entities by IDs.
func (guo *GroupUpdateOne) RemoveInviteIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveInviteIDs(ids...)
	return guo
}

// RemoveInvites removes "invites" edges to GroupInviteLink entities.
func (guo *GroupUpdateOne) RemoveInvites(g ...*GroupInviteLink) *GroupUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveInviteIDs(ids...)
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (guo *GroupUpdateOne) ClearInstitution() *GroupUpdateOne {
	guo.mutation.ClearInstitution()
	return guo
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := entgroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Group.name": %w`, err)}
		}
	}
	if v, ok := guo.mutation.ShortName(); ok {
		if err := entgroup.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "short_name", err: fmt.Errorf(`ent: validator failed for field "Group.short_name": %w`, err)}
		}
	}
	if _, ok := guo.mutation.InstitutionID(); guo.mutation.InstitutionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Group.institution"`)
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entgroup.Table, entgroup.Columns, sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entgroup.FieldID)
		for _, f := range fields {
			if !entgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(entgroup.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.ShortName(); ok {
		_spec.SetField(entgroup.FieldShortName, field.TypeString, value)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(entgroup.FieldDescription, field.TypeString, value)
	}
	if guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entgroup.UsersTable,
			Columns: entgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entgroup.UsersTable,
			Columns: entgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entgroup.UsersTable,
			Columns: entgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.EventsTable,
			Columns: []string{entgroup.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !guo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.EventsTable,
			Columns: []string{entgroup.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.EventsTable,
			Columns: []string{entgroup.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ForumPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.ForumPostsTable,
			Columns: []string{entgroup.ForumPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedForumPostsIDs(); len(nodes) > 0 && !guo.mutation.ForumPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.ForumPostsTable,
			Columns: []string{entgroup.ForumPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ForumPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.ForumPostsTable,
			Columns: []string{entgroup.ForumPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.DeadlinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.DeadlinesTable,
			Columns: []string{entgroup.DeadlinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deadline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedDeadlinesIDs(); len(nodes) > 0 && !guo.mutation.DeadlinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.DeadlinesTable,
			Columns: []string{entgroup.DeadlinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deadline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.DeadlinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.DeadlinesTable,
			Columns: []string{entgroup.DeadlinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deadline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.InvitesTable,
			Columns: []string{entgroup.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !guo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.InvitesTable,
			Columns: []string{entgroup.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entgroup.InvitesTable,
			Columns: []string{entgroup.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entgroup.InstitutionTable,
			Columns: []string{entgroup.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entinstitution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entgroup.InstitutionTable,
			Columns: []string{entgroup.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entinstitution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
