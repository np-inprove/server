// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/prize"
	"github.com/np-inprove/server/internal/ent/user"
)

// PrizeUpdate is the builder for updating Prize entities.
type PrizeUpdate struct {
	config
	hooks    []Hook
	mutation *PrizeMutation
}

// Where appends a list predicates to the PrizeUpdate builder.
func (pu *PrizeUpdate) Where(ps ...predicate.Prize) *PrizeUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PrizeUpdate) SetName(s string) *PrizeUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PrizeUpdate) SetDescription(s string) *PrizeUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetPointsRequired sets the "points_required" field.
func (pu *PrizeUpdate) SetPointsRequired(i int) *PrizeUpdate {
	pu.mutation.ResetPointsRequired()
	pu.mutation.SetPointsRequired(i)
	return pu
}

// AddPointsRequired adds i to the "points_required" field.
func (pu *PrizeUpdate) AddPointsRequired(i int) *PrizeUpdate {
	pu.mutation.AddPointsRequired(i)
	return pu
}

// SetDiscriminator sets the "discriminator" field.
func (pu *PrizeUpdate) SetDiscriminator(pr prize.Discriminator) *PrizeUpdate {
	pu.mutation.SetDiscriminator(pr)
	return pu
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (pu *PrizeUpdate) SetInstitutionID(id int) *PrizeUpdate {
	pu.mutation.SetInstitutionID(id)
	return pu
}

// SetNillableInstitutionID sets the "institution" edge to the Institution entity by ID if the given value is not nil.
func (pu *PrizeUpdate) SetNillableInstitutionID(id *int) *PrizeUpdate {
	if id != nil {
		pu = pu.SetInstitutionID(*id)
	}
	return pu
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (pu *PrizeUpdate) SetInstitution(i *Institution) *PrizeUpdate {
	return pu.SetInstitutionID(i.ID)
}

// AddRedemptionUserIDs adds the "redemption_users" edge to the User entity by IDs.
func (pu *PrizeUpdate) AddRedemptionUserIDs(ids ...int) *PrizeUpdate {
	pu.mutation.AddRedemptionUserIDs(ids...)
	return pu
}

// AddRedemptionUsers adds the "redemption_users" edges to the User entity.
func (pu *PrizeUpdate) AddRedemptionUsers(u ...*User) *PrizeUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddRedemptionUserIDs(ids...)
}

// Mutation returns the PrizeMutation object of the builder.
func (pu *PrizeUpdate) Mutation() *PrizeMutation {
	return pu.mutation
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (pu *PrizeUpdate) ClearInstitution() *PrizeUpdate {
	pu.mutation.ClearInstitution()
	return pu
}

// ClearRedemptionUsers clears all "redemption_users" edges to the User entity.
func (pu *PrizeUpdate) ClearRedemptionUsers() *PrizeUpdate {
	pu.mutation.ClearRedemptionUsers()
	return pu
}

// RemoveRedemptionUserIDs removes the "redemption_users" edge to User entities by IDs.
func (pu *PrizeUpdate) RemoveRedemptionUserIDs(ids ...int) *PrizeUpdate {
	pu.mutation.RemoveRedemptionUserIDs(ids...)
	return pu
}

// RemoveRedemptionUsers removes "redemption_users" edges to User entities.
func (pu *PrizeUpdate) RemoveRedemptionUsers(u ...*User) *PrizeUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveRedemptionUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PrizeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PrizeUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PrizeUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PrizeUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PrizeUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := prize.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Prize.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PointsRequired(); ok {
		if err := prize.PointsRequiredValidator(v); err != nil {
			return &ValidationError{Name: "points_required", err: fmt.Errorf(`ent: validator failed for field "Prize.points_required": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Discriminator(); ok {
		if err := prize.DiscriminatorValidator(v); err != nil {
			return &ValidationError{Name: "discriminator", err: fmt.Errorf(`ent: validator failed for field "Prize.discriminator": %w`, err)}
		}
	}
	return nil
}

func (pu *PrizeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(prize.Table, prize.Columns, sqlgraph.NewFieldSpec(prize.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(prize.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(prize.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.PointsRequired(); ok {
		_spec.SetField(prize.FieldPointsRequired, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPointsRequired(); ok {
		_spec.AddField(prize.FieldPointsRequired, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Discriminator(); ok {
		_spec.SetField(prize.FieldDiscriminator, field.TypeEnum, value)
	}
	if pu.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prize.InstitutionTable,
			Columns: []string{prize.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prize.InstitutionTable,
			Columns: []string{prize.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RedemptionUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prize.RedemptionUsersTable,
			Columns: prize.RedemptionUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRedemptionUsersIDs(); len(nodes) > 0 && !pu.mutation.RedemptionUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prize.RedemptionUsersTable,
			Columns: prize.RedemptionUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RedemptionUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prize.RedemptionUsersTable,
			Columns: prize.RedemptionUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prize.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PrizeUpdateOne is the builder for updating a single Prize entity.
type PrizeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrizeMutation
}

// SetName sets the "name" field.
func (puo *PrizeUpdateOne) SetName(s string) *PrizeUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *PrizeUpdateOne) SetDescription(s string) *PrizeUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetPointsRequired sets the "points_required" field.
func (puo *PrizeUpdateOne) SetPointsRequired(i int) *PrizeUpdateOne {
	puo.mutation.ResetPointsRequired()
	puo.mutation.SetPointsRequired(i)
	return puo
}

// AddPointsRequired adds i to the "points_required" field.
func (puo *PrizeUpdateOne) AddPointsRequired(i int) *PrizeUpdateOne {
	puo.mutation.AddPointsRequired(i)
	return puo
}

// SetDiscriminator sets the "discriminator" field.
func (puo *PrizeUpdateOne) SetDiscriminator(pr prize.Discriminator) *PrizeUpdateOne {
	puo.mutation.SetDiscriminator(pr)
	return puo
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (puo *PrizeUpdateOne) SetInstitutionID(id int) *PrizeUpdateOne {
	puo.mutation.SetInstitutionID(id)
	return puo
}

// SetNillableInstitutionID sets the "institution" edge to the Institution entity by ID if the given value is not nil.
func (puo *PrizeUpdateOne) SetNillableInstitutionID(id *int) *PrizeUpdateOne {
	if id != nil {
		puo = puo.SetInstitutionID(*id)
	}
	return puo
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (puo *PrizeUpdateOne) SetInstitution(i *Institution) *PrizeUpdateOne {
	return puo.SetInstitutionID(i.ID)
}

// AddRedemptionUserIDs adds the "redemption_users" edge to the User entity by IDs.
func (puo *PrizeUpdateOne) AddRedemptionUserIDs(ids ...int) *PrizeUpdateOne {
	puo.mutation.AddRedemptionUserIDs(ids...)
	return puo
}

// AddRedemptionUsers adds the "redemption_users" edges to the User entity.
func (puo *PrizeUpdateOne) AddRedemptionUsers(u ...*User) *PrizeUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddRedemptionUserIDs(ids...)
}

// Mutation returns the PrizeMutation object of the builder.
func (puo *PrizeUpdateOne) Mutation() *PrizeMutation {
	return puo.mutation
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (puo *PrizeUpdateOne) ClearInstitution() *PrizeUpdateOne {
	puo.mutation.ClearInstitution()
	return puo
}

// ClearRedemptionUsers clears all "redemption_users" edges to the User entity.
func (puo *PrizeUpdateOne) ClearRedemptionUsers() *PrizeUpdateOne {
	puo.mutation.ClearRedemptionUsers()
	return puo
}

// RemoveRedemptionUserIDs removes the "redemption_users" edge to User entities by IDs.
func (puo *PrizeUpdateOne) RemoveRedemptionUserIDs(ids ...int) *PrizeUpdateOne {
	puo.mutation.RemoveRedemptionUserIDs(ids...)
	return puo
}

// RemoveRedemptionUsers removes "redemption_users" edges to User entities.
func (puo *PrizeUpdateOne) RemoveRedemptionUsers(u ...*User) *PrizeUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveRedemptionUserIDs(ids...)
}

// Where appends a list predicates to the PrizeUpdate builder.
func (puo *PrizeUpdateOne) Where(ps ...predicate.Prize) *PrizeUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PrizeUpdateOne) Select(field string, fields ...string) *PrizeUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prize entity.
func (puo *PrizeUpdateOne) Save(ctx context.Context) (*Prize, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PrizeUpdateOne) SaveX(ctx context.Context) *Prize {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PrizeUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PrizeUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PrizeUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := prize.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Prize.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PointsRequired(); ok {
		if err := prize.PointsRequiredValidator(v); err != nil {
			return &ValidationError{Name: "points_required", err: fmt.Errorf(`ent: validator failed for field "Prize.points_required": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Discriminator(); ok {
		if err := prize.DiscriminatorValidator(v); err != nil {
			return &ValidationError{Name: "discriminator", err: fmt.Errorf(`ent: validator failed for field "Prize.discriminator": %w`, err)}
		}
	}
	return nil
}

func (puo *PrizeUpdateOne) sqlSave(ctx context.Context) (_node *Prize, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(prize.Table, prize.Columns, sqlgraph.NewFieldSpec(prize.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prize.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prize.FieldID)
		for _, f := range fields {
			if !prize.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prize.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(prize.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(prize.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.PointsRequired(); ok {
		_spec.SetField(prize.FieldPointsRequired, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPointsRequired(); ok {
		_spec.AddField(prize.FieldPointsRequired, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Discriminator(); ok {
		_spec.SetField(prize.FieldDiscriminator, field.TypeEnum, value)
	}
	if puo.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prize.InstitutionTable,
			Columns: []string{prize.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prize.InstitutionTable,
			Columns: []string{prize.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RedemptionUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prize.RedemptionUsersTable,
			Columns: prize.RedemptionUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRedemptionUsersIDs(); len(nodes) > 0 && !puo.mutation.RedemptionUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prize.RedemptionUsersTable,
			Columns: prize.RedemptionUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RedemptionUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   prize.RedemptionUsersTable,
			Columns: prize.RedemptionUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Prize{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prize.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
