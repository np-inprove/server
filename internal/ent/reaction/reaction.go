// Code generated by ent, DO NOT EDIT.

package reaction

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reaction type in the database.
	Label = "reaction"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldForumPostID holds the string denoting the forum_post_id field in the database.
	FieldForumPostID = "forum_post_id"
	// FieldEmoji holds the string denoting the emoji field in the database.
	FieldEmoji = "emoji"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeForumPost holds the string denoting the forum_post edge name in mutations.
	EdgeForumPost = "forum_post"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// ForumPostFieldID holds the string denoting the ID field of the ForumPost.
	ForumPostFieldID = "id"
	// Table holds the table name of the reaction in the database.
	Table = "reactions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "reactions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ForumPostTable is the table that holds the forum_post relation/edge.
	ForumPostTable = "reactions"
	// ForumPostInverseTable is the table name for the ForumPost entity.
	// It exists in this package in order to avoid circular dependency with the "forumpost" package.
	ForumPostInverseTable = "forum_posts"
	// ForumPostColumn is the table column denoting the forum_post relation/edge.
	ForumPostColumn = "forum_post_id"
)

// Columns holds all SQL columns for reaction fields.
var Columns = []string{
	FieldUserID,
	FieldForumPostID,
	FieldEmoji,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmojiValidator is a validator for the "emoji" field. It is called by the builders before save.
	EmojiValidator func(string) error
)

// OrderOption defines the ordering options for the Reaction queries.
type OrderOption func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByForumPostID orders the results by the forum_post_id field.
func ByForumPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForumPostID, opts...).ToFunc()
}

// ByEmoji orders the results by the emoji field.
func ByEmoji(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmoji, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByForumPostField orders the results by forum_post field.
func ByForumPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newForumPostStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newForumPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ForumPostColumn),
		sqlgraph.To(ForumPostInverseTable, ForumPostFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ForumPostTable, ForumPostColumn),
	)
}
