// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	entgroup "github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/groupinvitelink"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/entity/group"
)

// GroupInviteLinkUpdate is the builder for updating GroupInviteLink entities.
type GroupInviteLinkUpdate struct {
	config
	hooks    []Hook
	mutation *GroupInviteLinkMutation
}

// Where appends a list predicates to the GroupInviteLinkUpdate builder.
func (gilu *GroupInviteLinkUpdate) Where(ps ...predicate.GroupInviteLink) *GroupInviteLinkUpdate {
	gilu.mutation.Where(ps...)
	return gilu
}

// SetCode sets the "code" field.
func (gilu *GroupInviteLinkUpdate) SetCode(s string) *GroupInviteLinkUpdate {
	gilu.mutation.SetCode(s)
	return gilu
}

// SetRole sets the "role" field.
func (gilu *GroupInviteLinkUpdate) SetRole(gr group.Role) *GroupInviteLinkUpdate {
	gilu.mutation.SetRole(gr)
	return gilu
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (gilu *GroupInviteLinkUpdate) SetGroupID(id int) *GroupInviteLinkUpdate {
	gilu.mutation.SetGroupID(id)
	return gilu
}

// SetGroup sets the "group" edge to the Group entity.
func (gilu *GroupInviteLinkUpdate) SetGroup(g *Group) *GroupInviteLinkUpdate {
	return gilu.SetGroupID(g.ID)
}

// Mutation returns the GroupInviteLinkMutation object of the builder.
func (gilu *GroupInviteLinkUpdate) Mutation() *GroupInviteLinkMutation {
	return gilu.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (gilu *GroupInviteLinkUpdate) ClearGroup() *GroupInviteLinkUpdate {
	gilu.mutation.ClearGroup()
	return gilu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gilu *GroupInviteLinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gilu.sqlSave, gilu.mutation, gilu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gilu *GroupInviteLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := gilu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gilu *GroupInviteLinkUpdate) Exec(ctx context.Context) error {
	_, err := gilu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gilu *GroupInviteLinkUpdate) ExecX(ctx context.Context) {
	if err := gilu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gilu *GroupInviteLinkUpdate) check() error {
	if v, ok := gilu.mutation.Code(); ok {
		if err := groupinvitelink.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "GroupInviteLink.code": %w`, err)}
		}
	}
	if v, ok := gilu.mutation.Role(); ok {
		if err := groupinvitelink.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "GroupInviteLink.role": %w`, err)}
		}
	}
	if _, ok := gilu.mutation.GroupID(); gilu.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupInviteLink.group"`)
	}
	return nil
}

func (gilu *GroupInviteLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gilu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupinvitelink.Table, groupinvitelink.Columns, sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt))
	if ps := gilu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gilu.mutation.Code(); ok {
		_spec.SetField(groupinvitelink.FieldCode, field.TypeString, value)
	}
	if value, ok := gilu.mutation.Role(); ok {
		_spec.SetField(groupinvitelink.FieldRole, field.TypeEnum, value)
	}
	if gilu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupinvitelink.GroupTable,
			Columns: []string{groupinvitelink.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gilu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupinvitelink.GroupTable,
			Columns: []string{groupinvitelink.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gilu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupinvitelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gilu.mutation.done = true
	return n, nil
}

// GroupInviteLinkUpdateOne is the builder for updating a single GroupInviteLink entity.
type GroupInviteLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupInviteLinkMutation
}

// SetCode sets the "code" field.
func (giluo *GroupInviteLinkUpdateOne) SetCode(s string) *GroupInviteLinkUpdateOne {
	giluo.mutation.SetCode(s)
	return giluo
}

// SetRole sets the "role" field.
func (giluo *GroupInviteLinkUpdateOne) SetRole(gr group.Role) *GroupInviteLinkUpdateOne {
	giluo.mutation.SetRole(gr)
	return giluo
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (giluo *GroupInviteLinkUpdateOne) SetGroupID(id int) *GroupInviteLinkUpdateOne {
	giluo.mutation.SetGroupID(id)
	return giluo
}

// SetGroup sets the "group" edge to the Group entity.
func (giluo *GroupInviteLinkUpdateOne) SetGroup(g *Group) *GroupInviteLinkUpdateOne {
	return giluo.SetGroupID(g.ID)
}

// Mutation returns the GroupInviteLinkMutation object of the builder.
func (giluo *GroupInviteLinkUpdateOne) Mutation() *GroupInviteLinkMutation {
	return giluo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (giluo *GroupInviteLinkUpdateOne) ClearGroup() *GroupInviteLinkUpdateOne {
	giluo.mutation.ClearGroup()
	return giluo
}

// Where appends a list predicates to the GroupInviteLinkUpdate builder.
func (giluo *GroupInviteLinkUpdateOne) Where(ps ...predicate.GroupInviteLink) *GroupInviteLinkUpdateOne {
	giluo.mutation.Where(ps...)
	return giluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (giluo *GroupInviteLinkUpdateOne) Select(field string, fields ...string) *GroupInviteLinkUpdateOne {
	giluo.fields = append([]string{field}, fields...)
	return giluo
}

// Save executes the query and returns the updated GroupInviteLink entity.
func (giluo *GroupInviteLinkUpdateOne) Save(ctx context.Context) (*GroupInviteLink, error) {
	return withHooks(ctx, giluo.sqlSave, giluo.mutation, giluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (giluo *GroupInviteLinkUpdateOne) SaveX(ctx context.Context) *GroupInviteLink {
	node, err := giluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (giluo *GroupInviteLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := giluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giluo *GroupInviteLinkUpdateOne) ExecX(ctx context.Context) {
	if err := giluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (giluo *GroupInviteLinkUpdateOne) check() error {
	if v, ok := giluo.mutation.Code(); ok {
		if err := groupinvitelink.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "GroupInviteLink.code": %w`, err)}
		}
	}
	if v, ok := giluo.mutation.Role(); ok {
		if err := groupinvitelink.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "GroupInviteLink.role": %w`, err)}
		}
	}
	if _, ok := giluo.mutation.GroupID(); giluo.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupInviteLink.group"`)
	}
	return nil
}

func (giluo *GroupInviteLinkUpdateOne) sqlSave(ctx context.Context) (_node *GroupInviteLink, err error) {
	if err := giluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupinvitelink.Table, groupinvitelink.Columns, sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt))
	id, ok := giluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupInviteLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := giluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupinvitelink.FieldID)
		for _, f := range fields {
			if !groupinvitelink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupinvitelink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := giluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := giluo.mutation.Code(); ok {
		_spec.SetField(groupinvitelink.FieldCode, field.TypeString, value)
	}
	if value, ok := giluo.mutation.Role(); ok {
		_spec.SetField(groupinvitelink.FieldRole, field.TypeEnum, value)
	}
	if giluo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupinvitelink.GroupTable,
			Columns: []string{groupinvitelink.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := giluo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupinvitelink.GroupTable,
			Columns: []string{groupinvitelink.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupInviteLink{config: giluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, giluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupinvitelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	giluo.mutation.done = true
	return _node, nil
}
