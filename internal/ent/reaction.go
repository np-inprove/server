// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/forumpost"
	"github.com/np-inprove/server/internal/ent/reaction"
	"github.com/np-inprove/server/internal/ent/user"
)

// Reaction is the model entity for the Reaction schema.
type Reaction struct {
	config `json:"-"`
	// ID of the user that reacted on the post
	UserID int `json:"user_id,omitempty"`
	// ID of the post that was reacted to
	ForumPostID int `json:"forum_post_id,omitempty"`
	// Emoji used for the reaction
	Emoji string `json:"emoji,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReactionQuery when eager-loading is set.
	Edges        ReactionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReactionEdges holds the relations/edges for other nodes in the graph.
type ReactionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// ForumPost holds the value of the forum_post edge.
	ForumPost *ForumPost `json:"forum_post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReactionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ForumPostOrErr returns the ForumPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReactionEdges) ForumPostOrErr() (*ForumPost, error) {
	if e.loadedTypes[1] {
		if e.ForumPost == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: forumpost.Label}
		}
		return e.ForumPost, nil
	}
	return nil, &NotLoadedError{edge: "forum_post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reaction.FieldUserID, reaction.FieldForumPostID:
			values[i] = new(sql.NullInt64)
		case reaction.FieldEmoji:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reaction fields.
func (r *Reaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reaction.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = int(value.Int64)
			}
		case reaction.FieldForumPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field forum_post_id", values[i])
			} else if value.Valid {
				r.ForumPostID = int(value.Int64)
			}
		case reaction.FieldEmoji:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field emoji", values[i])
			} else if value.Valid {
				r.Emoji = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reaction.
// This includes values selected through modifiers, order, etc.
func (r *Reaction) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Reaction entity.
func (r *Reaction) QueryUser() *UserQuery {
	return NewReactionClient(r.config).QueryUser(r)
}

// QueryForumPost queries the "forum_post" edge of the Reaction entity.
func (r *Reaction) QueryForumPost() *ForumPostQuery {
	return NewReactionClient(r.config).QueryForumPost(r)
}

// Update returns a builder for updating this Reaction.
// Note that you need to call Reaction.Unwrap() before calling this method if this Reaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reaction) Update() *ReactionUpdateOne {
	return NewReactionClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Reaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reaction) Unwrap() *Reaction {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reaction is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reaction) String() string {
	var builder strings.Builder
	builder.WriteString("Reaction(")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("forum_post_id=")
	builder.WriteString(fmt.Sprintf("%v", r.ForumPostID))
	builder.WriteString(", ")
	builder.WriteString("emoji=")
	builder.WriteString(r.Emoji)
	builder.WriteByte(')')
	return builder.String()
}

// Reactions is a parsable slice of Reaction.
type Reactions []*Reaction
