// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/milestone"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/studyplan"
)

// MilestoneUpdate is the builder for updating Milestone entities.
type MilestoneUpdate struct {
	config
	hooks    []Hook
	mutation *MilestoneMutation
}

// Where appends a list predicates to the MilestoneUpdate builder.
func (mu *MilestoneUpdate) Where(ps ...predicate.Milestone) *MilestoneUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MilestoneUpdate) SetName(s string) *MilestoneUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetTargetCompletionTime sets the "target_completion_time" field.
func (mu *MilestoneUpdate) SetTargetCompletionTime(t time.Time) *MilestoneUpdate {
	mu.mutation.SetTargetCompletionTime(t)
	return mu
}

// SetStudyPlanID sets the "study_plan" edge to the StudyPlan entity by ID.
func (mu *MilestoneUpdate) SetStudyPlanID(id int) *MilestoneUpdate {
	mu.mutation.SetStudyPlanID(id)
	return mu
}

// SetStudyPlan sets the "study_plan" edge to the StudyPlan entity.
func (mu *MilestoneUpdate) SetStudyPlan(s *StudyPlan) *MilestoneUpdate {
	return mu.SetStudyPlanID(s.ID)
}

// Mutation returns the MilestoneMutation object of the builder.
func (mu *MilestoneUpdate) Mutation() *MilestoneMutation {
	return mu.mutation
}

// ClearStudyPlan clears the "study_plan" edge to the StudyPlan entity.
func (mu *MilestoneUpdate) ClearStudyPlan() *MilestoneUpdate {
	mu.mutation.ClearStudyPlan()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MilestoneUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MilestoneUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MilestoneUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MilestoneUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MilestoneUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := milestone.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Milestone.name": %w`, err)}
		}
	}
	if _, ok := mu.mutation.StudyPlanID(); mu.mutation.StudyPlanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Milestone.study_plan"`)
	}
	return nil
}

func (mu *MilestoneUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(milestone.Table, milestone.Columns, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(milestone.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.TargetCompletionTime(); ok {
		_spec.SetField(milestone.FieldTargetCompletionTime, field.TypeTime, value)
	}
	if mu.mutation.StudyPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.StudyPlanTable,
			Columns: []string{milestone.StudyPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studyplan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.StudyPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.StudyPlanTable,
			Columns: []string{milestone.StudyPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studyplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{milestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MilestoneUpdateOne is the builder for updating a single Milestone entity.
type MilestoneUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MilestoneMutation
}

// SetName sets the "name" field.
func (muo *MilestoneUpdateOne) SetName(s string) *MilestoneUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetTargetCompletionTime sets the "target_completion_time" field.
func (muo *MilestoneUpdateOne) SetTargetCompletionTime(t time.Time) *MilestoneUpdateOne {
	muo.mutation.SetTargetCompletionTime(t)
	return muo
}

// SetStudyPlanID sets the "study_plan" edge to the StudyPlan entity by ID.
func (muo *MilestoneUpdateOne) SetStudyPlanID(id int) *MilestoneUpdateOne {
	muo.mutation.SetStudyPlanID(id)
	return muo
}

// SetStudyPlan sets the "study_plan" edge to the StudyPlan entity.
func (muo *MilestoneUpdateOne) SetStudyPlan(s *StudyPlan) *MilestoneUpdateOne {
	return muo.SetStudyPlanID(s.ID)
}

// Mutation returns the MilestoneMutation object of the builder.
func (muo *MilestoneUpdateOne) Mutation() *MilestoneMutation {
	return muo.mutation
}

// ClearStudyPlan clears the "study_plan" edge to the StudyPlan entity.
func (muo *MilestoneUpdateOne) ClearStudyPlan() *MilestoneUpdateOne {
	muo.mutation.ClearStudyPlan()
	return muo
}

// Where appends a list predicates to the MilestoneUpdate builder.
func (muo *MilestoneUpdateOne) Where(ps ...predicate.Milestone) *MilestoneUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MilestoneUpdateOne) Select(field string, fields ...string) *MilestoneUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Milestone entity.
func (muo *MilestoneUpdateOne) Save(ctx context.Context) (*Milestone, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MilestoneUpdateOne) SaveX(ctx context.Context) *Milestone {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MilestoneUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MilestoneUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MilestoneUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := milestone.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Milestone.name": %w`, err)}
		}
	}
	if _, ok := muo.mutation.StudyPlanID(); muo.mutation.StudyPlanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Milestone.study_plan"`)
	}
	return nil
}

func (muo *MilestoneUpdateOne) sqlSave(ctx context.Context) (_node *Milestone, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(milestone.Table, milestone.Columns, sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Milestone.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, milestone.FieldID)
		for _, f := range fields {
			if !milestone.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != milestone.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(milestone.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.TargetCompletionTime(); ok {
		_spec.SetField(milestone.FieldTargetCompletionTime, field.TypeTime, value)
	}
	if muo.mutation.StudyPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.StudyPlanTable,
			Columns: []string{milestone.StudyPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studyplan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.StudyPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   milestone.StudyPlanTable,
			Columns: []string{milestone.StudyPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studyplan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Milestone{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{milestone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
