// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/pet"
	"github.com/np-inprove/server/internal/ent/user"
	"github.com/np-inprove/server/internal/ent/userpet"
)

// UserPetCreate is the builder for creating a UserPet entity.
type UserPetCreate struct {
	config
	mutation *UserPetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHungerPercentage sets the "hunger_percentage" field.
func (upc *UserPetCreate) SetHungerPercentage(f float64) *UserPetCreate {
	upc.mutation.SetHungerPercentage(f)
	return upc
}

// SetEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field.
func (upc *UserPetCreate) SetEnabledSvgGroupElementIds(m map[string]bool) *UserPetCreate {
	upc.mutation.SetEnabledSvgGroupElementIds(m)
	return upc
}

// SetPetID sets the "pet_id" field.
func (upc *UserPetCreate) SetPetID(i int) *UserPetCreate {
	upc.mutation.SetPetID(i)
	return upc
}

// SetUserID sets the "user_id" field.
func (upc *UserPetCreate) SetUserID(i int) *UserPetCreate {
	upc.mutation.SetUserID(i)
	return upc
}

// SetPet sets the "pet" edge to the Pet entity.
func (upc *UserPetCreate) SetPet(p *Pet) *UserPetCreate {
	return upc.SetPetID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (upc *UserPetCreate) SetUser(u *User) *UserPetCreate {
	return upc.SetUserID(u.ID)
}

// Mutation returns the UserPetMutation object of the builder.
func (upc *UserPetCreate) Mutation() *UserPetMutation {
	return upc.mutation
}

// Save creates the UserPet in the database.
func (upc *UserPetCreate) Save(ctx context.Context) (*UserPet, error) {
	upc.defaults()
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPetCreate) SaveX(ctx context.Context) *UserPet {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserPetCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserPetCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upc *UserPetCreate) defaults() {
	if _, ok := upc.mutation.EnabledSvgGroupElementIds(); !ok {
		v := userpet.DefaultEnabledSvgGroupElementIds
		upc.mutation.SetEnabledSvgGroupElementIds(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPetCreate) check() error {
	if _, ok := upc.mutation.HungerPercentage(); !ok {
		return &ValidationError{Name: "hunger_percentage", err: errors.New(`ent: missing required field "UserPet.hunger_percentage"`)}
	}
	if v, ok := upc.mutation.HungerPercentage(); ok {
		if err := userpet.HungerPercentageValidator(v); err != nil {
			return &ValidationError{Name: "hunger_percentage", err: fmt.Errorf(`ent: validator failed for field "UserPet.hunger_percentage": %w`, err)}
		}
	}
	if _, ok := upc.mutation.EnabledSvgGroupElementIds(); !ok {
		return &ValidationError{Name: "enabled_svg_group_element_ids", err: errors.New(`ent: missing required field "UserPet.enabled_svg_group_element_ids"`)}
	}
	if _, ok := upc.mutation.PetID(); !ok {
		return &ValidationError{Name: "pet_id", err: errors.New(`ent: missing required field "UserPet.pet_id"`)}
	}
	if _, ok := upc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserPet.user_id"`)}
	}
	if _, ok := upc.mutation.PetID(); !ok {
		return &ValidationError{Name: "pet", err: errors.New(`ent: missing required edge "UserPet.pet"`)}
	}
	if _, ok := upc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserPet.user"`)}
	}
	return nil
}

func (upc *UserPetCreate) sqlSave(ctx context.Context) (*UserPet, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (upc *UserPetCreate) createSpec() (*UserPet, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPet{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userpet.Table, nil)
	)
	_spec.OnConflict = upc.conflict
	if value, ok := upc.mutation.HungerPercentage(); ok {
		_spec.SetField(userpet.FieldHungerPercentage, field.TypeFloat64, value)
		_node.HungerPercentage = value
	}
	if value, ok := upc.mutation.EnabledSvgGroupElementIds(); ok {
		_spec.SetField(userpet.FieldEnabledSvgGroupElementIds, field.TypeJSON, value)
		_node.EnabledSvgGroupElementIds = value
	}
	if nodes := upc.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.PetTable,
			Columns: []string{userpet.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.UserTable,
			Columns: []string{userpet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPet.Create().
//		SetHungerPercentage(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPetUpsert) {
//			SetHungerPercentage(v+v).
//		}).
//		Exec(ctx)
func (upc *UserPetCreate) OnConflict(opts ...sql.ConflictOption) *UserPetUpsertOne {
	upc.conflict = opts
	return &UserPetUpsertOne{
		create: upc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upc *UserPetCreate) OnConflictColumns(columns ...string) *UserPetUpsertOne {
	upc.conflict = append(upc.conflict, sql.ConflictColumns(columns...))
	return &UserPetUpsertOne{
		create: upc,
	}
}

type (
	// UserPetUpsertOne is the builder for "upsert"-ing
	//  one UserPet node.
	UserPetUpsertOne struct {
		create *UserPetCreate
	}

	// UserPetUpsert is the "OnConflict" setter.
	UserPetUpsert struct {
		*sql.UpdateSet
	}
)

// SetHungerPercentage sets the "hunger_percentage" field.
func (u *UserPetUpsert) SetHungerPercentage(v float64) *UserPetUpsert {
	u.Set(userpet.FieldHungerPercentage, v)
	return u
}

// UpdateHungerPercentage sets the "hunger_percentage" field to the value that was provided on create.
func (u *UserPetUpsert) UpdateHungerPercentage() *UserPetUpsert {
	u.SetExcluded(userpet.FieldHungerPercentage)
	return u
}

// AddHungerPercentage adds v to the "hunger_percentage" field.
func (u *UserPetUpsert) AddHungerPercentage(v float64) *UserPetUpsert {
	u.Add(userpet.FieldHungerPercentage, v)
	return u
}

// SetEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field.
func (u *UserPetUpsert) SetEnabledSvgGroupElementIds(v map[string]bool) *UserPetUpsert {
	u.Set(userpet.FieldEnabledSvgGroupElementIds, v)
	return u
}

// UpdateEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field to the value that was provided on create.
func (u *UserPetUpsert) UpdateEnabledSvgGroupElementIds() *UserPetUpsert {
	u.SetExcluded(userpet.FieldEnabledSvgGroupElementIds)
	return u
}

// SetPetID sets the "pet_id" field.
func (u *UserPetUpsert) SetPetID(v int) *UserPetUpsert {
	u.Set(userpet.FieldPetID, v)
	return u
}

// UpdatePetID sets the "pet_id" field to the value that was provided on create.
func (u *UserPetUpsert) UpdatePetID() *UserPetUpsert {
	u.SetExcluded(userpet.FieldPetID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserPetUpsert) SetUserID(v int) *UserPetUpsert {
	u.Set(userpet.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPetUpsert) UpdateUserID() *UserPetUpsert {
	u.SetExcluded(userpet.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserPet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserPetUpsertOne) UpdateNewValues() *UserPetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPet.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserPetUpsertOne) Ignore() *UserPetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPetUpsertOne) DoNothing() *UserPetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPetCreate.OnConflict
// documentation for more info.
func (u *UserPetUpsertOne) Update(set func(*UserPetUpsert)) *UserPetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPetUpsert{UpdateSet: update})
	}))
	return u
}

// SetHungerPercentage sets the "hunger_percentage" field.
func (u *UserPetUpsertOne) SetHungerPercentage(v float64) *UserPetUpsertOne {
	return u.Update(func(s *UserPetUpsert) {
		s.SetHungerPercentage(v)
	})
}

// AddHungerPercentage adds v to the "hunger_percentage" field.
func (u *UserPetUpsertOne) AddHungerPercentage(v float64) *UserPetUpsertOne {
	return u.Update(func(s *UserPetUpsert) {
		s.AddHungerPercentage(v)
	})
}

// UpdateHungerPercentage sets the "hunger_percentage" field to the value that was provided on create.
func (u *UserPetUpsertOne) UpdateHungerPercentage() *UserPetUpsertOne {
	return u.Update(func(s *UserPetUpsert) {
		s.UpdateHungerPercentage()
	})
}

// SetEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field.
func (u *UserPetUpsertOne) SetEnabledSvgGroupElementIds(v map[string]bool) *UserPetUpsertOne {
	return u.Update(func(s *UserPetUpsert) {
		s.SetEnabledSvgGroupElementIds(v)
	})
}

// UpdateEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field to the value that was provided on create.
func (u *UserPetUpsertOne) UpdateEnabledSvgGroupElementIds() *UserPetUpsertOne {
	return u.Update(func(s *UserPetUpsert) {
		s.UpdateEnabledSvgGroupElementIds()
	})
}

// SetPetID sets the "pet_id" field.
func (u *UserPetUpsertOne) SetPetID(v int) *UserPetUpsertOne {
	return u.Update(func(s *UserPetUpsert) {
		s.SetPetID(v)
	})
}

// UpdatePetID sets the "pet_id" field to the value that was provided on create.
func (u *UserPetUpsertOne) UpdatePetID() *UserPetUpsertOne {
	return u.Update(func(s *UserPetUpsert) {
		s.UpdatePetID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserPetUpsertOne) SetUserID(v int) *UserPetUpsertOne {
	return u.Update(func(s *UserPetUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPetUpsertOne) UpdateUserID() *UserPetUpsertOne {
	return u.Update(func(s *UserPetUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *UserPetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserPetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// UserPetCreateBulk is the builder for creating many UserPet entities in bulk.
type UserPetCreateBulk struct {
	config
	builders []*UserPetCreate
	conflict []sql.ConflictOption
}

// Save creates the UserPet entities in the database.
func (upcb *UserPetCreateBulk) Save(ctx context.Context) ([]*UserPet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPet, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = upcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPetCreateBulk) SaveX(ctx context.Context) []*UserPet {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserPetCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserPetCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPetUpsert) {
//			SetHungerPercentage(v+v).
//		}).
//		Exec(ctx)
func (upcb *UserPetCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserPetUpsertBulk {
	upcb.conflict = opts
	return &UserPetUpsertBulk{
		create: upcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upcb *UserPetCreateBulk) OnConflictColumns(columns ...string) *UserPetUpsertBulk {
	upcb.conflict = append(upcb.conflict, sql.ConflictColumns(columns...))
	return &UserPetUpsertBulk{
		create: upcb,
	}
}

// UserPetUpsertBulk is the builder for "upsert"-ing
// a bulk of UserPet nodes.
type UserPetUpsertBulk struct {
	create *UserPetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserPet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserPetUpsertBulk) UpdateNewValues() *UserPetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserPetUpsertBulk) Ignore() *UserPetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPetUpsertBulk) DoNothing() *UserPetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPetCreateBulk.OnConflict
// documentation for more info.
func (u *UserPetUpsertBulk) Update(set func(*UserPetUpsert)) *UserPetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPetUpsert{UpdateSet: update})
	}))
	return u
}

// SetHungerPercentage sets the "hunger_percentage" field.
func (u *UserPetUpsertBulk) SetHungerPercentage(v float64) *UserPetUpsertBulk {
	return u.Update(func(s *UserPetUpsert) {
		s.SetHungerPercentage(v)
	})
}

// AddHungerPercentage adds v to the "hunger_percentage" field.
func (u *UserPetUpsertBulk) AddHungerPercentage(v float64) *UserPetUpsertBulk {
	return u.Update(func(s *UserPetUpsert) {
		s.AddHungerPercentage(v)
	})
}

// UpdateHungerPercentage sets the "hunger_percentage" field to the value that was provided on create.
func (u *UserPetUpsertBulk) UpdateHungerPercentage() *UserPetUpsertBulk {
	return u.Update(func(s *UserPetUpsert) {
		s.UpdateHungerPercentage()
	})
}

// SetEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field.
func (u *UserPetUpsertBulk) SetEnabledSvgGroupElementIds(v map[string]bool) *UserPetUpsertBulk {
	return u.Update(func(s *UserPetUpsert) {
		s.SetEnabledSvgGroupElementIds(v)
	})
}

// UpdateEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field to the value that was provided on create.
func (u *UserPetUpsertBulk) UpdateEnabledSvgGroupElementIds() *UserPetUpsertBulk {
	return u.Update(func(s *UserPetUpsert) {
		s.UpdateEnabledSvgGroupElementIds()
	})
}

// SetPetID sets the "pet_id" field.
func (u *UserPetUpsertBulk) SetPetID(v int) *UserPetUpsertBulk {
	return u.Update(func(s *UserPetUpsert) {
		s.SetPetID(v)
	})
}

// UpdatePetID sets the "pet_id" field to the value that was provided on create.
func (u *UserPetUpsertBulk) UpdatePetID() *UserPetUpsertBulk {
	return u.Update(func(s *UserPetUpsert) {
		s.UpdatePetID()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserPetUpsertBulk) SetUserID(v int) *UserPetUpsertBulk {
	return u.Update(func(s *UserPetUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPetUpsertBulk) UpdateUserID() *UserPetUpsertBulk {
	return u.Update(func(s *UserPetUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *UserPetUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserPetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserPetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
