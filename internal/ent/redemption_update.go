// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/accessory"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/redemption"
	"github.com/np-inprove/server/internal/ent/user"
	"github.com/np-inprove/server/internal/ent/voucher"
)

// RedemptionUpdate is the builder for updating Redemption entities.
type RedemptionUpdate struct {
	config
	hooks    []Hook
	mutation *RedemptionMutation
}

// Where appends a list predicates to the RedemptionUpdate builder.
func (ru *RedemptionUpdate) Where(ps ...predicate.Redemption) *RedemptionUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRedeemedAt sets the "redeemed_at" field.
func (ru *RedemptionUpdate) SetRedeemedAt(t time.Time) *RedemptionUpdate {
	ru.mutation.SetRedeemedAt(t)
	return ru
}

// SetVoucherID sets the "voucher" edge to the Voucher entity by ID.
func (ru *RedemptionUpdate) SetVoucherID(id int) *RedemptionUpdate {
	ru.mutation.SetVoucherID(id)
	return ru
}

// SetNillableVoucherID sets the "voucher" edge to the Voucher entity by ID if the given value is not nil.
func (ru *RedemptionUpdate) SetNillableVoucherID(id *int) *RedemptionUpdate {
	if id != nil {
		ru = ru.SetVoucherID(*id)
	}
	return ru
}

// SetVoucher sets the "voucher" edge to the Voucher entity.
func (ru *RedemptionUpdate) SetVoucher(v *Voucher) *RedemptionUpdate {
	return ru.SetVoucherID(v.ID)
}

// SetAccessoryID sets the "accessory" edge to the Accessory entity by ID.
func (ru *RedemptionUpdate) SetAccessoryID(id int) *RedemptionUpdate {
	ru.mutation.SetAccessoryID(id)
	return ru
}

// SetNillableAccessoryID sets the "accessory" edge to the Accessory entity by ID if the given value is not nil.
func (ru *RedemptionUpdate) SetNillableAccessoryID(id *int) *RedemptionUpdate {
	if id != nil {
		ru = ru.SetAccessoryID(*id)
	}
	return ru
}

// SetAccessory sets the "accessory" edge to the Accessory entity.
func (ru *RedemptionUpdate) SetAccessory(a *Accessory) *RedemptionUpdate {
	return ru.SetAccessoryID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *RedemptionUpdate) SetUserID(id int) *RedemptionUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *RedemptionUpdate) SetUser(u *User) *RedemptionUpdate {
	return ru.SetUserID(u.ID)
}

// Mutation returns the RedemptionMutation object of the builder.
func (ru *RedemptionUpdate) Mutation() *RedemptionMutation {
	return ru.mutation
}

// ClearVoucher clears the "voucher" edge to the Voucher entity.
func (ru *RedemptionUpdate) ClearVoucher() *RedemptionUpdate {
	ru.mutation.ClearVoucher()
	return ru
}

// ClearAccessory clears the "accessory" edge to the Accessory entity.
func (ru *RedemptionUpdate) ClearAccessory() *RedemptionUpdate {
	ru.mutation.ClearAccessory()
	return ru
}

// ClearUser clears the "user" edge to the User entity.
func (ru *RedemptionUpdate) ClearUser() *RedemptionUpdate {
	ru.mutation.ClearUser()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RedemptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RedemptionUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RedemptionUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RedemptionUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RedemptionUpdate) check() error {
	if _, ok := ru.mutation.UserID(); ru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Redemption.user"`)
	}
	return nil
}

func (ru *RedemptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(redemption.Table, redemption.Columns, sqlgraph.NewFieldSpec(redemption.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RedeemedAt(); ok {
		_spec.SetField(redemption.FieldRedeemedAt, field.TypeTime, value)
	}
	if ru.mutation.VoucherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.VoucherTable,
			Columns: []string{redemption.VoucherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.VoucherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.VoucherTable,
			Columns: []string{redemption.VoucherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AccessoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.AccessoryTable,
			Columns: []string{redemption.AccessoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AccessoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.AccessoryTable,
			Columns: []string{redemption.AccessoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   redemption.UserTable,
			Columns: []string{redemption.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   redemption.UserTable,
			Columns: []string{redemption.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{redemption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RedemptionUpdateOne is the builder for updating a single Redemption entity.
type RedemptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RedemptionMutation
}

// SetRedeemedAt sets the "redeemed_at" field.
func (ruo *RedemptionUpdateOne) SetRedeemedAt(t time.Time) *RedemptionUpdateOne {
	ruo.mutation.SetRedeemedAt(t)
	return ruo
}

// SetVoucherID sets the "voucher" edge to the Voucher entity by ID.
func (ruo *RedemptionUpdateOne) SetVoucherID(id int) *RedemptionUpdateOne {
	ruo.mutation.SetVoucherID(id)
	return ruo
}

// SetNillableVoucherID sets the "voucher" edge to the Voucher entity by ID if the given value is not nil.
func (ruo *RedemptionUpdateOne) SetNillableVoucherID(id *int) *RedemptionUpdateOne {
	if id != nil {
		ruo = ruo.SetVoucherID(*id)
	}
	return ruo
}

// SetVoucher sets the "voucher" edge to the Voucher entity.
func (ruo *RedemptionUpdateOne) SetVoucher(v *Voucher) *RedemptionUpdateOne {
	return ruo.SetVoucherID(v.ID)
}

// SetAccessoryID sets the "accessory" edge to the Accessory entity by ID.
func (ruo *RedemptionUpdateOne) SetAccessoryID(id int) *RedemptionUpdateOne {
	ruo.mutation.SetAccessoryID(id)
	return ruo
}

// SetNillableAccessoryID sets the "accessory" edge to the Accessory entity by ID if the given value is not nil.
func (ruo *RedemptionUpdateOne) SetNillableAccessoryID(id *int) *RedemptionUpdateOne {
	if id != nil {
		ruo = ruo.SetAccessoryID(*id)
	}
	return ruo
}

// SetAccessory sets the "accessory" edge to the Accessory entity.
func (ruo *RedemptionUpdateOne) SetAccessory(a *Accessory) *RedemptionUpdateOne {
	return ruo.SetAccessoryID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *RedemptionUpdateOne) SetUserID(id int) *RedemptionUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *RedemptionUpdateOne) SetUser(u *User) *RedemptionUpdateOne {
	return ruo.SetUserID(u.ID)
}

// Mutation returns the RedemptionMutation object of the builder.
func (ruo *RedemptionUpdateOne) Mutation() *RedemptionMutation {
	return ruo.mutation
}

// ClearVoucher clears the "voucher" edge to the Voucher entity.
func (ruo *RedemptionUpdateOne) ClearVoucher() *RedemptionUpdateOne {
	ruo.mutation.ClearVoucher()
	return ruo
}

// ClearAccessory clears the "accessory" edge to the Accessory entity.
func (ruo *RedemptionUpdateOne) ClearAccessory() *RedemptionUpdateOne {
	ruo.mutation.ClearAccessory()
	return ruo
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *RedemptionUpdateOne) ClearUser() *RedemptionUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// Where appends a list predicates to the RedemptionUpdate builder.
func (ruo *RedemptionUpdateOne) Where(ps ...predicate.Redemption) *RedemptionUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RedemptionUpdateOne) Select(field string, fields ...string) *RedemptionUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Redemption entity.
func (ruo *RedemptionUpdateOne) Save(ctx context.Context) (*Redemption, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RedemptionUpdateOne) SaveX(ctx context.Context) *Redemption {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RedemptionUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RedemptionUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RedemptionUpdateOne) check() error {
	if _, ok := ruo.mutation.UserID(); ruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Redemption.user"`)
	}
	return nil
}

func (ruo *RedemptionUpdateOne) sqlSave(ctx context.Context) (_node *Redemption, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(redemption.Table, redemption.Columns, sqlgraph.NewFieldSpec(redemption.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Redemption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, redemption.FieldID)
		for _, f := range fields {
			if !redemption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != redemption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.RedeemedAt(); ok {
		_spec.SetField(redemption.FieldRedeemedAt, field.TypeTime, value)
	}
	if ruo.mutation.VoucherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.VoucherTable,
			Columns: []string{redemption.VoucherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.VoucherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.VoucherTable,
			Columns: []string{redemption.VoucherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AccessoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.AccessoryTable,
			Columns: []string{redemption.AccessoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AccessoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   redemption.AccessoryTable,
			Columns: []string{redemption.AccessoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   redemption.UserTable,
			Columns: []string{redemption.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   redemption.UserTable,
			Columns: []string{redemption.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Redemption{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{redemption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
