// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/milestone"
	"github.com/np-inprove/server/internal/ent/studyplan"
)

// Milestone is the model entity for the Milestone schema.
type Milestone struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the milestone
	Name string `json:"name,omitempty"`
	// Time when the milestone is should be completed
	TargetCompletionTime time.Time `json:"target_completion_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MilestoneQuery when eager-loading is set.
	Edges                 MilestoneEdges `json:"edges"`
	study_plan_milestones *int
	selectValues          sql.SelectValues
}

// MilestoneEdges holds the relations/edges for other nodes in the graph.
type MilestoneEdges struct {
	// StudyPlan holds the value of the study_plan edge.
	StudyPlan *StudyPlan `json:"study_plan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StudyPlanOrErr returns the StudyPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MilestoneEdges) StudyPlanOrErr() (*StudyPlan, error) {
	if e.loadedTypes[0] {
		if e.StudyPlan == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: studyplan.Label}
		}
		return e.StudyPlan, nil
	}
	return nil, &NotLoadedError{edge: "study_plan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Milestone) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case milestone.FieldID:
			values[i] = new(sql.NullInt64)
		case milestone.FieldName:
			values[i] = new(sql.NullString)
		case milestone.FieldTargetCompletionTime:
			values[i] = new(sql.NullTime)
		case milestone.ForeignKeys[0]: // study_plan_milestones
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Milestone fields.
func (m *Milestone) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case milestone.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case milestone.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case milestone.FieldTargetCompletionTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field target_completion_time", values[i])
			} else if value.Valid {
				m.TargetCompletionTime = value.Time
			}
		case milestone.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field study_plan_milestones", value)
			} else if value.Valid {
				m.study_plan_milestones = new(int)
				*m.study_plan_milestones = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Milestone.
// This includes values selected through modifiers, order, etc.
func (m *Milestone) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryStudyPlan queries the "study_plan" edge of the Milestone entity.
func (m *Milestone) QueryStudyPlan() *StudyPlanQuery {
	return NewMilestoneClient(m.config).QueryStudyPlan(m)
}

// Update returns a builder for updating this Milestone.
// Note that you need to call Milestone.Unwrap() before calling this method if this Milestone
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Milestone) Update() *MilestoneUpdateOne {
	return NewMilestoneClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Milestone entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Milestone) Unwrap() *Milestone {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Milestone is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Milestone) String() string {
	var builder strings.Builder
	builder.WriteString("Milestone(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("target_completion_time=")
	builder.WriteString(m.TargetCompletionTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Milestones is a parsable slice of Milestone.
type Milestones []*Milestone
