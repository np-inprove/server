// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/groupinvitelink"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// GroupInviteLinkDelete is the builder for deleting a GroupInviteLink entity.
type GroupInviteLinkDelete struct {
	config
	hooks    []Hook
	mutation *GroupInviteLinkMutation
}

// Where appends a list predicates to the GroupInviteLinkDelete builder.
func (gild *GroupInviteLinkDelete) Where(ps ...predicate.GroupInviteLink) *GroupInviteLinkDelete {
	gild.mutation.Where(ps...)
	return gild
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gild *GroupInviteLinkDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gild.sqlExec, gild.mutation, gild.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gild *GroupInviteLinkDelete) ExecX(ctx context.Context) int {
	n, err := gild.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gild *GroupInviteLinkDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(groupinvitelink.Table, sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt))
	if ps := gild.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gild.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gild.mutation.done = true
	return affected, err
}

// GroupInviteLinkDeleteOne is the builder for deleting a single GroupInviteLink entity.
type GroupInviteLinkDeleteOne struct {
	gild *GroupInviteLinkDelete
}

// Where appends a list predicates to the GroupInviteLinkDelete builder.
func (gildo *GroupInviteLinkDeleteOne) Where(ps ...predicate.GroupInviteLink) *GroupInviteLinkDeleteOne {
	gildo.gild.mutation.Where(ps...)
	return gildo
}

// Exec executes the deletion query.
func (gildo *GroupInviteLinkDeleteOne) Exec(ctx context.Context) error {
	n, err := gildo.gild.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{groupinvitelink.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gildo *GroupInviteLinkDeleteOne) ExecX(ctx context.Context) {
	if err := gildo.Exec(ctx); err != nil {
		panic(err)
	}
}
