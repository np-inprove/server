// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/deadline"
	entgroup "github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/user"
)

// DeadlineCreate is the builder for creating a Deadline entity.
type DeadlineCreate struct {
	config
	mutation *DeadlineMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (dc *DeadlineCreate) SetName(s string) *DeadlineCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetDueTime sets the "due_time" field.
func (dc *DeadlineCreate) SetDueTime(t time.Time) *DeadlineCreate {
	dc.mutation.SetDueTime(t)
	return dc
}

// SetNillableDueTime sets the "due_time" field if the given value is not nil.
func (dc *DeadlineCreate) SetNillableDueTime(t *time.Time) *DeadlineCreate {
	if t != nil {
		dc.SetDueTime(*t)
	}
	return dc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (dc *DeadlineCreate) SetAuthorID(id int) *DeadlineCreate {
	dc.mutation.SetAuthorID(id)
	return dc
}

// SetAuthor sets the "author" edge to the User entity.
func (dc *DeadlineCreate) SetAuthor(u *User) *DeadlineCreate {
	return dc.SetAuthorID(u.ID)
}

// AddVotedUserIDs adds the "voted_users" edge to the User entity by IDs.
func (dc *DeadlineCreate) AddVotedUserIDs(ids ...int) *DeadlineCreate {
	dc.mutation.AddVotedUserIDs(ids...)
	return dc
}

// AddVotedUsers adds the "voted_users" edges to the User entity.
func (dc *DeadlineCreate) AddVotedUsers(u ...*User) *DeadlineCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dc.AddVotedUserIDs(ids...)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (dc *DeadlineCreate) SetGroupID(id int) *DeadlineCreate {
	dc.mutation.SetGroupID(id)
	return dc
}

// SetGroup sets the "group" edge to the Group entity.
func (dc *DeadlineCreate) SetGroup(g *Group) *DeadlineCreate {
	return dc.SetGroupID(g.ID)
}

// Mutation returns the DeadlineMutation object of the builder.
func (dc *DeadlineCreate) Mutation() *DeadlineMutation {
	return dc.mutation
}

// Save creates the Deadline in the database.
func (dc *DeadlineCreate) Save(ctx context.Context) (*Deadline, error) {
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeadlineCreate) SaveX(ctx context.Context) *Deadline {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeadlineCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeadlineCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeadlineCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Deadline.name"`)}
	}
	if v, ok := dc.mutation.Name(); ok {
		if err := deadline.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Deadline.name": %w`, err)}
		}
	}
	if _, ok := dc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "Deadline.author"`)}
	}
	if _, ok := dc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "Deadline.group"`)}
	}
	return nil
}

func (dc *DeadlineCreate) sqlSave(ctx context.Context) (*Deadline, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeadlineCreate) createSpec() (*Deadline, *sqlgraph.CreateSpec) {
	var (
		_node = &Deadline{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(deadline.Table, sqlgraph.NewFieldSpec(deadline.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dc.conflict
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(deadline.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.DueTime(); ok {
		_spec.SetField(deadline.FieldDueTime, field.TypeTime, value)
		_node.DueTime = &value
	}
	if nodes := dc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deadline.AuthorTable,
			Columns: []string{deadline.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deadline_author = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.VotedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deadline.VotedUsersTable,
			Columns: deadline.VotedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deadline.GroupTable,
			Columns: []string{deadline.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_deadlines = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Deadline.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeadlineUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dc *DeadlineCreate) OnConflict(opts ...sql.ConflictOption) *DeadlineUpsertOne {
	dc.conflict = opts
	return &DeadlineUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Deadline.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DeadlineCreate) OnConflictColumns(columns ...string) *DeadlineUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DeadlineUpsertOne{
		create: dc,
	}
}

type (
	// DeadlineUpsertOne is the builder for "upsert"-ing
	//  one Deadline node.
	DeadlineUpsertOne struct {
		create *DeadlineCreate
	}

	// DeadlineUpsert is the "OnConflict" setter.
	DeadlineUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *DeadlineUpsert) SetName(v string) *DeadlineUpsert {
	u.Set(deadline.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeadlineUpsert) UpdateName() *DeadlineUpsert {
	u.SetExcluded(deadline.FieldName)
	return u
}

// SetDueTime sets the "due_time" field.
func (u *DeadlineUpsert) SetDueTime(v time.Time) *DeadlineUpsert {
	u.Set(deadline.FieldDueTime, v)
	return u
}

// UpdateDueTime sets the "due_time" field to the value that was provided on create.
func (u *DeadlineUpsert) UpdateDueTime() *DeadlineUpsert {
	u.SetExcluded(deadline.FieldDueTime)
	return u
}

// ClearDueTime clears the value of the "due_time" field.
func (u *DeadlineUpsert) ClearDueTime() *DeadlineUpsert {
	u.SetNull(deadline.FieldDueTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Deadline.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DeadlineUpsertOne) UpdateNewValues() *DeadlineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Deadline.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeadlineUpsertOne) Ignore() *DeadlineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeadlineUpsertOne) DoNothing() *DeadlineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeadlineCreate.OnConflict
// documentation for more info.
func (u *DeadlineUpsertOne) Update(set func(*DeadlineUpsert)) *DeadlineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeadlineUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DeadlineUpsertOne) SetName(v string) *DeadlineUpsertOne {
	return u.Update(func(s *DeadlineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeadlineUpsertOne) UpdateName() *DeadlineUpsertOne {
	return u.Update(func(s *DeadlineUpsert) {
		s.UpdateName()
	})
}

// SetDueTime sets the "due_time" field.
func (u *DeadlineUpsertOne) SetDueTime(v time.Time) *DeadlineUpsertOne {
	return u.Update(func(s *DeadlineUpsert) {
		s.SetDueTime(v)
	})
}

// UpdateDueTime sets the "due_time" field to the value that was provided on create.
func (u *DeadlineUpsertOne) UpdateDueTime() *DeadlineUpsertOne {
	return u.Update(func(s *DeadlineUpsert) {
		s.UpdateDueTime()
	})
}

// ClearDueTime clears the value of the "due_time" field.
func (u *DeadlineUpsertOne) ClearDueTime() *DeadlineUpsertOne {
	return u.Update(func(s *DeadlineUpsert) {
		s.ClearDueTime()
	})
}

// Exec executes the query.
func (u *DeadlineUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeadlineCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeadlineUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeadlineUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeadlineUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeadlineCreateBulk is the builder for creating many Deadline entities in bulk.
type DeadlineCreateBulk struct {
	config
	builders []*DeadlineCreate
	conflict []sql.ConflictOption
}

// Save creates the Deadline entities in the database.
func (dcb *DeadlineCreateBulk) Save(ctx context.Context) ([]*Deadline, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Deadline, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeadlineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeadlineCreateBulk) SaveX(ctx context.Context) []*Deadline {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeadlineCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeadlineCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Deadline.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeadlineUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (dcb *DeadlineCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeadlineUpsertBulk {
	dcb.conflict = opts
	return &DeadlineUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Deadline.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DeadlineCreateBulk) OnConflictColumns(columns ...string) *DeadlineUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DeadlineUpsertBulk{
		create: dcb,
	}
}

// DeadlineUpsertBulk is the builder for "upsert"-ing
// a bulk of Deadline nodes.
type DeadlineUpsertBulk struct {
	create *DeadlineCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Deadline.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DeadlineUpsertBulk) UpdateNewValues() *DeadlineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Deadline.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeadlineUpsertBulk) Ignore() *DeadlineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeadlineUpsertBulk) DoNothing() *DeadlineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeadlineCreateBulk.OnConflict
// documentation for more info.
func (u *DeadlineUpsertBulk) Update(set func(*DeadlineUpsert)) *DeadlineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeadlineUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *DeadlineUpsertBulk) SetName(v string) *DeadlineUpsertBulk {
	return u.Update(func(s *DeadlineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeadlineUpsertBulk) UpdateName() *DeadlineUpsertBulk {
	return u.Update(func(s *DeadlineUpsert) {
		s.UpdateName()
	})
}

// SetDueTime sets the "due_time" field.
func (u *DeadlineUpsertBulk) SetDueTime(v time.Time) *DeadlineUpsertBulk {
	return u.Update(func(s *DeadlineUpsert) {
		s.SetDueTime(v)
	})
}

// UpdateDueTime sets the "due_time" field to the value that was provided on create.
func (u *DeadlineUpsertBulk) UpdateDueTime() *DeadlineUpsertBulk {
	return u.Update(func(s *DeadlineUpsert) {
		s.UpdateDueTime()
	})
}

// ClearDueTime clears the value of the "due_time" field.
func (u *DeadlineUpsertBulk) ClearDueTime() *DeadlineUpsertBulk {
	return u.Update(func(s *DeadlineUpsert) {
		s.ClearDueTime()
	})
}

// Exec executes the query.
func (u *DeadlineUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeadlineCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeadlineCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeadlineUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
