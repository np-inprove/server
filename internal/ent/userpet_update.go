// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/pet"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/user"
	"github.com/np-inprove/server/internal/ent/userpet"
)

// UserPetUpdate is the builder for updating UserPet entities.
type UserPetUpdate struct {
	config
	hooks    []Hook
	mutation *UserPetMutation
}

// Where appends a list predicates to the UserPetUpdate builder.
func (upu *UserPetUpdate) Where(ps ...predicate.UserPet) *UserPetUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetHungerPercentage sets the "hunger_percentage" field.
func (upu *UserPetUpdate) SetHungerPercentage(f float64) *UserPetUpdate {
	upu.mutation.ResetHungerPercentage()
	upu.mutation.SetHungerPercentage(f)
	return upu
}

// AddHungerPercentage adds f to the "hunger_percentage" field.
func (upu *UserPetUpdate) AddHungerPercentage(f float64) *UserPetUpdate {
	upu.mutation.AddHungerPercentage(f)
	return upu
}

// SetEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field.
func (upu *UserPetUpdate) SetEnabledSvgGroupElementIds(m map[string]bool) *UserPetUpdate {
	upu.mutation.SetEnabledSvgGroupElementIds(m)
	return upu
}

// SetPetID sets the "pet_id" field.
func (upu *UserPetUpdate) SetPetID(i int) *UserPetUpdate {
	upu.mutation.SetPetID(i)
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserPetUpdate) SetUserID(i int) *UserPetUpdate {
	upu.mutation.SetUserID(i)
	return upu
}

// SetPet sets the "pet" edge to the Pet entity.
func (upu *UserPetUpdate) SetPet(p *Pet) *UserPetUpdate {
	return upu.SetPetID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (upu *UserPetUpdate) SetUser(u *User) *UserPetUpdate {
	return upu.SetUserID(u.ID)
}

// Mutation returns the UserPetMutation object of the builder.
func (upu *UserPetUpdate) Mutation() *UserPetMutation {
	return upu.mutation
}

// ClearPet clears the "pet" edge to the Pet entity.
func (upu *UserPetUpdate) ClearPet() *UserPetUpdate {
	upu.mutation.ClearPet()
	return upu
}

// ClearUser clears the "user" edge to the User entity.
func (upu *UserPetUpdate) ClearUser() *UserPetUpdate {
	upu.mutation.ClearUser()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPetUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPetUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPetUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserPetUpdate) check() error {
	if v, ok := upu.mutation.HungerPercentage(); ok {
		if err := userpet.HungerPercentageValidator(v); err != nil {
			return &ValidationError{Name: "hunger_percentage", err: fmt.Errorf(`ent: validator failed for field "UserPet.hunger_percentage": %w`, err)}
		}
	}
	if _, ok := upu.mutation.PetID(); upu.mutation.PetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPet.pet"`)
	}
	if _, ok := upu.mutation.UserID(); upu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPet.user"`)
	}
	return nil
}

func (upu *UserPetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpet.Table, userpet.Columns, sqlgraph.NewFieldSpec(userpet.FieldPetID, field.TypeInt), sqlgraph.NewFieldSpec(userpet.FieldUserID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.HungerPercentage(); ok {
		_spec.SetField(userpet.FieldHungerPercentage, field.TypeFloat64, value)
	}
	if value, ok := upu.mutation.AddedHungerPercentage(); ok {
		_spec.AddField(userpet.FieldHungerPercentage, field.TypeFloat64, value)
	}
	if value, ok := upu.mutation.EnabledSvgGroupElementIds(); ok {
		_spec.SetField(userpet.FieldEnabledSvgGroupElementIds, field.TypeJSON, value)
	}
	if upu.mutation.PetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.PetTable,
			Columns: []string{userpet.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.PetTable,
			Columns: []string{userpet.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.UserTable,
			Columns: []string{userpet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.UserTable,
			Columns: []string{userpet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPetUpdateOne is the builder for updating a single UserPet entity.
type UserPetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPetMutation
}

// SetHungerPercentage sets the "hunger_percentage" field.
func (upuo *UserPetUpdateOne) SetHungerPercentage(f float64) *UserPetUpdateOne {
	upuo.mutation.ResetHungerPercentage()
	upuo.mutation.SetHungerPercentage(f)
	return upuo
}

// AddHungerPercentage adds f to the "hunger_percentage" field.
func (upuo *UserPetUpdateOne) AddHungerPercentage(f float64) *UserPetUpdateOne {
	upuo.mutation.AddHungerPercentage(f)
	return upuo
}

// SetEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field.
func (upuo *UserPetUpdateOne) SetEnabledSvgGroupElementIds(m map[string]bool) *UserPetUpdateOne {
	upuo.mutation.SetEnabledSvgGroupElementIds(m)
	return upuo
}

// SetPetID sets the "pet_id" field.
func (upuo *UserPetUpdateOne) SetPetID(i int) *UserPetUpdateOne {
	upuo.mutation.SetPetID(i)
	return upuo
}

// SetUserID sets the "user_id" field.
func (upuo *UserPetUpdateOne) SetUserID(i int) *UserPetUpdateOne {
	upuo.mutation.SetUserID(i)
	return upuo
}

// SetPet sets the "pet" edge to the Pet entity.
func (upuo *UserPetUpdateOne) SetPet(p *Pet) *UserPetUpdateOne {
	return upuo.SetPetID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (upuo *UserPetUpdateOne) SetUser(u *User) *UserPetUpdateOne {
	return upuo.SetUserID(u.ID)
}

// Mutation returns the UserPetMutation object of the builder.
func (upuo *UserPetUpdateOne) Mutation() *UserPetMutation {
	return upuo.mutation
}

// ClearPet clears the "pet" edge to the Pet entity.
func (upuo *UserPetUpdateOne) ClearPet() *UserPetUpdateOne {
	upuo.mutation.ClearPet()
	return upuo
}

// ClearUser clears the "user" edge to the User entity.
func (upuo *UserPetUpdateOne) ClearUser() *UserPetUpdateOne {
	upuo.mutation.ClearUser()
	return upuo
}

// Where appends a list predicates to the UserPetUpdate builder.
func (upuo *UserPetUpdateOne) Where(ps ...predicate.UserPet) *UserPetUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPetUpdateOne) Select(field string, fields ...string) *UserPetUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPet entity.
func (upuo *UserPetUpdateOne) Save(ctx context.Context) (*UserPet, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPetUpdateOne) SaveX(ctx context.Context) *UserPet {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPetUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPetUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserPetUpdateOne) check() error {
	if v, ok := upuo.mutation.HungerPercentage(); ok {
		if err := userpet.HungerPercentageValidator(v); err != nil {
			return &ValidationError{Name: "hunger_percentage", err: fmt.Errorf(`ent: validator failed for field "UserPet.hunger_percentage": %w`, err)}
		}
	}
	if _, ok := upuo.mutation.PetID(); upuo.mutation.PetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPet.pet"`)
	}
	if _, ok := upuo.mutation.UserID(); upuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserPet.user"`)
	}
	return nil
}

func (upuo *UserPetUpdateOne) sqlSave(ctx context.Context) (_node *UserPet, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpet.Table, userpet.Columns, sqlgraph.NewFieldSpec(userpet.FieldPetID, field.TypeInt), sqlgraph.NewFieldSpec(userpet.FieldUserID, field.TypeInt))
	if id, ok := upuo.mutation.PetID(); !ok {
		return nil, &ValidationError{Name: "pet_id", err: errors.New(`ent: missing "UserPet.pet_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := upuo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "UserPet.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !userpet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.HungerPercentage(); ok {
		_spec.SetField(userpet.FieldHungerPercentage, field.TypeFloat64, value)
	}
	if value, ok := upuo.mutation.AddedHungerPercentage(); ok {
		_spec.AddField(userpet.FieldHungerPercentage, field.TypeFloat64, value)
	}
	if value, ok := upuo.mutation.EnabledSvgGroupElementIds(); ok {
		_spec.SetField(userpet.FieldEnabledSvgGroupElementIds, field.TypeJSON, value)
	}
	if upuo.mutation.PetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.PetTable,
			Columns: []string{userpet.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.PetTable,
			Columns: []string{userpet.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.UserTable,
			Columns: []string{userpet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpet.UserTable,
			Columns: []string{userpet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPet{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
