// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	entinstitution "github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/institutioninvitelink"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/entity/institution"
)

// InstitutionInviteLinkUpdate is the builder for updating InstitutionInviteLink entities.
type InstitutionInviteLinkUpdate struct {
	config
	hooks    []Hook
	mutation *InstitutionInviteLinkMutation
}

// Where appends a list predicates to the InstitutionInviteLinkUpdate builder.
func (iilu *InstitutionInviteLinkUpdate) Where(ps ...predicate.InstitutionInviteLink) *InstitutionInviteLinkUpdate {
	iilu.mutation.Where(ps...)
	return iilu
}

// SetCode sets the "code" field.
func (iilu *InstitutionInviteLinkUpdate) SetCode(s string) *InstitutionInviteLinkUpdate {
	iilu.mutation.SetCode(s)
	return iilu
}

// SetRole sets the "role" field.
func (iilu *InstitutionInviteLinkUpdate) SetRole(i institution.Role) *InstitutionInviteLinkUpdate {
	iilu.mutation.SetRole(i)
	return iilu
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (iilu *InstitutionInviteLinkUpdate) SetInstitutionID(id int) *InstitutionInviteLinkUpdate {
	iilu.mutation.SetInstitutionID(id)
	return iilu
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (iilu *InstitutionInviteLinkUpdate) SetInstitution(i *Institution) *InstitutionInviteLinkUpdate {
	return iilu.SetInstitutionID(i.ID)
}

// Mutation returns the InstitutionInviteLinkMutation object of the builder.
func (iilu *InstitutionInviteLinkUpdate) Mutation() *InstitutionInviteLinkMutation {
	return iilu.mutation
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (iilu *InstitutionInviteLinkUpdate) ClearInstitution() *InstitutionInviteLinkUpdate {
	iilu.mutation.ClearInstitution()
	return iilu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iilu *InstitutionInviteLinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iilu.sqlSave, iilu.mutation, iilu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iilu *InstitutionInviteLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := iilu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iilu *InstitutionInviteLinkUpdate) Exec(ctx context.Context) error {
	_, err := iilu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iilu *InstitutionInviteLinkUpdate) ExecX(ctx context.Context) {
	if err := iilu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iilu *InstitutionInviteLinkUpdate) check() error {
	if v, ok := iilu.mutation.Code(); ok {
		if err := institutioninvitelink.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "InstitutionInviteLink.code": %w`, err)}
		}
	}
	if v, ok := iilu.mutation.Role(); ok {
		if err := institutioninvitelink.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "InstitutionInviteLink.role": %w`, err)}
		}
	}
	if _, ok := iilu.mutation.InstitutionID(); iilu.mutation.InstitutionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InstitutionInviteLink.institution"`)
	}
	return nil
}

func (iilu *InstitutionInviteLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iilu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(institutioninvitelink.Table, institutioninvitelink.Columns, sqlgraph.NewFieldSpec(institutioninvitelink.FieldID, field.TypeInt))
	if ps := iilu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iilu.mutation.Code(); ok {
		_spec.SetField(institutioninvitelink.FieldCode, field.TypeString, value)
	}
	if value, ok := iilu.mutation.Role(); ok {
		_spec.SetField(institutioninvitelink.FieldRole, field.TypeEnum, value)
	}
	if iilu.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   institutioninvitelink.InstitutionTable,
			Columns: []string{institutioninvitelink.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entinstitution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iilu.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   institutioninvitelink.InstitutionTable,
			Columns: []string{institutioninvitelink.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entinstitution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iilu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{institutioninvitelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iilu.mutation.done = true
	return n, nil
}

// InstitutionInviteLinkUpdateOne is the builder for updating a single InstitutionInviteLink entity.
type InstitutionInviteLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstitutionInviteLinkMutation
}

// SetCode sets the "code" field.
func (iiluo *InstitutionInviteLinkUpdateOne) SetCode(s string) *InstitutionInviteLinkUpdateOne {
	iiluo.mutation.SetCode(s)
	return iiluo
}

// SetRole sets the "role" field.
func (iiluo *InstitutionInviteLinkUpdateOne) SetRole(i institution.Role) *InstitutionInviteLinkUpdateOne {
	iiluo.mutation.SetRole(i)
	return iiluo
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (iiluo *InstitutionInviteLinkUpdateOne) SetInstitutionID(id int) *InstitutionInviteLinkUpdateOne {
	iiluo.mutation.SetInstitutionID(id)
	return iiluo
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (iiluo *InstitutionInviteLinkUpdateOne) SetInstitution(i *Institution) *InstitutionInviteLinkUpdateOne {
	return iiluo.SetInstitutionID(i.ID)
}

// Mutation returns the InstitutionInviteLinkMutation object of the builder.
func (iiluo *InstitutionInviteLinkUpdateOne) Mutation() *InstitutionInviteLinkMutation {
	return iiluo.mutation
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (iiluo *InstitutionInviteLinkUpdateOne) ClearInstitution() *InstitutionInviteLinkUpdateOne {
	iiluo.mutation.ClearInstitution()
	return iiluo
}

// Where appends a list predicates to the InstitutionInviteLinkUpdate builder.
func (iiluo *InstitutionInviteLinkUpdateOne) Where(ps ...predicate.InstitutionInviteLink) *InstitutionInviteLinkUpdateOne {
	iiluo.mutation.Where(ps...)
	return iiluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiluo *InstitutionInviteLinkUpdateOne) Select(field string, fields ...string) *InstitutionInviteLinkUpdateOne {
	iiluo.fields = append([]string{field}, fields...)
	return iiluo
}

// Save executes the query and returns the updated InstitutionInviteLink entity.
func (iiluo *InstitutionInviteLinkUpdateOne) Save(ctx context.Context) (*InstitutionInviteLink, error) {
	return withHooks(ctx, iiluo.sqlSave, iiluo.mutation, iiluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiluo *InstitutionInviteLinkUpdateOne) SaveX(ctx context.Context) *InstitutionInviteLink {
	node, err := iiluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiluo *InstitutionInviteLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := iiluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiluo *InstitutionInviteLinkUpdateOne) ExecX(ctx context.Context) {
	if err := iiluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iiluo *InstitutionInviteLinkUpdateOne) check() error {
	if v, ok := iiluo.mutation.Code(); ok {
		if err := institutioninvitelink.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "InstitutionInviteLink.code": %w`, err)}
		}
	}
	if v, ok := iiluo.mutation.Role(); ok {
		if err := institutioninvitelink.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "InstitutionInviteLink.role": %w`, err)}
		}
	}
	if _, ok := iiluo.mutation.InstitutionID(); iiluo.mutation.InstitutionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InstitutionInviteLink.institution"`)
	}
	return nil
}

func (iiluo *InstitutionInviteLinkUpdateOne) sqlSave(ctx context.Context) (_node *InstitutionInviteLink, err error) {
	if err := iiluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(institutioninvitelink.Table, institutioninvitelink.Columns, sqlgraph.NewFieldSpec(institutioninvitelink.FieldID, field.TypeInt))
	id, ok := iiluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InstitutionInviteLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iiluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, institutioninvitelink.FieldID)
		for _, f := range fields {
			if !institutioninvitelink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != institutioninvitelink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiluo.mutation.Code(); ok {
		_spec.SetField(institutioninvitelink.FieldCode, field.TypeString, value)
	}
	if value, ok := iiluo.mutation.Role(); ok {
		_spec.SetField(institutioninvitelink.FieldRole, field.TypeEnum, value)
	}
	if iiluo.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   institutioninvitelink.InstitutionTable,
			Columns: []string{institutioninvitelink.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entinstitution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiluo.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   institutioninvitelink.InstitutionTable,
			Columns: []string{institutioninvitelink.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entinstitution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InstitutionInviteLink{config: iiluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{institutioninvitelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iiluo.mutation.done = true
	return _node, nil
}
