// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/user"
)

// InstitutionUpdate is the builder for updating Institution entities.
type InstitutionUpdate struct {
	config
	hooks    []Hook
	mutation *InstitutionMutation
}

// Where appends a list predicates to the InstitutionUpdate builder.
func (iu *InstitutionUpdate) Where(ps ...predicate.Institution) *InstitutionUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *InstitutionUpdate) SetName(s string) *InstitutionUpdate {
	iu.mutation.SetName(s)
	return iu
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (iu *InstitutionUpdate) AddAdminIDs(ids ...int) *InstitutionUpdate {
	iu.mutation.AddAdminIDs(ids...)
	return iu
}

// AddAdmins adds the "admins" edges to the User entity.
func (iu *InstitutionUpdate) AddAdmins(u ...*User) *InstitutionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iu.AddAdminIDs(ids...)
}

// Mutation returns the InstitutionMutation object of the builder.
func (iu *InstitutionUpdate) Mutation() *InstitutionMutation {
	return iu.mutation
}

// ClearAdmins clears all "admins" edges to the User entity.
func (iu *InstitutionUpdate) ClearAdmins() *InstitutionUpdate {
	iu.mutation.ClearAdmins()
	return iu
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (iu *InstitutionUpdate) RemoveAdminIDs(ids ...int) *InstitutionUpdate {
	iu.mutation.RemoveAdminIDs(ids...)
	return iu
}

// RemoveAdmins removes "admins" edges to User entities.
func (iu *InstitutionUpdate) RemoveAdmins(u ...*User) *InstitutionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iu.RemoveAdminIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstitutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstitutionUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstitutionUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstitutionUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InstitutionUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := institution.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Institution.name": %w`, err)}
		}
	}
	return nil
}

func (iu *InstitutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(institution.Table, institution.Columns, sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(institution.FieldName, field.TypeString, value)
	}
	if iu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   institution.AdminsTable,
			Columns: institution.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !iu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   institution.AdminsTable,
			Columns: institution.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   institution.AdminsTable,
			Columns: institution.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{institution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InstitutionUpdateOne is the builder for updating a single Institution entity.
type InstitutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstitutionMutation
}

// SetName sets the "name" field.
func (iuo *InstitutionUpdateOne) SetName(s string) *InstitutionUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (iuo *InstitutionUpdateOne) AddAdminIDs(ids ...int) *InstitutionUpdateOne {
	iuo.mutation.AddAdminIDs(ids...)
	return iuo
}

// AddAdmins adds the "admins" edges to the User entity.
func (iuo *InstitutionUpdateOne) AddAdmins(u ...*User) *InstitutionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iuo.AddAdminIDs(ids...)
}

// Mutation returns the InstitutionMutation object of the builder.
func (iuo *InstitutionUpdateOne) Mutation() *InstitutionMutation {
	return iuo.mutation
}

// ClearAdmins clears all "admins" edges to the User entity.
func (iuo *InstitutionUpdateOne) ClearAdmins() *InstitutionUpdateOne {
	iuo.mutation.ClearAdmins()
	return iuo
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (iuo *InstitutionUpdateOne) RemoveAdminIDs(ids ...int) *InstitutionUpdateOne {
	iuo.mutation.RemoveAdminIDs(ids...)
	return iuo
}

// RemoveAdmins removes "admins" edges to User entities.
func (iuo *InstitutionUpdateOne) RemoveAdmins(u ...*User) *InstitutionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iuo.RemoveAdminIDs(ids...)
}

// Where appends a list predicates to the InstitutionUpdate builder.
func (iuo *InstitutionUpdateOne) Where(ps ...predicate.Institution) *InstitutionUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstitutionUpdateOne) Select(field string, fields ...string) *InstitutionUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Institution entity.
func (iuo *InstitutionUpdateOne) Save(ctx context.Context) (*Institution, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstitutionUpdateOne) SaveX(ctx context.Context) *Institution {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstitutionUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstitutionUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InstitutionUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := institution.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Institution.name": %w`, err)}
		}
	}
	return nil
}

func (iuo *InstitutionUpdateOne) sqlSave(ctx context.Context) (_node *Institution, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(institution.Table, institution.Columns, sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Institution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, institution.FieldID)
		for _, f := range fields {
			if !institution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != institution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(institution.FieldName, field.TypeString, value)
	}
	if iuo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   institution.AdminsTable,
			Columns: institution.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !iuo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   institution.AdminsTable,
			Columns: institution.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   institution.AdminsTable,
			Columns: institution.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Institution{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{institution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
