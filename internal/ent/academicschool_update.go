// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/academicschool"
	"github.com/np-inprove/server/internal/ent/course"
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// AcademicSchoolUpdate is the builder for updating AcademicSchool entities.
type AcademicSchoolUpdate struct {
	config
	hooks    []Hook
	mutation *AcademicSchoolMutation
}

// Where appends a list predicates to the AcademicSchoolUpdate builder.
func (asu *AcademicSchoolUpdate) Where(ps ...predicate.AcademicSchool) *AcademicSchoolUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetName sets the "name" field.
func (asu *AcademicSchoolUpdate) SetName(s string) *AcademicSchoolUpdate {
	asu.mutation.SetName(s)
	return asu
}

// SetSchoolCode sets the "school_code" field.
func (asu *AcademicSchoolUpdate) SetSchoolCode(s string) *AcademicSchoolUpdate {
	asu.mutation.SetSchoolCode(s)
	return asu
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (asu *AcademicSchoolUpdate) SetInstitutionID(id int) *AcademicSchoolUpdate {
	asu.mutation.SetInstitutionID(id)
	return asu
}

// SetNillableInstitutionID sets the "institution" edge to the Institution entity by ID if the given value is not nil.
func (asu *AcademicSchoolUpdate) SetNillableInstitutionID(id *int) *AcademicSchoolUpdate {
	if id != nil {
		asu = asu.SetInstitutionID(*id)
	}
	return asu
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (asu *AcademicSchoolUpdate) SetInstitution(i *Institution) *AcademicSchoolUpdate {
	return asu.SetInstitutionID(i.ID)
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (asu *AcademicSchoolUpdate) AddCourseIDs(ids ...int) *AcademicSchoolUpdate {
	asu.mutation.AddCourseIDs(ids...)
	return asu
}

// AddCourses adds the "courses" edges to the Course entity.
func (asu *AcademicSchoolUpdate) AddCourses(c ...*Course) *AcademicSchoolUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return asu.AddCourseIDs(ids...)
}

// Mutation returns the AcademicSchoolMutation object of the builder.
func (asu *AcademicSchoolUpdate) Mutation() *AcademicSchoolMutation {
	return asu.mutation
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (asu *AcademicSchoolUpdate) ClearInstitution() *AcademicSchoolUpdate {
	asu.mutation.ClearInstitution()
	return asu
}

// ClearCourses clears all "courses" edges to the Course entity.
func (asu *AcademicSchoolUpdate) ClearCourses() *AcademicSchoolUpdate {
	asu.mutation.ClearCourses()
	return asu
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (asu *AcademicSchoolUpdate) RemoveCourseIDs(ids ...int) *AcademicSchoolUpdate {
	asu.mutation.RemoveCourseIDs(ids...)
	return asu
}

// RemoveCourses removes "courses" edges to Course entities.
func (asu *AcademicSchoolUpdate) RemoveCourses(c ...*Course) *AcademicSchoolUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return asu.RemoveCourseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AcademicSchoolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AcademicSchoolUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AcademicSchoolUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AcademicSchoolUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AcademicSchoolUpdate) check() error {
	if v, ok := asu.mutation.Name(); ok {
		if err := academicschool.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcademicSchool.name": %w`, err)}
		}
	}
	if v, ok := asu.mutation.SchoolCode(); ok {
		if err := academicschool.SchoolCodeValidator(v); err != nil {
			return &ValidationError{Name: "school_code", err: fmt.Errorf(`ent: validator failed for field "AcademicSchool.school_code": %w`, err)}
		}
	}
	return nil
}

func (asu *AcademicSchoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(academicschool.Table, academicschool.Columns, sqlgraph.NewFieldSpec(academicschool.FieldID, field.TypeInt))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.Name(); ok {
		_spec.SetField(academicschool.FieldName, field.TypeString, value)
	}
	if value, ok := asu.mutation.SchoolCode(); ok {
		_spec.SetField(academicschool.FieldSchoolCode, field.TypeString, value)
	}
	if asu.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   academicschool.InstitutionTable,
			Columns: []string{academicschool.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   academicschool.InstitutionTable,
			Columns: []string{academicschool.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   academicschool.CoursesTable,
			Columns: []string{academicschool.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !asu.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   academicschool.CoursesTable,
			Columns: []string{academicschool.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   academicschool.CoursesTable,
			Columns: []string{academicschool.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{academicschool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AcademicSchoolUpdateOne is the builder for updating a single AcademicSchool entity.
type AcademicSchoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AcademicSchoolMutation
}

// SetName sets the "name" field.
func (asuo *AcademicSchoolUpdateOne) SetName(s string) *AcademicSchoolUpdateOne {
	asuo.mutation.SetName(s)
	return asuo
}

// SetSchoolCode sets the "school_code" field.
func (asuo *AcademicSchoolUpdateOne) SetSchoolCode(s string) *AcademicSchoolUpdateOne {
	asuo.mutation.SetSchoolCode(s)
	return asuo
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (asuo *AcademicSchoolUpdateOne) SetInstitutionID(id int) *AcademicSchoolUpdateOne {
	asuo.mutation.SetInstitutionID(id)
	return asuo
}

// SetNillableInstitutionID sets the "institution" edge to the Institution entity by ID if the given value is not nil.
func (asuo *AcademicSchoolUpdateOne) SetNillableInstitutionID(id *int) *AcademicSchoolUpdateOne {
	if id != nil {
		asuo = asuo.SetInstitutionID(*id)
	}
	return asuo
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (asuo *AcademicSchoolUpdateOne) SetInstitution(i *Institution) *AcademicSchoolUpdateOne {
	return asuo.SetInstitutionID(i.ID)
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (asuo *AcademicSchoolUpdateOne) AddCourseIDs(ids ...int) *AcademicSchoolUpdateOne {
	asuo.mutation.AddCourseIDs(ids...)
	return asuo
}

// AddCourses adds the "courses" edges to the Course entity.
func (asuo *AcademicSchoolUpdateOne) AddCourses(c ...*Course) *AcademicSchoolUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return asuo.AddCourseIDs(ids...)
}

// Mutation returns the AcademicSchoolMutation object of the builder.
func (asuo *AcademicSchoolUpdateOne) Mutation() *AcademicSchoolMutation {
	return asuo.mutation
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (asuo *AcademicSchoolUpdateOne) ClearInstitution() *AcademicSchoolUpdateOne {
	asuo.mutation.ClearInstitution()
	return asuo
}

// ClearCourses clears all "courses" edges to the Course entity.
func (asuo *AcademicSchoolUpdateOne) ClearCourses() *AcademicSchoolUpdateOne {
	asuo.mutation.ClearCourses()
	return asuo
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (asuo *AcademicSchoolUpdateOne) RemoveCourseIDs(ids ...int) *AcademicSchoolUpdateOne {
	asuo.mutation.RemoveCourseIDs(ids...)
	return asuo
}

// RemoveCourses removes "courses" edges to Course entities.
func (asuo *AcademicSchoolUpdateOne) RemoveCourses(c ...*Course) *AcademicSchoolUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return asuo.RemoveCourseIDs(ids...)
}

// Where appends a list predicates to the AcademicSchoolUpdate builder.
func (asuo *AcademicSchoolUpdateOne) Where(ps ...predicate.AcademicSchool) *AcademicSchoolUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AcademicSchoolUpdateOne) Select(field string, fields ...string) *AcademicSchoolUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AcademicSchool entity.
func (asuo *AcademicSchoolUpdateOne) Save(ctx context.Context) (*AcademicSchool, error) {
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AcademicSchoolUpdateOne) SaveX(ctx context.Context) *AcademicSchool {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AcademicSchoolUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AcademicSchoolUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AcademicSchoolUpdateOne) check() error {
	if v, ok := asuo.mutation.Name(); ok {
		if err := academicschool.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AcademicSchool.name": %w`, err)}
		}
	}
	if v, ok := asuo.mutation.SchoolCode(); ok {
		if err := academicschool.SchoolCodeValidator(v); err != nil {
			return &ValidationError{Name: "school_code", err: fmt.Errorf(`ent: validator failed for field "AcademicSchool.school_code": %w`, err)}
		}
	}
	return nil
}

func (asuo *AcademicSchoolUpdateOne) sqlSave(ctx context.Context) (_node *AcademicSchool, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(academicschool.Table, academicschool.Columns, sqlgraph.NewFieldSpec(academicschool.FieldID, field.TypeInt))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AcademicSchool.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, academicschool.FieldID)
		for _, f := range fields {
			if !academicschool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != academicschool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.Name(); ok {
		_spec.SetField(academicschool.FieldName, field.TypeString, value)
	}
	if value, ok := asuo.mutation.SchoolCode(); ok {
		_spec.SetField(academicschool.FieldSchoolCode, field.TypeString, value)
	}
	if asuo.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   academicschool.InstitutionTable,
			Columns: []string{academicschool.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   academicschool.InstitutionTable,
			Columns: []string{academicschool.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   academicschool.CoursesTable,
			Columns: []string{academicschool.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !asuo.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   academicschool.CoursesTable,
			Columns: []string{academicschool.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   academicschool.CoursesTable,
			Columns: []string{academicschool.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AcademicSchool{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{academicschool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
