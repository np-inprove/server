// Code generated by ent, DO NOT EDIT.

package institutioninvitelink

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/np-inprove/server/internal/entity/institution"
)

const (
	// Label holds the string label denoting the institutioninvitelink type in the database.
	Label = "institution_invite_link"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeInstitution holds the string denoting the institution edge name in mutations.
	EdgeInstitution = "institution"
	// Table holds the table name of the institutioninvitelink in the database.
	Table = "institution_invite_links"
	// InstitutionTable is the table that holds the institution relation/edge.
	InstitutionTable = "institution_invite_links"
	// InstitutionInverseTable is the table name for the Institution entity.
	// It exists in this package in order to avoid circular dependency with the "entinstitution" package.
	InstitutionInverseTable = "institutions"
	// InstitutionColumn is the table column denoting the institution relation/edge.
	InstitutionColumn = "institution_invites"
)

// Columns holds all SQL columns for institutioninvitelink fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldRole,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "institution_invite_links"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"institution_invites",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
)

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r institution.Role) error {
	switch r {
	case "admin", "educator", "member":
		return nil
	default:
		return fmt.Errorf("institutioninvitelink: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the InstitutionInviteLink queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByInstitutionField orders the results by institution field.
func ByInstitutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstitutionStep(), sql.OrderByField(field, opts...))
	}
}
func newInstitutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstitutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InstitutionTable, InstitutionColumn),
	)
}
