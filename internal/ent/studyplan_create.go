// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/milestone"
	"github.com/np-inprove/server/internal/ent/studyplan"
	"github.com/np-inprove/server/internal/ent/user"
)

// StudyPlanCreate is the builder for creating a StudyPlan entity.
type StudyPlanCreate struct {
	config
	mutation *StudyPlanMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (spc *StudyPlanCreate) SetName(s string) *StudyPlanCreate {
	spc.mutation.SetName(s)
	return spc
}

// SetShareCode sets the "share_code" field.
func (spc *StudyPlanCreate) SetShareCode(s string) *StudyPlanCreate {
	spc.mutation.SetShareCode(s)
	return spc
}

// SetNillableShareCode sets the "share_code" field if the given value is not nil.
func (spc *StudyPlanCreate) SetNillableShareCode(s *string) *StudyPlanCreate {
	if s != nil {
		spc.SetShareCode(*s)
	}
	return spc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (spc *StudyPlanCreate) SetAuthorID(id int) *StudyPlanCreate {
	spc.mutation.SetAuthorID(id)
	return spc
}

// SetAuthor sets the "author" edge to the User entity.
func (spc *StudyPlanCreate) SetAuthor(u *User) *StudyPlanCreate {
	return spc.SetAuthorID(u.ID)
}

// AddMilestoneIDs adds the "milestones" edge to the Milestone entity by IDs.
func (spc *StudyPlanCreate) AddMilestoneIDs(ids ...int) *StudyPlanCreate {
	spc.mutation.AddMilestoneIDs(ids...)
	return spc
}

// AddMilestones adds the "milestones" edges to the Milestone entity.
func (spc *StudyPlanCreate) AddMilestones(m ...*Milestone) *StudyPlanCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return spc.AddMilestoneIDs(ids...)
}

// Mutation returns the StudyPlanMutation object of the builder.
func (spc *StudyPlanCreate) Mutation() *StudyPlanMutation {
	return spc.mutation
}

// Save creates the StudyPlan in the database.
func (spc *StudyPlanCreate) Save(ctx context.Context) (*StudyPlan, error) {
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *StudyPlanCreate) SaveX(ctx context.Context) *StudyPlan {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *StudyPlanCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *StudyPlanCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *StudyPlanCreate) check() error {
	if _, ok := spc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "StudyPlan.name"`)}
	}
	if v, ok := spc.mutation.Name(); ok {
		if err := studyplan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StudyPlan.name": %w`, err)}
		}
	}
	if _, ok := spc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "StudyPlan.author"`)}
	}
	return nil
}

func (spc *StudyPlanCreate) sqlSave(ctx context.Context) (*StudyPlan, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *StudyPlanCreate) createSpec() (*StudyPlan, *sqlgraph.CreateSpec) {
	var (
		_node = &StudyPlan{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(studyplan.Table, sqlgraph.NewFieldSpec(studyplan.FieldID, field.TypeInt))
	)
	if value, ok := spc.mutation.Name(); ok {
		_spec.SetField(studyplan.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := spc.mutation.ShareCode(); ok {
		_spec.SetField(studyplan.FieldShareCode, field.TypeString, value)
		_node.ShareCode = value
	}
	if nodes := spc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   studyplan.AuthorTable,
			Columns: []string{studyplan.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.study_plan_author = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.MilestonesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   studyplan.MilestonesTable,
			Columns: []string{studyplan.MilestonesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(milestone.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StudyPlanCreateBulk is the builder for creating many StudyPlan entities in bulk.
type StudyPlanCreateBulk struct {
	config
	builders []*StudyPlanCreate
}

// Save creates the StudyPlan entities in the database.
func (spcb *StudyPlanCreateBulk) Save(ctx context.Context) ([]*StudyPlan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*StudyPlan, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StudyPlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *StudyPlanCreateBulk) SaveX(ctx context.Context) []*StudyPlan {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *StudyPlanCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *StudyPlanCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
