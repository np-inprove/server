// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/schema"
	"github.com/np-inprove/server/internal/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	institutionFields := schema.Institution{}.Fields()
	_ = institutionFields
	// institutionDescName is the schema descriptor for name field.
	institutionDescName := institutionFields[0].Descriptor()
	// institution.NameValidator is a validator for the "name" field. It is called by the builders before save.
	institution.NameValidator = institutionDescName.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[0].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[1].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[3].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
	// userDescPoints is the schema descriptor for points field.
	userDescPoints := userFields[4].Descriptor()
	// user.PointsValidator is a validator for the "points" field. It is called by the builders before save.
	user.PointsValidator = userDescPoints.Validators[0].(func(int) error)
	// userDescPointsAwardedCount is the schema descriptor for points_awarded_count field.
	userDescPointsAwardedCount := userFields[5].Descriptor()
	// user.PointsAwardedCountValidator is a validator for the "points_awarded_count" field. It is called by the builders before save.
	user.PointsAwardedCountValidator = userDescPointsAwardedCount.Validators[0].(func(int) error)
}
