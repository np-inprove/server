// Code generated by ent, DO NOT EDIT.

package accessory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the accessory type in the database.
	Label = "accessory"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPointsRequired holds the string denoting the points_required field in the database.
	FieldPointsRequired = "points_required"
	// EdgeRedemptions holds the string denoting the redemptions edge name in mutations.
	EdgeRedemptions = "redemptions"
	// EdgeInstitution holds the string denoting the institution edge name in mutations.
	EdgeInstitution = "institution"
	// Table holds the table name of the accessory in the database.
	Table = "accessories"
	// RedemptionsTable is the table that holds the redemptions relation/edge.
	RedemptionsTable = "redemptions"
	// RedemptionsInverseTable is the table name for the Redemption entity.
	// It exists in this package in order to avoid circular dependency with the "redemption" package.
	RedemptionsInverseTable = "redemptions"
	// RedemptionsColumn is the table column denoting the redemptions relation/edge.
	RedemptionsColumn = "accessory_redemptions"
	// InstitutionTable is the table that holds the institution relation/edge.
	InstitutionTable = "accessories"
	// InstitutionInverseTable is the table name for the Institution entity.
	// It exists in this package in order to avoid circular dependency with the "institution" package.
	InstitutionInverseTable = "institutions"
	// InstitutionColumn is the table column denoting the institution relation/edge.
	InstitutionColumn = "institution_accessories"
)

// Columns holds all SQL columns for accessory fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldPointsRequired,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "accessories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"institution_accessories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PointsRequiredValidator is a validator for the "points_required" field. It is called by the builders before save.
	PointsRequiredValidator func(int) error
)

// OrderOption defines the ordering options for the Accessory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPointsRequired orders the results by the points_required field.
func ByPointsRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointsRequired, opts...).ToFunc()
}

// ByRedemptionsCount orders the results by redemptions count.
func ByRedemptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRedemptionsStep(), opts...)
	}
}

// ByRedemptions orders the results by redemptions terms.
func ByRedemptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRedemptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInstitutionField orders the results by institution field.
func ByInstitutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstitutionStep(), sql.OrderByField(field, opts...))
	}
}
func newRedemptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RedemptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RedemptionsTable, RedemptionsColumn),
	)
}
func newInstitutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstitutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InstitutionTable, InstitutionColumn),
	)
}
