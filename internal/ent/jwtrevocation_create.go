// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/jwtrevocation"
)

// JWTRevocationCreate is the builder for creating a JWTRevocation entity.
type JWTRevocationCreate struct {
	config
	mutation *JWTRevocationMutation
	hooks    []Hook
}

// SetJti sets the "jti" field.
func (jrc *JWTRevocationCreate) SetJti(s string) *JWTRevocationCreate {
	jrc.mutation.SetJti(s)
	return jrc
}

// SetExpiry sets the "expiry" field.
func (jrc *JWTRevocationCreate) SetExpiry(t time.Time) *JWTRevocationCreate {
	jrc.mutation.SetExpiry(t)
	return jrc
}

// Mutation returns the JWTRevocationMutation object of the builder.
func (jrc *JWTRevocationCreate) Mutation() *JWTRevocationMutation {
	return jrc.mutation
}

// Save creates the JWTRevocation in the database.
func (jrc *JWTRevocationCreate) Save(ctx context.Context) (*JWTRevocation, error) {
	return withHooks(ctx, jrc.sqlSave, jrc.mutation, jrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jrc *JWTRevocationCreate) SaveX(ctx context.Context) *JWTRevocation {
	v, err := jrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrc *JWTRevocationCreate) Exec(ctx context.Context) error {
	_, err := jrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrc *JWTRevocationCreate) ExecX(ctx context.Context) {
	if err := jrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jrc *JWTRevocationCreate) check() error {
	if _, ok := jrc.mutation.Jti(); !ok {
		return &ValidationError{Name: "jti", err: errors.New(`ent: missing required field "JWTRevocation.jti"`)}
	}
	if v, ok := jrc.mutation.Jti(); ok {
		if err := jwtrevocation.JtiValidator(v); err != nil {
			return &ValidationError{Name: "jti", err: fmt.Errorf(`ent: validator failed for field "JWTRevocation.jti": %w`, err)}
		}
	}
	if _, ok := jrc.mutation.Expiry(); !ok {
		return &ValidationError{Name: "expiry", err: errors.New(`ent: missing required field "JWTRevocation.expiry"`)}
	}
	return nil
}

func (jrc *JWTRevocationCreate) sqlSave(ctx context.Context) (*JWTRevocation, error) {
	if err := jrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	jrc.mutation.id = &_node.ID
	jrc.mutation.done = true
	return _node, nil
}

func (jrc *JWTRevocationCreate) createSpec() (*JWTRevocation, *sqlgraph.CreateSpec) {
	var (
		_node = &JWTRevocation{config: jrc.config}
		_spec = sqlgraph.NewCreateSpec(jwtrevocation.Table, sqlgraph.NewFieldSpec(jwtrevocation.FieldID, field.TypeInt))
	)
	if value, ok := jrc.mutation.Jti(); ok {
		_spec.SetField(jwtrevocation.FieldJti, field.TypeString, value)
		_node.Jti = value
	}
	if value, ok := jrc.mutation.Expiry(); ok {
		_spec.SetField(jwtrevocation.FieldExpiry, field.TypeTime, value)
		_node.Expiry = value
	}
	return _node, _spec
}

// JWTRevocationCreateBulk is the builder for creating many JWTRevocation entities in bulk.
type JWTRevocationCreateBulk struct {
	config
	builders []*JWTRevocationCreate
}

// Save creates the JWTRevocation entities in the database.
func (jrcb *JWTRevocationCreateBulk) Save(ctx context.Context) ([]*JWTRevocation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jrcb.builders))
	nodes := make([]*JWTRevocation, len(jrcb.builders))
	mutators := make([]Mutator, len(jrcb.builders))
	for i := range jrcb.builders {
		func(i int, root context.Context) {
			builder := jrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JWTRevocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jrcb *JWTRevocationCreateBulk) SaveX(ctx context.Context) []*JWTRevocation {
	v, err := jrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrcb *JWTRevocationCreateBulk) Exec(ctx context.Context) error {
	_, err := jrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrcb *JWTRevocationCreateBulk) ExecX(ctx context.Context) {
	if err := jrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
