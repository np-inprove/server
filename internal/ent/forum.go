// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/forum"
	entgroup "github.com/np-inprove/server/internal/ent/group"
)

// Forum is the model entity for the Forum schema.
type Forum struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the forum (example: General)
	Name string `json:"name,omitempty"`
	// Short name of the forum (example: general)
	ShortName string `json:"short_name,omitempty"`
	// Description of the forum
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ForumQuery when eager-loading is set.
	Edges        ForumEdges `json:"edges"`
	group_forums *int
	selectValues sql.SelectValues
}

// ForumEdges holds the relations/edges for other nodes in the graph.
type ForumEdges struct {
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// Posts in the forum
	Posts []*ForumPost `json:"posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ForumEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entgroup.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e ForumEdges) PostsOrErr() ([]*ForumPost, error) {
	if e.loadedTypes[1] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Forum) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case forum.FieldID:
			values[i] = new(sql.NullInt64)
		case forum.FieldName, forum.FieldShortName, forum.FieldDescription:
			values[i] = new(sql.NullString)
		case forum.ForeignKeys[0]: // group_forums
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Forum fields.
func (f *Forum) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case forum.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case forum.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case forum.FieldShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_name", values[i])
			} else if value.Valid {
				f.ShortName = value.String
			}
		case forum.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case forum.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field group_forums", value)
			} else if value.Valid {
				f.group_forums = new(int)
				*f.group_forums = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Forum.
// This includes values selected through modifiers, order, etc.
func (f *Forum) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the Forum entity.
func (f *Forum) QueryGroup() *GroupQuery {
	return NewForumClient(f.config).QueryGroup(f)
}

// QueryPosts queries the "posts" edge of the Forum entity.
func (f *Forum) QueryPosts() *ForumPostQuery {
	return NewForumClient(f.config).QueryPosts(f)
}

// Update returns a builder for updating this Forum.
// Note that you need to call Forum.Unwrap() before calling this method if this Forum
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Forum) Update() *ForumUpdateOne {
	return NewForumClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Forum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Forum) Unwrap() *Forum {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Forum is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Forum) String() string {
	var builder strings.Builder
	builder.WriteString("Forum(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("short_name=")
	builder.WriteString(f.ShortName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(f.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Forums is a parsable slice of Forum.
type Forums []*Forum
