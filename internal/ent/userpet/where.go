// Code generated by ent, DO NOT EDIT.

package userpet

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// HungerPercentage applies equality check predicate on the "hunger_percentage" field. It's identical to HungerPercentageEQ.
func HungerPercentage(v float64) predicate.UserPet {
	return predicate.UserPet(sql.FieldEQ(FieldHungerPercentage, v))
}

// PetID applies equality check predicate on the "pet_id" field. It's identical to PetIDEQ.
func PetID(v int) predicate.UserPet {
	return predicate.UserPet(sql.FieldEQ(FieldPetID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserPet {
	return predicate.UserPet(sql.FieldEQ(FieldUserID, v))
}

// HungerPercentageEQ applies the EQ predicate on the "hunger_percentage" field.
func HungerPercentageEQ(v float64) predicate.UserPet {
	return predicate.UserPet(sql.FieldEQ(FieldHungerPercentage, v))
}

// HungerPercentageNEQ applies the NEQ predicate on the "hunger_percentage" field.
func HungerPercentageNEQ(v float64) predicate.UserPet {
	return predicate.UserPet(sql.FieldNEQ(FieldHungerPercentage, v))
}

// HungerPercentageIn applies the In predicate on the "hunger_percentage" field.
func HungerPercentageIn(vs ...float64) predicate.UserPet {
	return predicate.UserPet(sql.FieldIn(FieldHungerPercentage, vs...))
}

// HungerPercentageNotIn applies the NotIn predicate on the "hunger_percentage" field.
func HungerPercentageNotIn(vs ...float64) predicate.UserPet {
	return predicate.UserPet(sql.FieldNotIn(FieldHungerPercentage, vs...))
}

// HungerPercentageGT applies the GT predicate on the "hunger_percentage" field.
func HungerPercentageGT(v float64) predicate.UserPet {
	return predicate.UserPet(sql.FieldGT(FieldHungerPercentage, v))
}

// HungerPercentageGTE applies the GTE predicate on the "hunger_percentage" field.
func HungerPercentageGTE(v float64) predicate.UserPet {
	return predicate.UserPet(sql.FieldGTE(FieldHungerPercentage, v))
}

// HungerPercentageLT applies the LT predicate on the "hunger_percentage" field.
func HungerPercentageLT(v float64) predicate.UserPet {
	return predicate.UserPet(sql.FieldLT(FieldHungerPercentage, v))
}

// HungerPercentageLTE applies the LTE predicate on the "hunger_percentage" field.
func HungerPercentageLTE(v float64) predicate.UserPet {
	return predicate.UserPet(sql.FieldLTE(FieldHungerPercentage, v))
}

// PetIDEQ applies the EQ predicate on the "pet_id" field.
func PetIDEQ(v int) predicate.UserPet {
	return predicate.UserPet(sql.FieldEQ(FieldPetID, v))
}

// PetIDNEQ applies the NEQ predicate on the "pet_id" field.
func PetIDNEQ(v int) predicate.UserPet {
	return predicate.UserPet(sql.FieldNEQ(FieldPetID, v))
}

// PetIDIn applies the In predicate on the "pet_id" field.
func PetIDIn(vs ...int) predicate.UserPet {
	return predicate.UserPet(sql.FieldIn(FieldPetID, vs...))
}

// PetIDNotIn applies the NotIn predicate on the "pet_id" field.
func PetIDNotIn(vs ...int) predicate.UserPet {
	return predicate.UserPet(sql.FieldNotIn(FieldPetID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserPet {
	return predicate.UserPet(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserPet {
	return predicate.UserPet(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserPet {
	return predicate.UserPet(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserPet {
	return predicate.UserPet(sql.FieldNotIn(FieldUserID, vs...))
}

// HasPet applies the HasEdge predicate on the "pet" edge.
func HasPet() predicate.UserPet {
	return predicate.UserPet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, PetColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, PetTable, PetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPetWith applies the HasEdge predicate on the "pet" edge with a given conditions (other predicates).
func HasPetWith(preds ...predicate.Pet) predicate.UserPet {
	return predicate.UserPet(func(s *sql.Selector) {
		step := newPetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserPet {
	return predicate.UserPet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserPet {
	return predicate.UserPet(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserPet) predicate.UserPet {
	return predicate.UserPet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserPet) predicate.UserPet {
	return predicate.UserPet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserPet) predicate.UserPet {
	return predicate.UserPet(func(s *sql.Selector) {
		p(s.Not())
	})
}
