// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/forumpost"
	"github.com/np-inprove/server/internal/ent/reaction"
	"github.com/np-inprove/server/internal/ent/user"
)

// ReactionCreate is the builder for creating a Reaction entity.
type ReactionCreate struct {
	config
	mutation *ReactionMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (rc *ReactionCreate) SetUserID(i int) *ReactionCreate {
	rc.mutation.SetUserID(i)
	return rc
}

// SetForumPostID sets the "forum_post_id" field.
func (rc *ReactionCreate) SetForumPostID(i int) *ReactionCreate {
	rc.mutation.SetForumPostID(i)
	return rc
}

// SetEmoji sets the "emoji" field.
func (rc *ReactionCreate) SetEmoji(s string) *ReactionCreate {
	rc.mutation.SetEmoji(s)
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *ReactionCreate) SetUser(u *User) *ReactionCreate {
	return rc.SetUserID(u.ID)
}

// SetForumPost sets the "forum_post" edge to the ForumPost entity.
func (rc *ReactionCreate) SetForumPost(f *ForumPost) *ReactionCreate {
	return rc.SetForumPostID(f.ID)
}

// Mutation returns the ReactionMutation object of the builder.
func (rc *ReactionCreate) Mutation() *ReactionMutation {
	return rc.mutation
}

// Save creates the Reaction in the database.
func (rc *ReactionCreate) Save(ctx context.Context) (*Reaction, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReactionCreate) SaveX(ctx context.Context) *Reaction {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReactionCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReactionCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReactionCreate) check() error {
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Reaction.user_id"`)}
	}
	if _, ok := rc.mutation.ForumPostID(); !ok {
		return &ValidationError{Name: "forum_post_id", err: errors.New(`ent: missing required field "Reaction.forum_post_id"`)}
	}
	if _, ok := rc.mutation.Emoji(); !ok {
		return &ValidationError{Name: "emoji", err: errors.New(`ent: missing required field "Reaction.emoji"`)}
	}
	if v, ok := rc.mutation.Emoji(); ok {
		if err := reaction.EmojiValidator(v); err != nil {
			return &ValidationError{Name: "emoji", err: fmt.Errorf(`ent: validator failed for field "Reaction.emoji": %w`, err)}
		}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Reaction.user"`)}
	}
	if _, ok := rc.mutation.ForumPostID(); !ok {
		return &ValidationError{Name: "forum_post", err: errors.New(`ent: missing required edge "Reaction.forum_post"`)}
	}
	return nil
}

func (rc *ReactionCreate) sqlSave(ctx context.Context) (*Reaction, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (rc *ReactionCreate) createSpec() (*Reaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Reaction{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reaction.Table, nil)
	)
	if value, ok := rc.mutation.Emoji(); ok {
		_spec.SetField(reaction.FieldEmoji, field.TypeString, value)
		_node.Emoji = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.UserTable,
			Columns: []string{reaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ForumPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.ForumPostTable,
			Columns: []string{reaction.ForumPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ForumPostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReactionCreateBulk is the builder for creating many Reaction entities in bulk.
type ReactionCreateBulk struct {
	config
	builders []*ReactionCreate
}

// Save creates the Reaction entities in the database.
func (rcb *ReactionCreateBulk) Save(ctx context.Context) ([]*Reaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reaction, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReactionCreateBulk) SaveX(ctx context.Context) []*Reaction {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReactionCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReactionCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
