// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPoints holds the string denoting the points field in the database.
	FieldPoints = "points"
	// FieldPointsAwardedCount holds the string denoting the points_awarded_count field in the database.
	FieldPointsAwardedCount = "points_awarded_count"
	// FieldPointsAwardedResetTime holds the string denoting the points_awarded_reset_time field in the database.
	FieldPointsAwardedResetTime = "points_awarded_reset_time"
	// FieldGodMode holds the string denoting the god_mode field in the database.
	FieldGodMode = "god_mode"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeInstitution holds the string denoting the institution edge name in mutations.
	EdgeInstitution = "institution"
	// EdgeRedemptions holds the string denoting the redemptions edge name in mutations.
	EdgeRedemptions = "redemptions"
	// EdgeForumPosts holds the string denoting the forum_posts edge name in mutations.
	EdgeForumPosts = "forum_posts"
	// EdgePet holds the string denoting the pet edge name in mutations.
	EdgePet = "pet"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeReactedPosts holds the string denoting the reacted_posts edge name in mutations.
	EdgeReactedPosts = "reacted_posts"
	// EdgeVotedDeadlines holds the string denoting the voted_deadlines edge name in mutations.
	EdgeVotedDeadlines = "voted_deadlines"
	// EdgeAuthoredDeadlines holds the string denoting the authored_deadlines edge name in mutations.
	EdgeAuthoredDeadlines = "authored_deadlines"
	// EdgeUserPets holds the string denoting the user_pets edge name in mutations.
	EdgeUserPets = "user_pets"
	// EdgeGroupUsers holds the string denoting the group_users edge name in mutations.
	EdgeGroupUsers = "group_users"
	// EdgeReactions holds the string denoting the reactions edge name in mutations.
	EdgeReactions = "reactions"
	// Table holds the table name of the user in the database.
	Table = "users"
	// DepartmentTable is the table that holds the department relation/edge.
	DepartmentTable = "users"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department_users"
	// InstitutionTable is the table that holds the institution relation/edge. The primary key declared below.
	InstitutionTable = "institution_admins"
	// InstitutionInverseTable is the table name for the Institution entity.
	// It exists in this package in order to avoid circular dependency with the "institution" package.
	InstitutionInverseTable = "institutions"
	// RedemptionsTable is the table that holds the redemptions relation/edge.
	RedemptionsTable = "redemptions"
	// RedemptionsInverseTable is the table name for the Redemption entity.
	// It exists in this package in order to avoid circular dependency with the "redemption" package.
	RedemptionsInverseTable = "redemptions"
	// RedemptionsColumn is the table column denoting the redemptions relation/edge.
	RedemptionsColumn = "redemption_user"
	// ForumPostsTable is the table that holds the forum_posts relation/edge.
	ForumPostsTable = "forum_posts"
	// ForumPostsInverseTable is the table name for the ForumPost entity.
	// It exists in this package in order to avoid circular dependency with the "forumpost" package.
	ForumPostsInverseTable = "forum_posts"
	// ForumPostsColumn is the table column denoting the forum_posts relation/edge.
	ForumPostsColumn = "forum_post_author"
	// PetTable is the table that holds the pet relation/edge. The primary key declared below.
	PetTable = "user_pets"
	// PetInverseTable is the table name for the Pet entity.
	// It exists in this package in order to avoid circular dependency with the "pet" package.
	PetInverseTable = "pets"
	// GroupsTable is the table that holds the groups relation/edge. The primary key declared below.
	GroupsTable = "group_users"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
	// ReactedPostsTable is the table that holds the reacted_posts relation/edge. The primary key declared below.
	ReactedPostsTable = "reactions"
	// ReactedPostsInverseTable is the table name for the ForumPost entity.
	// It exists in this package in order to avoid circular dependency with the "forumpost" package.
	ReactedPostsInverseTable = "forum_posts"
	// VotedDeadlinesTable is the table that holds the voted_deadlines relation/edge. The primary key declared below.
	VotedDeadlinesTable = "deadline_voted_users"
	// VotedDeadlinesInverseTable is the table name for the Deadline entity.
	// It exists in this package in order to avoid circular dependency with the "deadline" package.
	VotedDeadlinesInverseTable = "deadlines"
	// AuthoredDeadlinesTable is the table that holds the authored_deadlines relation/edge.
	AuthoredDeadlinesTable = "deadlines"
	// AuthoredDeadlinesInverseTable is the table name for the Deadline entity.
	// It exists in this package in order to avoid circular dependency with the "deadline" package.
	AuthoredDeadlinesInverseTable = "deadlines"
	// AuthoredDeadlinesColumn is the table column denoting the authored_deadlines relation/edge.
	AuthoredDeadlinesColumn = "deadline_author"
	// UserPetsTable is the table that holds the user_pets relation/edge.
	UserPetsTable = "user_pets"
	// UserPetsInverseTable is the table name for the UserPet entity.
	// It exists in this package in order to avoid circular dependency with the "userpet" package.
	UserPetsInverseTable = "user_pets"
	// UserPetsColumn is the table column denoting the user_pets relation/edge.
	UserPetsColumn = "user_id"
	// GroupUsersTable is the table that holds the group_users relation/edge.
	GroupUsersTable = "group_users"
	// GroupUsersInverseTable is the table name for the GroupUser entity.
	// It exists in this package in order to avoid circular dependency with the "groupuser" package.
	GroupUsersInverseTable = "group_users"
	// GroupUsersColumn is the table column denoting the group_users relation/edge.
	GroupUsersColumn = "user_id"
	// ReactionsTable is the table that holds the reactions relation/edge.
	ReactionsTable = "reactions"
	// ReactionsInverseTable is the table name for the Reaction entity.
	// It exists in this package in order to avoid circular dependency with the "reaction" package.
	ReactionsInverseTable = "reactions"
	// ReactionsColumn is the table column denoting the reactions relation/edge.
	ReactionsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldPassword,
	FieldPoints,
	FieldPointsAwardedCount,
	FieldPointsAwardedResetTime,
	FieldGodMode,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"department_users",
}

var (
	// InstitutionPrimaryKey and InstitutionColumn2 are the table columns denoting the
	// primary key for the institution relation (M2M).
	InstitutionPrimaryKey = []string{"institution_id", "user_id"}
	// PetPrimaryKey and PetColumn2 are the table columns denoting the
	// primary key for the pet relation (M2M).
	PetPrimaryKey = []string{"pet_id", "user_id"}
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"group_id", "user_id"}
	// ReactedPostsPrimaryKey and ReactedPostsColumn2 are the table columns denoting the
	// primary key for the reacted_posts relation (M2M).
	ReactedPostsPrimaryKey = []string{"forum_post_id", "user_id"}
	// VotedDeadlinesPrimaryKey and VotedDeadlinesColumn2 are the table columns denoting the
	// primary key for the voted_deadlines relation (M2M).
	VotedDeadlinesPrimaryKey = []string{"deadline_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultPoints holds the default value on creation for the "points" field.
	DefaultPoints int
	// PointsValidator is a validator for the "points" field. It is called by the builders before save.
	PointsValidator func(int) error
	// DefaultPointsAwardedCount holds the default value on creation for the "points_awarded_count" field.
	DefaultPointsAwardedCount int
	// PointsAwardedCountValidator is a validator for the "points_awarded_count" field. It is called by the builders before save.
	PointsAwardedCountValidator func(int) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPoints orders the results by the points field.
func ByPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoints, opts...).ToFunc()
}

// ByPointsAwardedCount orders the results by the points_awarded_count field.
func ByPointsAwardedCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointsAwardedCount, opts...).ToFunc()
}

// ByPointsAwardedResetTime orders the results by the points_awarded_reset_time field.
func ByPointsAwardedResetTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointsAwardedResetTime, opts...).ToFunc()
}

// ByGodMode orders the results by the god_mode field.
func ByGodMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGodMode, opts...).ToFunc()
}

// ByDepartmentField orders the results by department field.
func ByDepartmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByInstitutionCount orders the results by institution count.
func ByInstitutionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInstitutionStep(), opts...)
	}
}

// ByInstitution orders the results by institution terms.
func ByInstitution(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstitutionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRedemptionsCount orders the results by redemptions count.
func ByRedemptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRedemptionsStep(), opts...)
	}
}

// ByRedemptions orders the results by redemptions terms.
func ByRedemptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRedemptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByForumPostsCount orders the results by forum_posts count.
func ByForumPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newForumPostsStep(), opts...)
	}
}

// ByForumPosts orders the results by forum_posts terms.
func ByForumPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newForumPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPetCount orders the results by pet count.
func ByPetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPetStep(), opts...)
	}
}

// ByPet orders the results by pet terms.
func ByPet(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReactedPostsCount orders the results by reacted_posts count.
func ByReactedPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReactedPostsStep(), opts...)
	}
}

// ByReactedPosts orders the results by reacted_posts terms.
func ByReactedPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReactedPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVotedDeadlinesCount orders the results by voted_deadlines count.
func ByVotedDeadlinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVotedDeadlinesStep(), opts...)
	}
}

// ByVotedDeadlines orders the results by voted_deadlines terms.
func ByVotedDeadlines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVotedDeadlinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuthoredDeadlinesCount orders the results by authored_deadlines count.
func ByAuthoredDeadlinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthoredDeadlinesStep(), opts...)
	}
}

// ByAuthoredDeadlines orders the results by authored_deadlines terms.
func ByAuthoredDeadlines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthoredDeadlinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserPetsCount orders the results by user_pets count.
func ByUserPetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserPetsStep(), opts...)
	}
}

// ByUserPets orders the results by user_pets terms.
func ByUserPets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserPetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupUsersCount orders the results by group_users count.
func ByGroupUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupUsersStep(), opts...)
	}
}

// ByGroupUsers orders the results by group_users terms.
func ByGroupUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReactionsCount orders the results by reactions count.
func ByReactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReactionsStep(), opts...)
	}
}

// ByReactions orders the results by reactions terms.
func ByReactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDepartmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
	)
}
func newInstitutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstitutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InstitutionTable, InstitutionPrimaryKey...),
	)
}
func newRedemptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RedemptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RedemptionsTable, RedemptionsColumn),
	)
}
func newForumPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ForumPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ForumPostsTable, ForumPostsColumn),
	)
}
func newPetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PetTable, PetPrimaryKey...),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GroupsTable, GroupsPrimaryKey...),
	)
}
func newReactedPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReactedPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ReactedPostsTable, ReactedPostsPrimaryKey...),
	)
}
func newVotedDeadlinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VotedDeadlinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, VotedDeadlinesTable, VotedDeadlinesPrimaryKey...),
	)
}
func newAuthoredDeadlinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthoredDeadlinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AuthoredDeadlinesTable, AuthoredDeadlinesColumn),
	)
}
func newUserPetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserPetsInverseTable, UserPetsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UserPetsTable, UserPetsColumn),
	)
}
func newGroupUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupUsersInverseTable, GroupUsersColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, GroupUsersTable, GroupUsersColumn),
	)
}
func newReactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReactionsInverseTable, ReactionsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ReactionsTable, ReactionsColumn),
	)
}
