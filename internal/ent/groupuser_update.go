// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/groupuser"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/user"
)

// GroupUserUpdate is the builder for updating GroupUser entities.
type GroupUserUpdate struct {
	config
	hooks    []Hook
	mutation *GroupUserMutation
}

// Where appends a list predicates to the GroupUserUpdate builder.
func (guu *GroupUserUpdate) Where(ps ...predicate.GroupUser) *GroupUserUpdate {
	guu.mutation.Where(ps...)
	return guu
}

// SetGroupID sets the "group_id" field.
func (guu *GroupUserUpdate) SetGroupID(i int) *GroupUserUpdate {
	guu.mutation.SetGroupID(i)
	return guu
}

// SetUserID sets the "user_id" field.
func (guu *GroupUserUpdate) SetUserID(i int) *GroupUserUpdate {
	guu.mutation.SetUserID(i)
	return guu
}

// SetRole sets the "role" field.
func (guu *GroupUserUpdate) SetRole(gr groupuser.Role) *GroupUserUpdate {
	guu.mutation.SetRole(gr)
	return guu
}

// SetGroup sets the "group" edge to the Group entity.
func (guu *GroupUserUpdate) SetGroup(g *Group) *GroupUserUpdate {
	return guu.SetGroupID(g.ID)
}

// SetUser sets the "user" edge to the User entity.
func (guu *GroupUserUpdate) SetUser(u *User) *GroupUserUpdate {
	return guu.SetUserID(u.ID)
}

// Mutation returns the GroupUserMutation object of the builder.
func (guu *GroupUserUpdate) Mutation() *GroupUserMutation {
	return guu.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (guu *GroupUserUpdate) ClearGroup() *GroupUserUpdate {
	guu.mutation.ClearGroup()
	return guu
}

// ClearUser clears the "user" edge to the User entity.
func (guu *GroupUserUpdate) ClearUser() *GroupUserUpdate {
	guu.mutation.ClearUser()
	return guu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (guu *GroupUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, guu.sqlSave, guu.mutation, guu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guu *GroupUserUpdate) SaveX(ctx context.Context) int {
	affected, err := guu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (guu *GroupUserUpdate) Exec(ctx context.Context) error {
	_, err := guu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guu *GroupUserUpdate) ExecX(ctx context.Context) {
	if err := guu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guu *GroupUserUpdate) check() error {
	if v, ok := guu.mutation.Role(); ok {
		if err := groupuser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "GroupUser.role": %w`, err)}
		}
	}
	if _, ok := guu.mutation.GroupID(); guu.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupUser.group"`)
	}
	if _, ok := guu.mutation.UserID(); guu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupUser.user"`)
	}
	return nil
}

func (guu *GroupUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := guu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupuser.Table, groupuser.Columns, sqlgraph.NewFieldSpec(groupuser.FieldGroupID, field.TypeInt), sqlgraph.NewFieldSpec(groupuser.FieldUserID, field.TypeInt))
	if ps := guu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guu.mutation.Role(); ok {
		_spec.SetField(groupuser.FieldRole, field.TypeEnum, value)
	}
	if guu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.UserTable,
			Columns: []string{groupuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.UserTable,
			Columns: []string{groupuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, guu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	guu.mutation.done = true
	return n, nil
}

// GroupUserUpdateOne is the builder for updating a single GroupUser entity.
type GroupUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupUserMutation
}

// SetGroupID sets the "group_id" field.
func (guuo *GroupUserUpdateOne) SetGroupID(i int) *GroupUserUpdateOne {
	guuo.mutation.SetGroupID(i)
	return guuo
}

// SetUserID sets the "user_id" field.
func (guuo *GroupUserUpdateOne) SetUserID(i int) *GroupUserUpdateOne {
	guuo.mutation.SetUserID(i)
	return guuo
}

// SetRole sets the "role" field.
func (guuo *GroupUserUpdateOne) SetRole(gr groupuser.Role) *GroupUserUpdateOne {
	guuo.mutation.SetRole(gr)
	return guuo
}

// SetGroup sets the "group" edge to the Group entity.
func (guuo *GroupUserUpdateOne) SetGroup(g *Group) *GroupUserUpdateOne {
	return guuo.SetGroupID(g.ID)
}

// SetUser sets the "user" edge to the User entity.
func (guuo *GroupUserUpdateOne) SetUser(u *User) *GroupUserUpdateOne {
	return guuo.SetUserID(u.ID)
}

// Mutation returns the GroupUserMutation object of the builder.
func (guuo *GroupUserUpdateOne) Mutation() *GroupUserMutation {
	return guuo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (guuo *GroupUserUpdateOne) ClearGroup() *GroupUserUpdateOne {
	guuo.mutation.ClearGroup()
	return guuo
}

// ClearUser clears the "user" edge to the User entity.
func (guuo *GroupUserUpdateOne) ClearUser() *GroupUserUpdateOne {
	guuo.mutation.ClearUser()
	return guuo
}

// Where appends a list predicates to the GroupUserUpdate builder.
func (guuo *GroupUserUpdateOne) Where(ps ...predicate.GroupUser) *GroupUserUpdateOne {
	guuo.mutation.Where(ps...)
	return guuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guuo *GroupUserUpdateOne) Select(field string, fields ...string) *GroupUserUpdateOne {
	guuo.fields = append([]string{field}, fields...)
	return guuo
}

// Save executes the query and returns the updated GroupUser entity.
func (guuo *GroupUserUpdateOne) Save(ctx context.Context) (*GroupUser, error) {
	return withHooks(ctx, guuo.sqlSave, guuo.mutation, guuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guuo *GroupUserUpdateOne) SaveX(ctx context.Context) *GroupUser {
	node, err := guuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guuo *GroupUserUpdateOne) Exec(ctx context.Context) error {
	_, err := guuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guuo *GroupUserUpdateOne) ExecX(ctx context.Context) {
	if err := guuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guuo *GroupUserUpdateOne) check() error {
	if v, ok := guuo.mutation.Role(); ok {
		if err := groupuser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "GroupUser.role": %w`, err)}
		}
	}
	if _, ok := guuo.mutation.GroupID(); guuo.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupUser.group"`)
	}
	if _, ok := guuo.mutation.UserID(); guuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupUser.user"`)
	}
	return nil
}

func (guuo *GroupUserUpdateOne) sqlSave(ctx context.Context) (_node *GroupUser, err error) {
	if err := guuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupuser.Table, groupuser.Columns, sqlgraph.NewFieldSpec(groupuser.FieldGroupID, field.TypeInt), sqlgraph.NewFieldSpec(groupuser.FieldUserID, field.TypeInt))
	if id, ok := guuo.mutation.GroupID(); !ok {
		return nil, &ValidationError{Name: "group_id", err: errors.New(`ent: missing "GroupUser.group_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := guuo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "GroupUser.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := guuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !groupuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := guuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guuo.mutation.Role(); ok {
		_spec.SetField(groupuser.FieldRole, field.TypeEnum, value)
	}
	if guuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.UserTable,
			Columns: []string{groupuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.UserTable,
			Columns: []string{groupuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupUser{config: guuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guuo.mutation.done = true
	return _node, nil
}
