// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/institutioninvitelink"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// InstitutionInviteLinkDelete is the builder for deleting a InstitutionInviteLink entity.
type InstitutionInviteLinkDelete struct {
	config
	hooks    []Hook
	mutation *InstitutionInviteLinkMutation
}

// Where appends a list predicates to the InstitutionInviteLinkDelete builder.
func (iild *InstitutionInviteLinkDelete) Where(ps ...predicate.InstitutionInviteLink) *InstitutionInviteLinkDelete {
	iild.mutation.Where(ps...)
	return iild
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iild *InstitutionInviteLinkDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, iild.sqlExec, iild.mutation, iild.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iild *InstitutionInviteLinkDelete) ExecX(ctx context.Context) int {
	n, err := iild.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iild *InstitutionInviteLinkDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(institutioninvitelink.Table, sqlgraph.NewFieldSpec(institutioninvitelink.FieldID, field.TypeInt))
	if ps := iild.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iild.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iild.mutation.done = true
	return affected, err
}

// InstitutionInviteLinkDeleteOne is the builder for deleting a single InstitutionInviteLink entity.
type InstitutionInviteLinkDeleteOne struct {
	iild *InstitutionInviteLinkDelete
}

// Where appends a list predicates to the InstitutionInviteLinkDelete builder.
func (iildo *InstitutionInviteLinkDeleteOne) Where(ps ...predicate.InstitutionInviteLink) *InstitutionInviteLinkDeleteOne {
	iildo.iild.mutation.Where(ps...)
	return iildo
}

// Exec executes the deletion query.
func (iildo *InstitutionInviteLinkDeleteOne) Exec(ctx context.Context) error {
	n, err := iildo.iild.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{institutioninvitelink.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iildo *InstitutionInviteLinkDeleteOne) ExecX(ctx context.Context) {
	if err := iildo.Exec(ctx); err != nil {
		panic(err)
	}
}
