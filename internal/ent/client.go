// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/np-inprove/server/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/np-inprove/server/internal/ent/academicschool"
	"github.com/np-inprove/server/internal/ent/accessory"
	"github.com/np-inprove/server/internal/ent/course"
	"github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/groupuser"
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/pet"
	"github.com/np-inprove/server/internal/ent/redemption"
	"github.com/np-inprove/server/internal/ent/user"
	"github.com/np-inprove/server/internal/ent/userpet"
	"github.com/np-inprove/server/internal/ent/voucher"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AcademicSchool is the client for interacting with the AcademicSchool builders.
	AcademicSchool *AcademicSchoolClient
	// Accessory is the client for interacting with the Accessory builders.
	Accessory *AccessoryClient
	// Course is the client for interacting with the Course builders.
	Course *CourseClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupUser is the client for interacting with the GroupUser builders.
	GroupUser *GroupUserClient
	// Institution is the client for interacting with the Institution builders.
	Institution *InstitutionClient
	// Pet is the client for interacting with the Pet builders.
	Pet *PetClient
	// Redemption is the client for interacting with the Redemption builders.
	Redemption *RedemptionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserPet is the client for interacting with the UserPet builders.
	UserPet *UserPetClient
	// Voucher is the client for interacting with the Voucher builders.
	Voucher *VoucherClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AcademicSchool = NewAcademicSchoolClient(c.config)
	c.Accessory = NewAccessoryClient(c.config)
	c.Course = NewCourseClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupUser = NewGroupUserClient(c.config)
	c.Institution = NewInstitutionClient(c.config)
	c.Pet = NewPetClient(c.config)
	c.Redemption = NewRedemptionClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserPet = NewUserPetClient(c.config)
	c.Voucher = NewVoucherClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		AcademicSchool: NewAcademicSchoolClient(cfg),
		Accessory:      NewAccessoryClient(cfg),
		Course:         NewCourseClient(cfg),
		Group:          NewGroupClient(cfg),
		GroupUser:      NewGroupUserClient(cfg),
		Institution:    NewInstitutionClient(cfg),
		Pet:            NewPetClient(cfg),
		Redemption:     NewRedemptionClient(cfg),
		User:           NewUserClient(cfg),
		UserPet:        NewUserPetClient(cfg),
		Voucher:        NewVoucherClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		AcademicSchool: NewAcademicSchoolClient(cfg),
		Accessory:      NewAccessoryClient(cfg),
		Course:         NewCourseClient(cfg),
		Group:          NewGroupClient(cfg),
		GroupUser:      NewGroupUserClient(cfg),
		Institution:    NewInstitutionClient(cfg),
		Pet:            NewPetClient(cfg),
		Redemption:     NewRedemptionClient(cfg),
		User:           NewUserClient(cfg),
		UserPet:        NewUserPetClient(cfg),
		Voucher:        NewVoucherClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AcademicSchool.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AcademicSchool, c.Accessory, c.Course, c.Group, c.GroupUser, c.Institution,
		c.Pet, c.Redemption, c.User, c.UserPet, c.Voucher,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AcademicSchool, c.Accessory, c.Course, c.Group, c.GroupUser, c.Institution,
		c.Pet, c.Redemption, c.User, c.UserPet, c.Voucher,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AcademicSchoolMutation:
		return c.AcademicSchool.mutate(ctx, m)
	case *AccessoryMutation:
		return c.Accessory.mutate(ctx, m)
	case *CourseMutation:
		return c.Course.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *GroupUserMutation:
		return c.GroupUser.mutate(ctx, m)
	case *InstitutionMutation:
		return c.Institution.mutate(ctx, m)
	case *PetMutation:
		return c.Pet.mutate(ctx, m)
	case *RedemptionMutation:
		return c.Redemption.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserPetMutation:
		return c.UserPet.mutate(ctx, m)
	case *VoucherMutation:
		return c.Voucher.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AcademicSchoolClient is a client for the AcademicSchool schema.
type AcademicSchoolClient struct {
	config
}

// NewAcademicSchoolClient returns a client for the AcademicSchool from the given config.
func NewAcademicSchoolClient(c config) *AcademicSchoolClient {
	return &AcademicSchoolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `academicschool.Hooks(f(g(h())))`.
func (c *AcademicSchoolClient) Use(hooks ...Hook) {
	c.hooks.AcademicSchool = append(c.hooks.AcademicSchool, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `academicschool.Intercept(f(g(h())))`.
func (c *AcademicSchoolClient) Intercept(interceptors ...Interceptor) {
	c.inters.AcademicSchool = append(c.inters.AcademicSchool, interceptors...)
}

// Create returns a builder for creating a AcademicSchool entity.
func (c *AcademicSchoolClient) Create() *AcademicSchoolCreate {
	mutation := newAcademicSchoolMutation(c.config, OpCreate)
	return &AcademicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AcademicSchool entities.
func (c *AcademicSchoolClient) CreateBulk(builders ...*AcademicSchoolCreate) *AcademicSchoolCreateBulk {
	return &AcademicSchoolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AcademicSchool.
func (c *AcademicSchoolClient) Update() *AcademicSchoolUpdate {
	mutation := newAcademicSchoolMutation(c.config, OpUpdate)
	return &AcademicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AcademicSchoolClient) UpdateOne(as *AcademicSchool) *AcademicSchoolUpdateOne {
	mutation := newAcademicSchoolMutation(c.config, OpUpdateOne, withAcademicSchool(as))
	return &AcademicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AcademicSchoolClient) UpdateOneID(id int) *AcademicSchoolUpdateOne {
	mutation := newAcademicSchoolMutation(c.config, OpUpdateOne, withAcademicSchoolID(id))
	return &AcademicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AcademicSchool.
func (c *AcademicSchoolClient) Delete() *AcademicSchoolDelete {
	mutation := newAcademicSchoolMutation(c.config, OpDelete)
	return &AcademicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AcademicSchoolClient) DeleteOne(as *AcademicSchool) *AcademicSchoolDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AcademicSchoolClient) DeleteOneID(id int) *AcademicSchoolDeleteOne {
	builder := c.Delete().Where(academicschool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AcademicSchoolDeleteOne{builder}
}

// Query returns a query builder for AcademicSchool.
func (c *AcademicSchoolClient) Query() *AcademicSchoolQuery {
	return &AcademicSchoolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAcademicSchool},
		inters: c.Interceptors(),
	}
}

// Get returns a AcademicSchool entity by its id.
func (c *AcademicSchoolClient) Get(ctx context.Context, id int) (*AcademicSchool, error) {
	return c.Query().Where(academicschool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AcademicSchoolClient) GetX(ctx context.Context, id int) *AcademicSchool {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstitution queries the institution edge of a AcademicSchool.
func (c *AcademicSchoolClient) QueryInstitution(as *AcademicSchool) *InstitutionQuery {
	query := (&InstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(academicschool.Table, academicschool.FieldID, id),
			sqlgraph.To(institution.Table, institution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, academicschool.InstitutionTable, academicschool.InstitutionColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourses queries the courses edge of a AcademicSchool.
func (c *AcademicSchoolClient) QueryCourses(as *AcademicSchool) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(academicschool.Table, academicschool.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, academicschool.CoursesTable, academicschool.CoursesColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AcademicSchoolClient) Hooks() []Hook {
	return c.hooks.AcademicSchool
}

// Interceptors returns the client interceptors.
func (c *AcademicSchoolClient) Interceptors() []Interceptor {
	return c.inters.AcademicSchool
}

func (c *AcademicSchoolClient) mutate(ctx context.Context, m *AcademicSchoolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AcademicSchoolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AcademicSchoolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AcademicSchoolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AcademicSchoolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AcademicSchool mutation op: %q", m.Op())
	}
}

// AccessoryClient is a client for the Accessory schema.
type AccessoryClient struct {
	config
}

// NewAccessoryClient returns a client for the Accessory from the given config.
func NewAccessoryClient(c config) *AccessoryClient {
	return &AccessoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accessory.Hooks(f(g(h())))`.
func (c *AccessoryClient) Use(hooks ...Hook) {
	c.hooks.Accessory = append(c.hooks.Accessory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accessory.Intercept(f(g(h())))`.
func (c *AccessoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Accessory = append(c.inters.Accessory, interceptors...)
}

// Create returns a builder for creating a Accessory entity.
func (c *AccessoryClient) Create() *AccessoryCreate {
	mutation := newAccessoryMutation(c.config, OpCreate)
	return &AccessoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Accessory entities.
func (c *AccessoryClient) CreateBulk(builders ...*AccessoryCreate) *AccessoryCreateBulk {
	return &AccessoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Accessory.
func (c *AccessoryClient) Update() *AccessoryUpdate {
	mutation := newAccessoryMutation(c.config, OpUpdate)
	return &AccessoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessoryClient) UpdateOne(a *Accessory) *AccessoryUpdateOne {
	mutation := newAccessoryMutation(c.config, OpUpdateOne, withAccessory(a))
	return &AccessoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessoryClient) UpdateOneID(id int) *AccessoryUpdateOne {
	mutation := newAccessoryMutation(c.config, OpUpdateOne, withAccessoryID(id))
	return &AccessoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Accessory.
func (c *AccessoryClient) Delete() *AccessoryDelete {
	mutation := newAccessoryMutation(c.config, OpDelete)
	return &AccessoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccessoryClient) DeleteOne(a *Accessory) *AccessoryDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccessoryClient) DeleteOneID(id int) *AccessoryDeleteOne {
	builder := c.Delete().Where(accessory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessoryDeleteOne{builder}
}

// Query returns a query builder for Accessory.
func (c *AccessoryClient) Query() *AccessoryQuery {
	return &AccessoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccessory},
		inters: c.Interceptors(),
	}
}

// Get returns a Accessory entity by its id.
func (c *AccessoryClient) Get(ctx context.Context, id int) (*Accessory, error) {
	return c.Query().Where(accessory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessoryClient) GetX(ctx context.Context, id int) *Accessory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRedemptions queries the redemptions edge of a Accessory.
func (c *AccessoryClient) QueryRedemptions(a *Accessory) *RedemptionQuery {
	query := (&RedemptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accessory.Table, accessory.FieldID, id),
			sqlgraph.To(redemption.Table, redemption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, accessory.RedemptionsTable, accessory.RedemptionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstitution queries the institution edge of a Accessory.
func (c *AccessoryClient) QueryInstitution(a *Accessory) *InstitutionQuery {
	query := (&InstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accessory.Table, accessory.FieldID, id),
			sqlgraph.To(institution.Table, institution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accessory.InstitutionTable, accessory.InstitutionColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccessoryClient) Hooks() []Hook {
	return c.hooks.Accessory
}

// Interceptors returns the client interceptors.
func (c *AccessoryClient) Interceptors() []Interceptor {
	return c.inters.Accessory
}

func (c *AccessoryClient) mutate(ctx context.Context, m *AccessoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccessoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccessoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccessoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccessoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Accessory mutation op: %q", m.Op())
	}
}

// CourseClient is a client for the Course schema.
type CourseClient struct {
	config
}

// NewCourseClient returns a client for the Course from the given config.
func NewCourseClient(c config) *CourseClient {
	return &CourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `course.Hooks(f(g(h())))`.
func (c *CourseClient) Use(hooks ...Hook) {
	c.hooks.Course = append(c.hooks.Course, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `course.Intercept(f(g(h())))`.
func (c *CourseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Course = append(c.inters.Course, interceptors...)
}

// Create returns a builder for creating a Course entity.
func (c *CourseClient) Create() *CourseCreate {
	mutation := newCourseMutation(c.config, OpCreate)
	return &CourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Course entities.
func (c *CourseClient) CreateBulk(builders ...*CourseCreate) *CourseCreateBulk {
	return &CourseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Course.
func (c *CourseClient) Update() *CourseUpdate {
	mutation := newCourseMutation(c.config, OpUpdate)
	return &CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseClient) UpdateOne(co *Course) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourse(co))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseClient) UpdateOneID(id int) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourseID(id))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Course.
func (c *CourseClient) Delete() *CourseDelete {
	mutation := newCourseMutation(c.config, OpDelete)
	return &CourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseClient) DeleteOne(co *Course) *CourseDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CourseClient) DeleteOneID(id int) *CourseDeleteOne {
	builder := c.Delete().Where(course.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseDeleteOne{builder}
}

// Query returns a query builder for Course.
func (c *CourseClient) Query() *CourseQuery {
	return &CourseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCourse},
		inters: c.Interceptors(),
	}
}

// Get returns a Course entity by its id.
func (c *CourseClient) Get(ctx context.Context, id int) (*Course, error) {
	return c.Query().Where(course.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseClient) GetX(ctx context.Context, id int) *Course {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudents queries the students edge of a Course.
func (c *CourseClient) QueryStudents(co *Course) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.StudentsTable, course.StudentsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAcademicSchool queries the academic_school edge of a Course.
func (c *CourseClient) QueryAcademicSchool(co *Course) *AcademicSchoolQuery {
	query := (&AcademicSchoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(academicschool.Table, academicschool.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, course.AcademicSchoolTable, course.AcademicSchoolColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CourseClient) Hooks() []Hook {
	return c.hooks.Course
}

// Interceptors returns the client interceptors.
func (c *CourseClient) Interceptors() []Interceptor {
	return c.inters.Course
}

func (c *CourseClient) mutate(ctx context.Context, m *CourseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CourseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CourseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Course mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id int) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id int) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id int) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id int) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Group.
func (c *GroupClient) QueryUsers(gr *Group) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, group.UsersTable, group.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupUsers queries the group_users edge of a Group.
func (c *GroupClient) QueryGroupUsers(gr *Group) *GroupUserQuery {
	query := (&GroupUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupuser.Table, groupuser.GroupColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, group.GroupUsersTable, group.GroupUsersColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	return c.inters.Group
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Group mutation op: %q", m.Op())
	}
}

// GroupUserClient is a client for the GroupUser schema.
type GroupUserClient struct {
	config
}

// NewGroupUserClient returns a client for the GroupUser from the given config.
func NewGroupUserClient(c config) *GroupUserClient {
	return &GroupUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupuser.Hooks(f(g(h())))`.
func (c *GroupUserClient) Use(hooks ...Hook) {
	c.hooks.GroupUser = append(c.hooks.GroupUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupuser.Intercept(f(g(h())))`.
func (c *GroupUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupUser = append(c.inters.GroupUser, interceptors...)
}

// Create returns a builder for creating a GroupUser entity.
func (c *GroupUserClient) Create() *GroupUserCreate {
	mutation := newGroupUserMutation(c.config, OpCreate)
	return &GroupUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupUser entities.
func (c *GroupUserClient) CreateBulk(builders ...*GroupUserCreate) *GroupUserCreateBulk {
	return &GroupUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupUser.
func (c *GroupUserClient) Update() *GroupUserUpdate {
	mutation := newGroupUserMutation(c.config, OpUpdate)
	return &GroupUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupUserClient) UpdateOne(gu *GroupUser) *GroupUserUpdateOne {
	mutation := newGroupUserMutation(c.config, OpUpdateOne)
	mutation.group = &gu.GroupID
	mutation.user = &gu.UserID
	return &GroupUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupUser.
func (c *GroupUserClient) Delete() *GroupUserDelete {
	mutation := newGroupUserMutation(c.config, OpDelete)
	return &GroupUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for GroupUser.
func (c *GroupUserClient) Query() *GroupUserQuery {
	return &GroupUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupUser},
		inters: c.Interceptors(),
	}
}

// QueryGroup queries the group edge of a GroupUser.
func (c *GroupUserClient) QueryGroup(gu *GroupUser) *GroupQuery {
	return c.Query().
		Where(groupuser.GroupID(gu.GroupID), groupuser.UserID(gu.UserID)).
		QueryGroup()
}

// QueryUser queries the user edge of a GroupUser.
func (c *GroupUserClient) QueryUser(gu *GroupUser) *UserQuery {
	return c.Query().
		Where(groupuser.GroupID(gu.GroupID), groupuser.UserID(gu.UserID)).
		QueryUser()
}

// Hooks returns the client hooks.
func (c *GroupUserClient) Hooks() []Hook {
	return c.hooks.GroupUser
}

// Interceptors returns the client interceptors.
func (c *GroupUserClient) Interceptors() []Interceptor {
	return c.inters.GroupUser
}

func (c *GroupUserClient) mutate(ctx context.Context, m *GroupUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GroupUser mutation op: %q", m.Op())
	}
}

// InstitutionClient is a client for the Institution schema.
type InstitutionClient struct {
	config
}

// NewInstitutionClient returns a client for the Institution from the given config.
func NewInstitutionClient(c config) *InstitutionClient {
	return &InstitutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `institution.Hooks(f(g(h())))`.
func (c *InstitutionClient) Use(hooks ...Hook) {
	c.hooks.Institution = append(c.hooks.Institution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `institution.Intercept(f(g(h())))`.
func (c *InstitutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Institution = append(c.inters.Institution, interceptors...)
}

// Create returns a builder for creating a Institution entity.
func (c *InstitutionClient) Create() *InstitutionCreate {
	mutation := newInstitutionMutation(c.config, OpCreate)
	return &InstitutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Institution entities.
func (c *InstitutionClient) CreateBulk(builders ...*InstitutionCreate) *InstitutionCreateBulk {
	return &InstitutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Institution.
func (c *InstitutionClient) Update() *InstitutionUpdate {
	mutation := newInstitutionMutation(c.config, OpUpdate)
	return &InstitutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstitutionClient) UpdateOne(i *Institution) *InstitutionUpdateOne {
	mutation := newInstitutionMutation(c.config, OpUpdateOne, withInstitution(i))
	return &InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstitutionClient) UpdateOneID(id int) *InstitutionUpdateOne {
	mutation := newInstitutionMutation(c.config, OpUpdateOne, withInstitutionID(id))
	return &InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Institution.
func (c *InstitutionClient) Delete() *InstitutionDelete {
	mutation := newInstitutionMutation(c.config, OpDelete)
	return &InstitutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstitutionClient) DeleteOne(i *Institution) *InstitutionDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstitutionClient) DeleteOneID(id int) *InstitutionDeleteOne {
	builder := c.Delete().Where(institution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstitutionDeleteOne{builder}
}

// Query returns a query builder for Institution.
func (c *InstitutionClient) Query() *InstitutionQuery {
	return &InstitutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstitution},
		inters: c.Interceptors(),
	}
}

// Get returns a Institution entity by its id.
func (c *InstitutionClient) Get(ctx context.Context, id int) (*Institution, error) {
	return c.Query().Where(institution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstitutionClient) GetX(ctx context.Context, id int) *Institution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdmins queries the admins edge of a Institution.
func (c *InstitutionClient) QueryAdmins(i *Institution) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(institution.Table, institution.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, institution.AdminsTable, institution.AdminsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVouchers queries the vouchers edge of a Institution.
func (c *InstitutionClient) QueryVouchers(i *Institution) *VoucherQuery {
	query := (&VoucherClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(institution.Table, institution.FieldID, id),
			sqlgraph.To(voucher.Table, voucher.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, institution.VouchersTable, institution.VouchersColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccessories queries the accessories edge of a Institution.
func (c *InstitutionClient) QueryAccessories(i *Institution) *AccessoryQuery {
	query := (&AccessoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(institution.Table, institution.FieldID, id),
			sqlgraph.To(accessory.Table, accessory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, institution.AccessoriesTable, institution.AccessoriesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAcademicSchools queries the academic_schools edge of a Institution.
func (c *InstitutionClient) QueryAcademicSchools(i *Institution) *AcademicSchoolQuery {
	query := (&AcademicSchoolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(institution.Table, institution.FieldID, id),
			sqlgraph.To(academicschool.Table, academicschool.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, institution.AcademicSchoolsTable, institution.AcademicSchoolsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstitutionClient) Hooks() []Hook {
	return c.hooks.Institution
}

// Interceptors returns the client interceptors.
func (c *InstitutionClient) Interceptors() []Interceptor {
	return c.inters.Institution
}

func (c *InstitutionClient) mutate(ctx context.Context, m *InstitutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstitutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstitutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstitutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstitutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Institution mutation op: %q", m.Op())
	}
}

// PetClient is a client for the Pet schema.
type PetClient struct {
	config
}

// NewPetClient returns a client for the Pet from the given config.
func NewPetClient(c config) *PetClient {
	return &PetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pet.Hooks(f(g(h())))`.
func (c *PetClient) Use(hooks ...Hook) {
	c.hooks.Pet = append(c.hooks.Pet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pet.Intercept(f(g(h())))`.
func (c *PetClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pet = append(c.inters.Pet, interceptors...)
}

// Create returns a builder for creating a Pet entity.
func (c *PetClient) Create() *PetCreate {
	mutation := newPetMutation(c.config, OpCreate)
	return &PetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pet entities.
func (c *PetClient) CreateBulk(builders ...*PetCreate) *PetCreateBulk {
	return &PetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pet.
func (c *PetClient) Update() *PetUpdate {
	mutation := newPetMutation(c.config, OpUpdate)
	return &PetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PetClient) UpdateOne(pe *Pet) *PetUpdateOne {
	mutation := newPetMutation(c.config, OpUpdateOne, withPet(pe))
	return &PetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PetClient) UpdateOneID(id int) *PetUpdateOne {
	mutation := newPetMutation(c.config, OpUpdateOne, withPetID(id))
	return &PetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pet.
func (c *PetClient) Delete() *PetDelete {
	mutation := newPetMutation(c.config, OpDelete)
	return &PetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PetClient) DeleteOne(pe *Pet) *PetDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PetClient) DeleteOneID(id int) *PetDeleteOne {
	builder := c.Delete().Where(pet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PetDeleteOne{builder}
}

// Query returns a query builder for Pet.
func (c *PetClient) Query() *PetQuery {
	return &PetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePet},
		inters: c.Interceptors(),
	}
}

// Get returns a Pet entity by its id.
func (c *PetClient) Get(ctx context.Context, id int) (*Pet, error) {
	return c.Query().Where(pet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PetClient) GetX(ctx context.Context, id int) *Pet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Pet.
func (c *PetClient) QueryOwner(pe *Pet) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, pet.OwnerTable, pet.OwnerPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPets queries the user_pets edge of a Pet.
func (c *PetClient) QueryUserPets(pe *Pet) *UserPetQuery {
	query := (&UserPetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pet.Table, pet.FieldID, id),
			sqlgraph.To(userpet.Table, userpet.PetColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, pet.UserPetsTable, pet.UserPetsColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PetClient) Hooks() []Hook {
	return c.hooks.Pet
}

// Interceptors returns the client interceptors.
func (c *PetClient) Interceptors() []Interceptor {
	return c.inters.Pet
}

func (c *PetClient) mutate(ctx context.Context, m *PetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Pet mutation op: %q", m.Op())
	}
}

// RedemptionClient is a client for the Redemption schema.
type RedemptionClient struct {
	config
}

// NewRedemptionClient returns a client for the Redemption from the given config.
func NewRedemptionClient(c config) *RedemptionClient {
	return &RedemptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `redemption.Hooks(f(g(h())))`.
func (c *RedemptionClient) Use(hooks ...Hook) {
	c.hooks.Redemption = append(c.hooks.Redemption, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `redemption.Intercept(f(g(h())))`.
func (c *RedemptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Redemption = append(c.inters.Redemption, interceptors...)
}

// Create returns a builder for creating a Redemption entity.
func (c *RedemptionClient) Create() *RedemptionCreate {
	mutation := newRedemptionMutation(c.config, OpCreate)
	return &RedemptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Redemption entities.
func (c *RedemptionClient) CreateBulk(builders ...*RedemptionCreate) *RedemptionCreateBulk {
	return &RedemptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Redemption.
func (c *RedemptionClient) Update() *RedemptionUpdate {
	mutation := newRedemptionMutation(c.config, OpUpdate)
	return &RedemptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RedemptionClient) UpdateOne(r *Redemption) *RedemptionUpdateOne {
	mutation := newRedemptionMutation(c.config, OpUpdateOne, withRedemption(r))
	return &RedemptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RedemptionClient) UpdateOneID(id int) *RedemptionUpdateOne {
	mutation := newRedemptionMutation(c.config, OpUpdateOne, withRedemptionID(id))
	return &RedemptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Redemption.
func (c *RedemptionClient) Delete() *RedemptionDelete {
	mutation := newRedemptionMutation(c.config, OpDelete)
	return &RedemptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RedemptionClient) DeleteOne(r *Redemption) *RedemptionDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RedemptionClient) DeleteOneID(id int) *RedemptionDeleteOne {
	builder := c.Delete().Where(redemption.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RedemptionDeleteOne{builder}
}

// Query returns a query builder for Redemption.
func (c *RedemptionClient) Query() *RedemptionQuery {
	return &RedemptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRedemption},
		inters: c.Interceptors(),
	}
}

// Get returns a Redemption entity by its id.
func (c *RedemptionClient) Get(ctx context.Context, id int) (*Redemption, error) {
	return c.Query().Where(redemption.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RedemptionClient) GetX(ctx context.Context, id int) *Redemption {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVoucher queries the voucher edge of a Redemption.
func (c *RedemptionClient) QueryVoucher(r *Redemption) *VoucherQuery {
	query := (&VoucherClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(redemption.Table, redemption.FieldID, id),
			sqlgraph.To(voucher.Table, voucher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, redemption.VoucherTable, redemption.VoucherColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccessory queries the accessory edge of a Redemption.
func (c *RedemptionClient) QueryAccessory(r *Redemption) *AccessoryQuery {
	query := (&AccessoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(redemption.Table, redemption.FieldID, id),
			sqlgraph.To(accessory.Table, accessory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, redemption.AccessoryTable, redemption.AccessoryColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Redemption.
func (c *RedemptionClient) QueryUser(r *Redemption) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(redemption.Table, redemption.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, redemption.UserTable, redemption.UserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RedemptionClient) Hooks() []Hook {
	return c.hooks.Redemption
}

// Interceptors returns the client interceptors.
func (c *RedemptionClient) Interceptors() []Interceptor {
	return c.inters.Redemption
}

func (c *RedemptionClient) mutate(ctx context.Context, m *RedemptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RedemptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RedemptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RedemptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RedemptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Redemption mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstitution queries the institution edge of a User.
func (c *UserClient) QueryInstitution(u *User) *InstitutionQuery {
	query := (&InstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(institution.Table, institution.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.InstitutionTable, user.InstitutionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a User.
func (c *UserClient) QueryCourse(u *User) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.CourseTable, user.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRedemptions queries the redemptions edge of a User.
func (c *UserClient) QueryRedemptions(u *User) *RedemptionQuery {
	query := (&RedemptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(redemption.Table, redemption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.RedemptionsTable, user.RedemptionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPet queries the pet edge of a User.
func (c *UserClient) QueryPet(u *User) *PetQuery {
	query := (&PetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(pet.Table, pet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.PetTable, user.PetPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a User.
func (c *UserClient) QueryGroups(u *User) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.GroupsTable, user.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPets queries the user_pets edge of a User.
func (c *UserClient) QueryUserPets(u *User) *UserPetQuery {
	query := (&UserPetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userpet.Table, userpet.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserPetsTable, user.UserPetsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupUsers queries the group_users edge of a User.
func (c *UserClient) QueryGroupUsers(u *User) *GroupUserQuery {
	query := (&GroupUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(groupuser.Table, groupuser.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.GroupUsersTable, user.GroupUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserPetClient is a client for the UserPet schema.
type UserPetClient struct {
	config
}

// NewUserPetClient returns a client for the UserPet from the given config.
func NewUserPetClient(c config) *UserPetClient {
	return &UserPetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpet.Hooks(f(g(h())))`.
func (c *UserPetClient) Use(hooks ...Hook) {
	c.hooks.UserPet = append(c.hooks.UserPet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userpet.Intercept(f(g(h())))`.
func (c *UserPetClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserPet = append(c.inters.UserPet, interceptors...)
}

// Create returns a builder for creating a UserPet entity.
func (c *UserPetClient) Create() *UserPetCreate {
	mutation := newUserPetMutation(c.config, OpCreate)
	return &UserPetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPet entities.
func (c *UserPetClient) CreateBulk(builders ...*UserPetCreate) *UserPetCreateBulk {
	return &UserPetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPet.
func (c *UserPetClient) Update() *UserPetUpdate {
	mutation := newUserPetMutation(c.config, OpUpdate)
	return &UserPetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPetClient) UpdateOne(up *UserPet) *UserPetUpdateOne {
	mutation := newUserPetMutation(c.config, OpUpdateOne)
	mutation.pet = &up.PetID
	mutation.user = &up.UserID
	return &UserPetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPet.
func (c *UserPetClient) Delete() *UserPetDelete {
	mutation := newUserPetMutation(c.config, OpDelete)
	return &UserPetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for UserPet.
func (c *UserPetClient) Query() *UserPetQuery {
	return &UserPetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserPet},
		inters: c.Interceptors(),
	}
}

// QueryPet queries the pet edge of a UserPet.
func (c *UserPetClient) QueryPet(up *UserPet) *PetQuery {
	return c.Query().
		Where(userpet.PetID(up.PetID), userpet.UserID(up.UserID)).
		QueryPet()
}

// QueryUser queries the user edge of a UserPet.
func (c *UserPetClient) QueryUser(up *UserPet) *UserQuery {
	return c.Query().
		Where(userpet.PetID(up.PetID), userpet.UserID(up.UserID)).
		QueryUser()
}

// Hooks returns the client hooks.
func (c *UserPetClient) Hooks() []Hook {
	return c.hooks.UserPet
}

// Interceptors returns the client interceptors.
func (c *UserPetClient) Interceptors() []Interceptor {
	return c.inters.UserPet
}

func (c *UserPetClient) mutate(ctx context.Context, m *UserPetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserPetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserPetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserPetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserPetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserPet mutation op: %q", m.Op())
	}
}

// VoucherClient is a client for the Voucher schema.
type VoucherClient struct {
	config
}

// NewVoucherClient returns a client for the Voucher from the given config.
func NewVoucherClient(c config) *VoucherClient {
	return &VoucherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `voucher.Hooks(f(g(h())))`.
func (c *VoucherClient) Use(hooks ...Hook) {
	c.hooks.Voucher = append(c.hooks.Voucher, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `voucher.Intercept(f(g(h())))`.
func (c *VoucherClient) Intercept(interceptors ...Interceptor) {
	c.inters.Voucher = append(c.inters.Voucher, interceptors...)
}

// Create returns a builder for creating a Voucher entity.
func (c *VoucherClient) Create() *VoucherCreate {
	mutation := newVoucherMutation(c.config, OpCreate)
	return &VoucherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Voucher entities.
func (c *VoucherClient) CreateBulk(builders ...*VoucherCreate) *VoucherCreateBulk {
	return &VoucherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Voucher.
func (c *VoucherClient) Update() *VoucherUpdate {
	mutation := newVoucherMutation(c.config, OpUpdate)
	return &VoucherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VoucherClient) UpdateOne(v *Voucher) *VoucherUpdateOne {
	mutation := newVoucherMutation(c.config, OpUpdateOne, withVoucher(v))
	return &VoucherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VoucherClient) UpdateOneID(id int) *VoucherUpdateOne {
	mutation := newVoucherMutation(c.config, OpUpdateOne, withVoucherID(id))
	return &VoucherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Voucher.
func (c *VoucherClient) Delete() *VoucherDelete {
	mutation := newVoucherMutation(c.config, OpDelete)
	return &VoucherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VoucherClient) DeleteOne(v *Voucher) *VoucherDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VoucherClient) DeleteOneID(id int) *VoucherDeleteOne {
	builder := c.Delete().Where(voucher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VoucherDeleteOne{builder}
}

// Query returns a query builder for Voucher.
func (c *VoucherClient) Query() *VoucherQuery {
	return &VoucherQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVoucher},
		inters: c.Interceptors(),
	}
}

// Get returns a Voucher entity by its id.
func (c *VoucherClient) Get(ctx context.Context, id int) (*Voucher, error) {
	return c.Query().Where(voucher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VoucherClient) GetX(ctx context.Context, id int) *Voucher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRedemptions queries the redemptions edge of a Voucher.
func (c *VoucherClient) QueryRedemptions(v *Voucher) *RedemptionQuery {
	query := (&RedemptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voucher.Table, voucher.FieldID, id),
			sqlgraph.To(redemption.Table, redemption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, voucher.RedemptionsTable, voucher.RedemptionsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstitution queries the institution edge of a Voucher.
func (c *VoucherClient) QueryInstitution(v *Voucher) *InstitutionQuery {
	query := (&InstitutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(voucher.Table, voucher.FieldID, id),
			sqlgraph.To(institution.Table, institution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, voucher.InstitutionTable, voucher.InstitutionColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VoucherClient) Hooks() []Hook {
	return c.hooks.Voucher
}

// Interceptors returns the client interceptors.
func (c *VoucherClient) Interceptors() []Interceptor {
	return c.inters.Voucher
}

func (c *VoucherClient) mutate(ctx context.Context, m *VoucherMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VoucherCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VoucherUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VoucherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VoucherDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Voucher mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AcademicSchool, Accessory, Course, Group, GroupUser, Institution, Pet,
		Redemption, User, UserPet, Voucher []ent.Hook
	}
	inters struct {
		AcademicSchool, Accessory, Course, Group, GroupUser, Institution, Pet,
		Redemption, User, UserPet, Voucher []ent.Interceptor
	}
)
