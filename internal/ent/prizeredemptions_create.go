// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/prize"
	"github.com/np-inprove/server/internal/ent/prizeredemptions"
	"github.com/np-inprove/server/internal/ent/user"
)

// PrizeRedemptionsCreate is the builder for creating a PrizeRedemptions entity.
type PrizeRedemptionsCreate struct {
	config
	mutation *PrizeRedemptionsMutation
	hooks    []Hook
}

// SetRedeemedAt sets the "redeemed_at" field.
func (prc *PrizeRedemptionsCreate) SetRedeemedAt(t time.Time) *PrizeRedemptionsCreate {
	prc.mutation.SetRedeemedAt(t)
	return prc
}

// SetPrizeID sets the "prize_id" field.
func (prc *PrizeRedemptionsCreate) SetPrizeID(i int) *PrizeRedemptionsCreate {
	prc.mutation.SetPrizeID(i)
	return prc
}

// SetUserID sets the "user_id" field.
func (prc *PrizeRedemptionsCreate) SetUserID(i int) *PrizeRedemptionsCreate {
	prc.mutation.SetUserID(i)
	return prc
}

// SetPrize sets the "prize" edge to the Prize entity.
func (prc *PrizeRedemptionsCreate) SetPrize(p *Prize) *PrizeRedemptionsCreate {
	return prc.SetPrizeID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (prc *PrizeRedemptionsCreate) SetUser(u *User) *PrizeRedemptionsCreate {
	return prc.SetUserID(u.ID)
}

// Mutation returns the PrizeRedemptionsMutation object of the builder.
func (prc *PrizeRedemptionsCreate) Mutation() *PrizeRedemptionsMutation {
	return prc.mutation
}

// Save creates the PrizeRedemptions in the database.
func (prc *PrizeRedemptionsCreate) Save(ctx context.Context) (*PrizeRedemptions, error) {
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PrizeRedemptionsCreate) SaveX(ctx context.Context) *PrizeRedemptions {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PrizeRedemptionsCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PrizeRedemptionsCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PrizeRedemptionsCreate) check() error {
	if _, ok := prc.mutation.RedeemedAt(); !ok {
		return &ValidationError{Name: "redeemed_at", err: errors.New(`ent: missing required field "PrizeRedemptions.redeemed_at"`)}
	}
	if _, ok := prc.mutation.PrizeID(); !ok {
		return &ValidationError{Name: "prize_id", err: errors.New(`ent: missing required field "PrizeRedemptions.prize_id"`)}
	}
	if _, ok := prc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "PrizeRedemptions.user_id"`)}
	}
	if _, ok := prc.mutation.PrizeID(); !ok {
		return &ValidationError{Name: "prize", err: errors.New(`ent: missing required edge "PrizeRedemptions.prize"`)}
	}
	if _, ok := prc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PrizeRedemptions.user"`)}
	}
	return nil
}

func (prc *PrizeRedemptionsCreate) sqlSave(ctx context.Context) (*PrizeRedemptions, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (prc *PrizeRedemptionsCreate) createSpec() (*PrizeRedemptions, *sqlgraph.CreateSpec) {
	var (
		_node = &PrizeRedemptions{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(prizeredemptions.Table, nil)
	)
	if value, ok := prc.mutation.RedeemedAt(); ok {
		_spec.SetField(prizeredemptions.FieldRedeemedAt, field.TypeTime, value)
		_node.RedeemedAt = value
	}
	if nodes := prc.mutation.PrizeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.PrizeTable,
			Columns: []string{prizeredemptions.PrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prize.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PrizeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.UserTable,
			Columns: []string{prizeredemptions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PrizeRedemptionsCreateBulk is the builder for creating many PrizeRedemptions entities in bulk.
type PrizeRedemptionsCreateBulk struct {
	config
	builders []*PrizeRedemptionsCreate
}

// Save creates the PrizeRedemptions entities in the database.
func (prcb *PrizeRedemptionsCreateBulk) Save(ctx context.Context) ([]*PrizeRedemptions, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PrizeRedemptions, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrizeRedemptionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PrizeRedemptionsCreateBulk) SaveX(ctx context.Context) []*PrizeRedemptions {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PrizeRedemptionsCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PrizeRedemptionsCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
