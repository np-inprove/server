// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/academicschool"
	"github.com/np-inprove/server/internal/ent/course"
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/pet"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/prize"
	"github.com/np-inprove/server/internal/ent/prizeredemptions"
	"github.com/np-inprove/server/internal/ent/user"
	"github.com/np-inprove/server/internal/ent/userpet"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAcademicSchool   = "AcademicSchool"
	TypeCourse           = "Course"
	TypeInstitution      = "Institution"
	TypePet              = "Pet"
	TypePrize            = "Prize"
	TypePrizeRedemptions = "PrizeRedemptions"
	TypeUser             = "User"
	TypeUserPet          = "UserPet"
)

// AcademicSchoolMutation represents an operation that mutates the AcademicSchool nodes in the graph.
type AcademicSchoolMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	school_code        *string
	clearedFields      map[string]struct{}
	institution        *int
	clearedinstitution bool
	courses            map[int]struct{}
	removedcourses     map[int]struct{}
	clearedcourses     bool
	done               bool
	oldValue           func(context.Context) (*AcademicSchool, error)
	predicates         []predicate.AcademicSchool
}

var _ ent.Mutation = (*AcademicSchoolMutation)(nil)

// academicschoolOption allows management of the mutation configuration using functional options.
type academicschoolOption func(*AcademicSchoolMutation)

// newAcademicSchoolMutation creates new mutation for the AcademicSchool entity.
func newAcademicSchoolMutation(c config, op Op, opts ...academicschoolOption) *AcademicSchoolMutation {
	m := &AcademicSchoolMutation{
		config:        c,
		op:            op,
		typ:           TypeAcademicSchool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAcademicSchoolID sets the ID field of the mutation.
func withAcademicSchoolID(id int) academicschoolOption {
	return func(m *AcademicSchoolMutation) {
		var (
			err   error
			once  sync.Once
			value *AcademicSchool
		)
		m.oldValue = func(ctx context.Context) (*AcademicSchool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AcademicSchool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAcademicSchool sets the old AcademicSchool of the mutation.
func withAcademicSchool(node *AcademicSchool) academicschoolOption {
	return func(m *AcademicSchoolMutation) {
		m.oldValue = func(context.Context) (*AcademicSchool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AcademicSchoolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AcademicSchoolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AcademicSchoolMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AcademicSchoolMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AcademicSchool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AcademicSchoolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AcademicSchoolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AcademicSchool entity.
// If the AcademicSchool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcademicSchoolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AcademicSchoolMutation) ResetName() {
	m.name = nil
}

// SetSchoolCode sets the "school_code" field.
func (m *AcademicSchoolMutation) SetSchoolCode(s string) {
	m.school_code = &s
}

// SchoolCode returns the value of the "school_code" field in the mutation.
func (m *AcademicSchoolMutation) SchoolCode() (r string, exists bool) {
	v := m.school_code
	if v == nil {
		return
	}
	return *v, true
}

// OldSchoolCode returns the old "school_code" field's value of the AcademicSchool entity.
// If the AcademicSchool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcademicSchoolMutation) OldSchoolCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSchoolCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSchoolCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSchoolCode: %w", err)
	}
	return oldValue.SchoolCode, nil
}

// ResetSchoolCode resets all changes to the "school_code" field.
func (m *AcademicSchoolMutation) ResetSchoolCode() {
	m.school_code = nil
}

// SetInstitutionID sets the "institution" edge to the Institution entity by id.
func (m *AcademicSchoolMutation) SetInstitutionID(id int) {
	m.institution = &id
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (m *AcademicSchoolMutation) ClearInstitution() {
	m.clearedinstitution = true
}

// InstitutionCleared reports if the "institution" edge to the Institution entity was cleared.
func (m *AcademicSchoolMutation) InstitutionCleared() bool {
	return m.clearedinstitution
}

// InstitutionID returns the "institution" edge ID in the mutation.
func (m *AcademicSchoolMutation) InstitutionID() (id int, exists bool) {
	if m.institution != nil {
		return *m.institution, true
	}
	return
}

// InstitutionIDs returns the "institution" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InstitutionID instead. It exists only for internal usage by the builders.
func (m *AcademicSchoolMutation) InstitutionIDs() (ids []int) {
	if id := m.institution; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInstitution resets all changes to the "institution" edge.
func (m *AcademicSchoolMutation) ResetInstitution() {
	m.institution = nil
	m.clearedinstitution = false
}

// AddCourseIDs adds the "courses" edge to the Course entity by ids.
func (m *AcademicSchoolMutation) AddCourseIDs(ids ...int) {
	if m.courses == nil {
		m.courses = make(map[int]struct{})
	}
	for i := range ids {
		m.courses[ids[i]] = struct{}{}
	}
}

// ClearCourses clears the "courses" edge to the Course entity.
func (m *AcademicSchoolMutation) ClearCourses() {
	m.clearedcourses = true
}

// CoursesCleared reports if the "courses" edge to the Course entity was cleared.
func (m *AcademicSchoolMutation) CoursesCleared() bool {
	return m.clearedcourses
}

// RemoveCourseIDs removes the "courses" edge to the Course entity by IDs.
func (m *AcademicSchoolMutation) RemoveCourseIDs(ids ...int) {
	if m.removedcourses == nil {
		m.removedcourses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.courses, ids[i])
		m.removedcourses[ids[i]] = struct{}{}
	}
}

// RemovedCourses returns the removed IDs of the "courses" edge to the Course entity.
func (m *AcademicSchoolMutation) RemovedCoursesIDs() (ids []int) {
	for id := range m.removedcourses {
		ids = append(ids, id)
	}
	return
}

// CoursesIDs returns the "courses" edge IDs in the mutation.
func (m *AcademicSchoolMutation) CoursesIDs() (ids []int) {
	for id := range m.courses {
		ids = append(ids, id)
	}
	return
}

// ResetCourses resets all changes to the "courses" edge.
func (m *AcademicSchoolMutation) ResetCourses() {
	m.courses = nil
	m.clearedcourses = false
	m.removedcourses = nil
}

// Where appends a list predicates to the AcademicSchoolMutation builder.
func (m *AcademicSchoolMutation) Where(ps ...predicate.AcademicSchool) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AcademicSchoolMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AcademicSchoolMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AcademicSchool, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AcademicSchoolMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AcademicSchoolMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AcademicSchool).
func (m *AcademicSchoolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AcademicSchoolMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, academicschool.FieldName)
	}
	if m.school_code != nil {
		fields = append(fields, academicschool.FieldSchoolCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AcademicSchoolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case academicschool.FieldName:
		return m.Name()
	case academicschool.FieldSchoolCode:
		return m.SchoolCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AcademicSchoolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case academicschool.FieldName:
		return m.OldName(ctx)
	case academicschool.FieldSchoolCode:
		return m.OldSchoolCode(ctx)
	}
	return nil, fmt.Errorf("unknown AcademicSchool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AcademicSchoolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case academicschool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case academicschool.FieldSchoolCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSchoolCode(v)
		return nil
	}
	return fmt.Errorf("unknown AcademicSchool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AcademicSchoolMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AcademicSchoolMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AcademicSchoolMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AcademicSchool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AcademicSchoolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AcademicSchoolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AcademicSchoolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AcademicSchool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AcademicSchoolMutation) ResetField(name string) error {
	switch name {
	case academicschool.FieldName:
		m.ResetName()
		return nil
	case academicschool.FieldSchoolCode:
		m.ResetSchoolCode()
		return nil
	}
	return fmt.Errorf("unknown AcademicSchool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AcademicSchoolMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.institution != nil {
		edges = append(edges, academicschool.EdgeInstitution)
	}
	if m.courses != nil {
		edges = append(edges, academicschool.EdgeCourses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AcademicSchoolMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case academicschool.EdgeInstitution:
		if id := m.institution; id != nil {
			return []ent.Value{*id}
		}
	case academicschool.EdgeCourses:
		ids := make([]ent.Value, 0, len(m.courses))
		for id := range m.courses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AcademicSchoolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcourses != nil {
		edges = append(edges, academicschool.EdgeCourses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AcademicSchoolMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case academicschool.EdgeCourses:
		ids := make([]ent.Value, 0, len(m.removedcourses))
		for id := range m.removedcourses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AcademicSchoolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedinstitution {
		edges = append(edges, academicschool.EdgeInstitution)
	}
	if m.clearedcourses {
		edges = append(edges, academicschool.EdgeCourses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AcademicSchoolMutation) EdgeCleared(name string) bool {
	switch name {
	case academicschool.EdgeInstitution:
		return m.clearedinstitution
	case academicschool.EdgeCourses:
		return m.clearedcourses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AcademicSchoolMutation) ClearEdge(name string) error {
	switch name {
	case academicschool.EdgeInstitution:
		m.ClearInstitution()
		return nil
	}
	return fmt.Errorf("unknown AcademicSchool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AcademicSchoolMutation) ResetEdge(name string) error {
	switch name {
	case academicschool.EdgeInstitution:
		m.ResetInstitution()
		return nil
	case academicschool.EdgeCourses:
		m.ResetCourses()
		return nil
	}
	return fmt.Errorf("unknown AcademicSchool edge %s", name)
}

// CourseMutation represents an operation that mutates the Course nodes in the graph.
type CourseMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	course_id              *string
	clearedFields          map[string]struct{}
	students               map[int]struct{}
	removedstudents        map[int]struct{}
	clearedstudents        bool
	academic_school        *int
	clearedacademic_school bool
	done                   bool
	oldValue               func(context.Context) (*Course, error)
	predicates             []predicate.Course
}

var _ ent.Mutation = (*CourseMutation)(nil)

// courseOption allows management of the mutation configuration using functional options.
type courseOption func(*CourseMutation)

// newCourseMutation creates new mutation for the Course entity.
func newCourseMutation(c config, op Op, opts ...courseOption) *CourseMutation {
	m := &CourseMutation{
		config:        c,
		op:            op,
		typ:           TypeCourse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCourseID sets the ID field of the mutation.
func withCourseID(id int) courseOption {
	return func(m *CourseMutation) {
		var (
			err   error
			once  sync.Once
			value *Course
		)
		m.oldValue = func(ctx context.Context) (*Course, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Course.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCourse sets the old Course of the mutation.
func withCourse(node *Course) courseOption {
	return func(m *CourseMutation) {
		m.oldValue = func(context.Context) (*Course, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CourseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CourseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CourseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CourseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Course.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CourseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CourseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CourseMutation) ResetName() {
	m.name = nil
}

// SetCourseID sets the "course_id" field.
func (m *CourseMutation) SetCourseID(s string) {
	m.course_id = &s
}

// CourseID returns the value of the "course_id" field in the mutation.
func (m *CourseMutation) CourseID() (r string, exists bool) {
	v := m.course_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCourseID returns the old "course_id" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldCourseID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCourseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCourseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCourseID: %w", err)
	}
	return oldValue.CourseID, nil
}

// ResetCourseID resets all changes to the "course_id" field.
func (m *CourseMutation) ResetCourseID() {
	m.course_id = nil
}

// AddStudentIDs adds the "students" edge to the User entity by ids.
func (m *CourseMutation) AddStudentIDs(ids ...int) {
	if m.students == nil {
		m.students = make(map[int]struct{})
	}
	for i := range ids {
		m.students[ids[i]] = struct{}{}
	}
}

// ClearStudents clears the "students" edge to the User entity.
func (m *CourseMutation) ClearStudents() {
	m.clearedstudents = true
}

// StudentsCleared reports if the "students" edge to the User entity was cleared.
func (m *CourseMutation) StudentsCleared() bool {
	return m.clearedstudents
}

// RemoveStudentIDs removes the "students" edge to the User entity by IDs.
func (m *CourseMutation) RemoveStudentIDs(ids ...int) {
	if m.removedstudents == nil {
		m.removedstudents = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.students, ids[i])
		m.removedstudents[ids[i]] = struct{}{}
	}
}

// RemovedStudents returns the removed IDs of the "students" edge to the User entity.
func (m *CourseMutation) RemovedStudentsIDs() (ids []int) {
	for id := range m.removedstudents {
		ids = append(ids, id)
	}
	return
}

// StudentsIDs returns the "students" edge IDs in the mutation.
func (m *CourseMutation) StudentsIDs() (ids []int) {
	for id := range m.students {
		ids = append(ids, id)
	}
	return
}

// ResetStudents resets all changes to the "students" edge.
func (m *CourseMutation) ResetStudents() {
	m.students = nil
	m.clearedstudents = false
	m.removedstudents = nil
}

// SetAcademicSchoolID sets the "academic_school" edge to the AcademicSchool entity by id.
func (m *CourseMutation) SetAcademicSchoolID(id int) {
	m.academic_school = &id
}

// ClearAcademicSchool clears the "academic_school" edge to the AcademicSchool entity.
func (m *CourseMutation) ClearAcademicSchool() {
	m.clearedacademic_school = true
}

// AcademicSchoolCleared reports if the "academic_school" edge to the AcademicSchool entity was cleared.
func (m *CourseMutation) AcademicSchoolCleared() bool {
	return m.clearedacademic_school
}

// AcademicSchoolID returns the "academic_school" edge ID in the mutation.
func (m *CourseMutation) AcademicSchoolID() (id int, exists bool) {
	if m.academic_school != nil {
		return *m.academic_school, true
	}
	return
}

// AcademicSchoolIDs returns the "academic_school" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AcademicSchoolID instead. It exists only for internal usage by the builders.
func (m *CourseMutation) AcademicSchoolIDs() (ids []int) {
	if id := m.academic_school; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAcademicSchool resets all changes to the "academic_school" edge.
func (m *CourseMutation) ResetAcademicSchool() {
	m.academic_school = nil
	m.clearedacademic_school = false
}

// Where appends a list predicates to the CourseMutation builder.
func (m *CourseMutation) Where(ps ...predicate.Course) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CourseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CourseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Course, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CourseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CourseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Course).
func (m *CourseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CourseMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, course.FieldName)
	}
	if m.course_id != nil {
		fields = append(fields, course.FieldCourseID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CourseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case course.FieldName:
		return m.Name()
	case course.FieldCourseID:
		return m.CourseID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CourseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case course.FieldName:
		return m.OldName(ctx)
	case course.FieldCourseID:
		return m.OldCourseID(ctx)
	}
	return nil, fmt.Errorf("unknown Course field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case course.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case course.FieldCourseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCourseID(v)
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CourseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CourseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Course numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CourseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CourseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CourseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Course nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CourseMutation) ResetField(name string) error {
	switch name {
	case course.FieldName:
		m.ResetName()
		return nil
	case course.FieldCourseID:
		m.ResetCourseID()
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CourseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.students != nil {
		edges = append(edges, course.EdgeStudents)
	}
	if m.academic_school != nil {
		edges = append(edges, course.EdgeAcademicSchool)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CourseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.students))
		for id := range m.students {
			ids = append(ids, id)
		}
		return ids
	case course.EdgeAcademicSchool:
		if id := m.academic_school; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CourseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedstudents != nil {
		edges = append(edges, course.EdgeStudents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CourseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.removedstudents))
		for id := range m.removedstudents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CourseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstudents {
		edges = append(edges, course.EdgeStudents)
	}
	if m.clearedacademic_school {
		edges = append(edges, course.EdgeAcademicSchool)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CourseMutation) EdgeCleared(name string) bool {
	switch name {
	case course.EdgeStudents:
		return m.clearedstudents
	case course.EdgeAcademicSchool:
		return m.clearedacademic_school
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CourseMutation) ClearEdge(name string) error {
	switch name {
	case course.EdgeAcademicSchool:
		m.ClearAcademicSchool()
		return nil
	}
	return fmt.Errorf("unknown Course unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CourseMutation) ResetEdge(name string) error {
	switch name {
	case course.EdgeStudents:
		m.ResetStudents()
		return nil
	case course.EdgeAcademicSchool:
		m.ResetAcademicSchool()
		return nil
	}
	return fmt.Errorf("unknown Course edge %s", name)
}

// InstitutionMutation represents an operation that mutates the Institution nodes in the graph.
type InstitutionMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	clearedFields           map[string]struct{}
	admins                  map[int]struct{}
	removedadmins           map[int]struct{}
	clearedadmins           bool
	prizes                  map[int]struct{}
	removedprizes           map[int]struct{}
	clearedprizes           bool
	academic_schools        map[int]struct{}
	removedacademic_schools map[int]struct{}
	clearedacademic_schools bool
	done                    bool
	oldValue                func(context.Context) (*Institution, error)
	predicates              []predicate.Institution
}

var _ ent.Mutation = (*InstitutionMutation)(nil)

// institutionOption allows management of the mutation configuration using functional options.
type institutionOption func(*InstitutionMutation)

// newInstitutionMutation creates new mutation for the Institution entity.
func newInstitutionMutation(c config, op Op, opts ...institutionOption) *InstitutionMutation {
	m := &InstitutionMutation{
		config:        c,
		op:            op,
		typ:           TypeInstitution,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInstitutionID sets the ID field of the mutation.
func withInstitutionID(id int) institutionOption {
	return func(m *InstitutionMutation) {
		var (
			err   error
			once  sync.Once
			value *Institution
		)
		m.oldValue = func(ctx context.Context) (*Institution, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Institution.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInstitution sets the old Institution of the mutation.
func withInstitution(node *Institution) institutionOption {
	return func(m *InstitutionMutation) {
		m.oldValue = func(context.Context) (*Institution, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InstitutionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InstitutionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InstitutionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InstitutionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Institution.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *InstitutionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *InstitutionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Institution entity.
// If the Institution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstitutionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *InstitutionMutation) ResetName() {
	m.name = nil
}

// AddAdminIDs adds the "admins" edge to the User entity by ids.
func (m *InstitutionMutation) AddAdminIDs(ids ...int) {
	if m.admins == nil {
		m.admins = make(map[int]struct{})
	}
	for i := range ids {
		m.admins[ids[i]] = struct{}{}
	}
}

// ClearAdmins clears the "admins" edge to the User entity.
func (m *InstitutionMutation) ClearAdmins() {
	m.clearedadmins = true
}

// AdminsCleared reports if the "admins" edge to the User entity was cleared.
func (m *InstitutionMutation) AdminsCleared() bool {
	return m.clearedadmins
}

// RemoveAdminIDs removes the "admins" edge to the User entity by IDs.
func (m *InstitutionMutation) RemoveAdminIDs(ids ...int) {
	if m.removedadmins == nil {
		m.removedadmins = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.admins, ids[i])
		m.removedadmins[ids[i]] = struct{}{}
	}
}

// RemovedAdmins returns the removed IDs of the "admins" edge to the User entity.
func (m *InstitutionMutation) RemovedAdminsIDs() (ids []int) {
	for id := range m.removedadmins {
		ids = append(ids, id)
	}
	return
}

// AdminsIDs returns the "admins" edge IDs in the mutation.
func (m *InstitutionMutation) AdminsIDs() (ids []int) {
	for id := range m.admins {
		ids = append(ids, id)
	}
	return
}

// ResetAdmins resets all changes to the "admins" edge.
func (m *InstitutionMutation) ResetAdmins() {
	m.admins = nil
	m.clearedadmins = false
	m.removedadmins = nil
}

// AddPrizeIDs adds the "prizes" edge to the Prize entity by ids.
func (m *InstitutionMutation) AddPrizeIDs(ids ...int) {
	if m.prizes == nil {
		m.prizes = make(map[int]struct{})
	}
	for i := range ids {
		m.prizes[ids[i]] = struct{}{}
	}
}

// ClearPrizes clears the "prizes" edge to the Prize entity.
func (m *InstitutionMutation) ClearPrizes() {
	m.clearedprizes = true
}

// PrizesCleared reports if the "prizes" edge to the Prize entity was cleared.
func (m *InstitutionMutation) PrizesCleared() bool {
	return m.clearedprizes
}

// RemovePrizeIDs removes the "prizes" edge to the Prize entity by IDs.
func (m *InstitutionMutation) RemovePrizeIDs(ids ...int) {
	if m.removedprizes == nil {
		m.removedprizes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.prizes, ids[i])
		m.removedprizes[ids[i]] = struct{}{}
	}
}

// RemovedPrizes returns the removed IDs of the "prizes" edge to the Prize entity.
func (m *InstitutionMutation) RemovedPrizesIDs() (ids []int) {
	for id := range m.removedprizes {
		ids = append(ids, id)
	}
	return
}

// PrizesIDs returns the "prizes" edge IDs in the mutation.
func (m *InstitutionMutation) PrizesIDs() (ids []int) {
	for id := range m.prizes {
		ids = append(ids, id)
	}
	return
}

// ResetPrizes resets all changes to the "prizes" edge.
func (m *InstitutionMutation) ResetPrizes() {
	m.prizes = nil
	m.clearedprizes = false
	m.removedprizes = nil
}

// AddAcademicSchoolIDs adds the "academic_schools" edge to the AcademicSchool entity by ids.
func (m *InstitutionMutation) AddAcademicSchoolIDs(ids ...int) {
	if m.academic_schools == nil {
		m.academic_schools = make(map[int]struct{})
	}
	for i := range ids {
		m.academic_schools[ids[i]] = struct{}{}
	}
}

// ClearAcademicSchools clears the "academic_schools" edge to the AcademicSchool entity.
func (m *InstitutionMutation) ClearAcademicSchools() {
	m.clearedacademic_schools = true
}

// AcademicSchoolsCleared reports if the "academic_schools" edge to the AcademicSchool entity was cleared.
func (m *InstitutionMutation) AcademicSchoolsCleared() bool {
	return m.clearedacademic_schools
}

// RemoveAcademicSchoolIDs removes the "academic_schools" edge to the AcademicSchool entity by IDs.
func (m *InstitutionMutation) RemoveAcademicSchoolIDs(ids ...int) {
	if m.removedacademic_schools == nil {
		m.removedacademic_schools = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.academic_schools, ids[i])
		m.removedacademic_schools[ids[i]] = struct{}{}
	}
}

// RemovedAcademicSchools returns the removed IDs of the "academic_schools" edge to the AcademicSchool entity.
func (m *InstitutionMutation) RemovedAcademicSchoolsIDs() (ids []int) {
	for id := range m.removedacademic_schools {
		ids = append(ids, id)
	}
	return
}

// AcademicSchoolsIDs returns the "academic_schools" edge IDs in the mutation.
func (m *InstitutionMutation) AcademicSchoolsIDs() (ids []int) {
	for id := range m.academic_schools {
		ids = append(ids, id)
	}
	return
}

// ResetAcademicSchools resets all changes to the "academic_schools" edge.
func (m *InstitutionMutation) ResetAcademicSchools() {
	m.academic_schools = nil
	m.clearedacademic_schools = false
	m.removedacademic_schools = nil
}

// Where appends a list predicates to the InstitutionMutation builder.
func (m *InstitutionMutation) Where(ps ...predicate.Institution) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InstitutionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InstitutionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Institution, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InstitutionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InstitutionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Institution).
func (m *InstitutionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InstitutionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, institution.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InstitutionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case institution.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InstitutionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case institution.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Institution field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstitutionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case institution.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Institution field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InstitutionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InstitutionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstitutionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Institution numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InstitutionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InstitutionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InstitutionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Institution nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InstitutionMutation) ResetField(name string) error {
	switch name {
	case institution.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Institution field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InstitutionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.admins != nil {
		edges = append(edges, institution.EdgeAdmins)
	}
	if m.prizes != nil {
		edges = append(edges, institution.EdgePrizes)
	}
	if m.academic_schools != nil {
		edges = append(edges, institution.EdgeAcademicSchools)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InstitutionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case institution.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.admins))
		for id := range m.admins {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgePrizes:
		ids := make([]ent.Value, 0, len(m.prizes))
		for id := range m.prizes {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgeAcademicSchools:
		ids := make([]ent.Value, 0, len(m.academic_schools))
		for id := range m.academic_schools {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InstitutionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedadmins != nil {
		edges = append(edges, institution.EdgeAdmins)
	}
	if m.removedprizes != nil {
		edges = append(edges, institution.EdgePrizes)
	}
	if m.removedacademic_schools != nil {
		edges = append(edges, institution.EdgeAcademicSchools)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InstitutionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case institution.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.removedadmins))
		for id := range m.removedadmins {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgePrizes:
		ids := make([]ent.Value, 0, len(m.removedprizes))
		for id := range m.removedprizes {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgeAcademicSchools:
		ids := make([]ent.Value, 0, len(m.removedacademic_schools))
		for id := range m.removedacademic_schools {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InstitutionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedadmins {
		edges = append(edges, institution.EdgeAdmins)
	}
	if m.clearedprizes {
		edges = append(edges, institution.EdgePrizes)
	}
	if m.clearedacademic_schools {
		edges = append(edges, institution.EdgeAcademicSchools)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InstitutionMutation) EdgeCleared(name string) bool {
	switch name {
	case institution.EdgeAdmins:
		return m.clearedadmins
	case institution.EdgePrizes:
		return m.clearedprizes
	case institution.EdgeAcademicSchools:
		return m.clearedacademic_schools
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InstitutionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Institution unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InstitutionMutation) ResetEdge(name string) error {
	switch name {
	case institution.EdgeAdmins:
		m.ResetAdmins()
		return nil
	case institution.EdgePrizes:
		m.ResetPrizes()
		return nil
	case institution.EdgeAcademicSchools:
		m.ResetAcademicSchools()
		return nil
	}
	return fmt.Errorf("unknown Institution edge %s", name)
}

// PetMutation represents an operation that mutates the Pet nodes in the graph.
type PetMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	svg_raw       *string
	clearedFields map[string]struct{}
	owner         map[int]struct{}
	removedowner  map[int]struct{}
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*Pet, error)
	predicates    []predicate.Pet
}

var _ ent.Mutation = (*PetMutation)(nil)

// petOption allows management of the mutation configuration using functional options.
type petOption func(*PetMutation)

// newPetMutation creates new mutation for the Pet entity.
func newPetMutation(c config, op Op, opts ...petOption) *PetMutation {
	m := &PetMutation{
		config:        c,
		op:            op,
		typ:           TypePet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPetID sets the ID field of the mutation.
func withPetID(id int) petOption {
	return func(m *PetMutation) {
		var (
			err   error
			once  sync.Once
			value *Pet
		)
		m.oldValue = func(ctx context.Context) (*Pet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPet sets the old Pet of the mutation.
func withPet(node *Pet) petOption {
	return func(m *PetMutation) {
		m.oldValue = func(context.Context) (*Pet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PetMutation) ResetName() {
	m.name = nil
}

// SetSvgRaw sets the "svg_raw" field.
func (m *PetMutation) SetSvgRaw(s string) {
	m.svg_raw = &s
}

// SvgRaw returns the value of the "svg_raw" field in the mutation.
func (m *PetMutation) SvgRaw() (r string, exists bool) {
	v := m.svg_raw
	if v == nil {
		return
	}
	return *v, true
}

// OldSvgRaw returns the old "svg_raw" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldSvgRaw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSvgRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSvgRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSvgRaw: %w", err)
	}
	return oldValue.SvgRaw, nil
}

// ResetSvgRaw resets all changes to the "svg_raw" field.
func (m *PetMutation) ResetSvgRaw() {
	m.svg_raw = nil
}

// AddOwnerIDs adds the "owner" edge to the User entity by ids.
func (m *PetMutation) AddOwnerIDs(ids ...int) {
	if m.owner == nil {
		m.owner = make(map[int]struct{})
	}
	for i := range ids {
		m.owner[ids[i]] = struct{}{}
	}
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *PetMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *PetMutation) OwnerCleared() bool {
	return m.clearedowner
}

// RemoveOwnerIDs removes the "owner" edge to the User entity by IDs.
func (m *PetMutation) RemoveOwnerIDs(ids ...int) {
	if m.removedowner == nil {
		m.removedowner = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.owner, ids[i])
		m.removedowner[ids[i]] = struct{}{}
	}
}

// RemovedOwner returns the removed IDs of the "owner" edge to the User entity.
func (m *PetMutation) RemovedOwnerIDs() (ids []int) {
	for id := range m.removedowner {
		ids = append(ids, id)
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
func (m *PetMutation) OwnerIDs() (ids []int) {
	for id := range m.owner {
		ids = append(ids, id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *PetMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
	m.removedowner = nil
}

// Where appends a list predicates to the PetMutation builder.
func (m *PetMutation) Where(ps ...predicate.Pet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pet).
func (m *PetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PetMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, pet.FieldName)
	}
	if m.svg_raw != nil {
		fields = append(fields, pet.FieldSvgRaw)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pet.FieldName:
		return m.Name()
	case pet.FieldSvgRaw:
		return m.SvgRaw()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pet.FieldName:
		return m.OldName(ctx)
	case pet.FieldSvgRaw:
		return m.OldSvgRaw(ctx)
	}
	return nil, fmt.Errorf("unknown Pet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pet.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case pet.FieldSvgRaw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSvgRaw(v)
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Pet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PetMutation) ResetField(name string) error {
	switch name {
	case pet.FieldName:
		m.ResetName()
		return nil
	case pet.FieldSvgRaw:
		m.ResetSvgRaw()
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, pet.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pet.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.owner))
		for id := range m.owner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedowner != nil {
		edges = append(edges, pet.EdgeOwner)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pet.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.removedowner))
		for id := range m.removedowner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, pet.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PetMutation) EdgeCleared(name string) bool {
	switch name {
	case pet.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Pet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PetMutation) ResetEdge(name string) error {
	switch name {
	case pet.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Pet edge %s", name)
}

// PrizeMutation represents an operation that mutates the Prize nodes in the graph.
type PrizeMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	description             *string
	points_required         *int
	addpoints_required      *int
	discriminator           *prize.Discriminator
	clearedFields           map[string]struct{}
	institution             *int
	clearedinstitution      bool
	redemption_users        map[int]struct{}
	removedredemption_users map[int]struct{}
	clearedredemption_users bool
	done                    bool
	oldValue                func(context.Context) (*Prize, error)
	predicates              []predicate.Prize
}

var _ ent.Mutation = (*PrizeMutation)(nil)

// prizeOption allows management of the mutation configuration using functional options.
type prizeOption func(*PrizeMutation)

// newPrizeMutation creates new mutation for the Prize entity.
func newPrizeMutation(c config, op Op, opts ...prizeOption) *PrizeMutation {
	m := &PrizeMutation{
		config:        c,
		op:            op,
		typ:           TypePrize,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPrizeID sets the ID field of the mutation.
func withPrizeID(id int) prizeOption {
	return func(m *PrizeMutation) {
		var (
			err   error
			once  sync.Once
			value *Prize
		)
		m.oldValue = func(ctx context.Context) (*Prize, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Prize.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrize sets the old Prize of the mutation.
func withPrize(node *Prize) prizeOption {
	return func(m *PrizeMutation) {
		m.oldValue = func(context.Context) (*Prize, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrizeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrizeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PrizeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PrizeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Prize.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PrizeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PrizeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Prize entity.
// If the Prize object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrizeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PrizeMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PrizeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PrizeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Prize entity.
// If the Prize object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrizeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PrizeMutation) ResetDescription() {
	m.description = nil
}

// SetPointsRequired sets the "points_required" field.
func (m *PrizeMutation) SetPointsRequired(i int) {
	m.points_required = &i
	m.addpoints_required = nil
}

// PointsRequired returns the value of the "points_required" field in the mutation.
func (m *PrizeMutation) PointsRequired() (r int, exists bool) {
	v := m.points_required
	if v == nil {
		return
	}
	return *v, true
}

// OldPointsRequired returns the old "points_required" field's value of the Prize entity.
// If the Prize object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrizeMutation) OldPointsRequired(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointsRequired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointsRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointsRequired: %w", err)
	}
	return oldValue.PointsRequired, nil
}

// AddPointsRequired adds i to the "points_required" field.
func (m *PrizeMutation) AddPointsRequired(i int) {
	if m.addpoints_required != nil {
		*m.addpoints_required += i
	} else {
		m.addpoints_required = &i
	}
}

// AddedPointsRequired returns the value that was added to the "points_required" field in this mutation.
func (m *PrizeMutation) AddedPointsRequired() (r int, exists bool) {
	v := m.addpoints_required
	if v == nil {
		return
	}
	return *v, true
}

// ResetPointsRequired resets all changes to the "points_required" field.
func (m *PrizeMutation) ResetPointsRequired() {
	m.points_required = nil
	m.addpoints_required = nil
}

// SetDiscriminator sets the "discriminator" field.
func (m *PrizeMutation) SetDiscriminator(pr prize.Discriminator) {
	m.discriminator = &pr
}

// Discriminator returns the value of the "discriminator" field in the mutation.
func (m *PrizeMutation) Discriminator() (r prize.Discriminator, exists bool) {
	v := m.discriminator
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscriminator returns the old "discriminator" field's value of the Prize entity.
// If the Prize object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrizeMutation) OldDiscriminator(ctx context.Context) (v prize.Discriminator, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscriminator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscriminator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscriminator: %w", err)
	}
	return oldValue.Discriminator, nil
}

// ResetDiscriminator resets all changes to the "discriminator" field.
func (m *PrizeMutation) ResetDiscriminator() {
	m.discriminator = nil
}

// SetInstitutionID sets the "institution" edge to the Institution entity by id.
func (m *PrizeMutation) SetInstitutionID(id int) {
	m.institution = &id
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (m *PrizeMutation) ClearInstitution() {
	m.clearedinstitution = true
}

// InstitutionCleared reports if the "institution" edge to the Institution entity was cleared.
func (m *PrizeMutation) InstitutionCleared() bool {
	return m.clearedinstitution
}

// InstitutionID returns the "institution" edge ID in the mutation.
func (m *PrizeMutation) InstitutionID() (id int, exists bool) {
	if m.institution != nil {
		return *m.institution, true
	}
	return
}

// InstitutionIDs returns the "institution" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InstitutionID instead. It exists only for internal usage by the builders.
func (m *PrizeMutation) InstitutionIDs() (ids []int) {
	if id := m.institution; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInstitution resets all changes to the "institution" edge.
func (m *PrizeMutation) ResetInstitution() {
	m.institution = nil
	m.clearedinstitution = false
}

// AddRedemptionUserIDs adds the "redemption_users" edge to the User entity by ids.
func (m *PrizeMutation) AddRedemptionUserIDs(ids ...int) {
	if m.redemption_users == nil {
		m.redemption_users = make(map[int]struct{})
	}
	for i := range ids {
		m.redemption_users[ids[i]] = struct{}{}
	}
}

// ClearRedemptionUsers clears the "redemption_users" edge to the User entity.
func (m *PrizeMutation) ClearRedemptionUsers() {
	m.clearedredemption_users = true
}

// RedemptionUsersCleared reports if the "redemption_users" edge to the User entity was cleared.
func (m *PrizeMutation) RedemptionUsersCleared() bool {
	return m.clearedredemption_users
}

// RemoveRedemptionUserIDs removes the "redemption_users" edge to the User entity by IDs.
func (m *PrizeMutation) RemoveRedemptionUserIDs(ids ...int) {
	if m.removedredemption_users == nil {
		m.removedredemption_users = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.redemption_users, ids[i])
		m.removedredemption_users[ids[i]] = struct{}{}
	}
}

// RemovedRedemptionUsers returns the removed IDs of the "redemption_users" edge to the User entity.
func (m *PrizeMutation) RemovedRedemptionUsersIDs() (ids []int) {
	for id := range m.removedredemption_users {
		ids = append(ids, id)
	}
	return
}

// RedemptionUsersIDs returns the "redemption_users" edge IDs in the mutation.
func (m *PrizeMutation) RedemptionUsersIDs() (ids []int) {
	for id := range m.redemption_users {
		ids = append(ids, id)
	}
	return
}

// ResetRedemptionUsers resets all changes to the "redemption_users" edge.
func (m *PrizeMutation) ResetRedemptionUsers() {
	m.redemption_users = nil
	m.clearedredemption_users = false
	m.removedredemption_users = nil
}

// Where appends a list predicates to the PrizeMutation builder.
func (m *PrizeMutation) Where(ps ...predicate.Prize) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PrizeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PrizeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Prize, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PrizeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PrizeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Prize).
func (m *PrizeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PrizeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, prize.FieldName)
	}
	if m.description != nil {
		fields = append(fields, prize.FieldDescription)
	}
	if m.points_required != nil {
		fields = append(fields, prize.FieldPointsRequired)
	}
	if m.discriminator != nil {
		fields = append(fields, prize.FieldDiscriminator)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PrizeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case prize.FieldName:
		return m.Name()
	case prize.FieldDescription:
		return m.Description()
	case prize.FieldPointsRequired:
		return m.PointsRequired()
	case prize.FieldDiscriminator:
		return m.Discriminator()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PrizeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case prize.FieldName:
		return m.OldName(ctx)
	case prize.FieldDescription:
		return m.OldDescription(ctx)
	case prize.FieldPointsRequired:
		return m.OldPointsRequired(ctx)
	case prize.FieldDiscriminator:
		return m.OldDiscriminator(ctx)
	}
	return nil, fmt.Errorf("unknown Prize field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrizeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case prize.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case prize.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case prize.FieldPointsRequired:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointsRequired(v)
		return nil
	case prize.FieldDiscriminator:
		v, ok := value.(prize.Discriminator)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscriminator(v)
		return nil
	}
	return fmt.Errorf("unknown Prize field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PrizeMutation) AddedFields() []string {
	var fields []string
	if m.addpoints_required != nil {
		fields = append(fields, prize.FieldPointsRequired)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PrizeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case prize.FieldPointsRequired:
		return m.AddedPointsRequired()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrizeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case prize.FieldPointsRequired:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPointsRequired(v)
		return nil
	}
	return fmt.Errorf("unknown Prize numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PrizeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PrizeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrizeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Prize nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PrizeMutation) ResetField(name string) error {
	switch name {
	case prize.FieldName:
		m.ResetName()
		return nil
	case prize.FieldDescription:
		m.ResetDescription()
		return nil
	case prize.FieldPointsRequired:
		m.ResetPointsRequired()
		return nil
	case prize.FieldDiscriminator:
		m.ResetDiscriminator()
		return nil
	}
	return fmt.Errorf("unknown Prize field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PrizeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.institution != nil {
		edges = append(edges, prize.EdgeInstitution)
	}
	if m.redemption_users != nil {
		edges = append(edges, prize.EdgeRedemptionUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PrizeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case prize.EdgeInstitution:
		if id := m.institution; id != nil {
			return []ent.Value{*id}
		}
	case prize.EdgeRedemptionUsers:
		ids := make([]ent.Value, 0, len(m.redemption_users))
		for id := range m.redemption_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PrizeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedredemption_users != nil {
		edges = append(edges, prize.EdgeRedemptionUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PrizeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case prize.EdgeRedemptionUsers:
		ids := make([]ent.Value, 0, len(m.removedredemption_users))
		for id := range m.removedredemption_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PrizeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedinstitution {
		edges = append(edges, prize.EdgeInstitution)
	}
	if m.clearedredemption_users {
		edges = append(edges, prize.EdgeRedemptionUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PrizeMutation) EdgeCleared(name string) bool {
	switch name {
	case prize.EdgeInstitution:
		return m.clearedinstitution
	case prize.EdgeRedemptionUsers:
		return m.clearedredemption_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PrizeMutation) ClearEdge(name string) error {
	switch name {
	case prize.EdgeInstitution:
		m.ClearInstitution()
		return nil
	}
	return fmt.Errorf("unknown Prize unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PrizeMutation) ResetEdge(name string) error {
	switch name {
	case prize.EdgeInstitution:
		m.ResetInstitution()
		return nil
	case prize.EdgeRedemptionUsers:
		m.ResetRedemptionUsers()
		return nil
	}
	return fmt.Errorf("unknown Prize edge %s", name)
}

// PrizeRedemptionsMutation represents an operation that mutates the PrizeRedemptions nodes in the graph.
type PrizeRedemptionsMutation struct {
	config
	op            Op
	typ           string
	redeemed_at   *time.Time
	clearedFields map[string]struct{}
	prize         *int
	clearedprize  bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*PrizeRedemptions, error)
	predicates    []predicate.PrizeRedemptions
}

var _ ent.Mutation = (*PrizeRedemptionsMutation)(nil)

// prizeredemptionsOption allows management of the mutation configuration using functional options.
type prizeredemptionsOption func(*PrizeRedemptionsMutation)

// newPrizeRedemptionsMutation creates new mutation for the PrizeRedemptions entity.
func newPrizeRedemptionsMutation(c config, op Op, opts ...prizeredemptionsOption) *PrizeRedemptionsMutation {
	m := &PrizeRedemptionsMutation{
		config:        c,
		op:            op,
		typ:           TypePrizeRedemptions,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrizeRedemptionsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrizeRedemptionsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetRedeemedAt sets the "redeemed_at" field.
func (m *PrizeRedemptionsMutation) SetRedeemedAt(t time.Time) {
	m.redeemed_at = &t
}

// RedeemedAt returns the value of the "redeemed_at" field in the mutation.
func (m *PrizeRedemptionsMutation) RedeemedAt() (r time.Time, exists bool) {
	v := m.redeemed_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetRedeemedAt resets all changes to the "redeemed_at" field.
func (m *PrizeRedemptionsMutation) ResetRedeemedAt() {
	m.redeemed_at = nil
}

// SetPrizeID sets the "prize_id" field.
func (m *PrizeRedemptionsMutation) SetPrizeID(i int) {
	m.prize = &i
}

// PrizeID returns the value of the "prize_id" field in the mutation.
func (m *PrizeRedemptionsMutation) PrizeID() (r int, exists bool) {
	v := m.prize
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrizeID resets all changes to the "prize_id" field.
func (m *PrizeRedemptionsMutation) ResetPrizeID() {
	m.prize = nil
}

// SetUserID sets the "user_id" field.
func (m *PrizeRedemptionsMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PrizeRedemptionsMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PrizeRedemptionsMutation) ResetUserID() {
	m.user = nil
}

// ClearPrize clears the "prize" edge to the Prize entity.
func (m *PrizeRedemptionsMutation) ClearPrize() {
	m.clearedprize = true
}

// PrizeCleared reports if the "prize" edge to the Prize entity was cleared.
func (m *PrizeRedemptionsMutation) PrizeCleared() bool {
	return m.clearedprize
}

// PrizeIDs returns the "prize" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PrizeID instead. It exists only for internal usage by the builders.
func (m *PrizeRedemptionsMutation) PrizeIDs() (ids []int) {
	if id := m.prize; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrize resets all changes to the "prize" edge.
func (m *PrizeRedemptionsMutation) ResetPrize() {
	m.prize = nil
	m.clearedprize = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *PrizeRedemptionsMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PrizeRedemptionsMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PrizeRedemptionsMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PrizeRedemptionsMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PrizeRedemptionsMutation builder.
func (m *PrizeRedemptionsMutation) Where(ps ...predicate.PrizeRedemptions) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PrizeRedemptionsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PrizeRedemptionsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PrizeRedemptions, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PrizeRedemptionsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PrizeRedemptionsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PrizeRedemptions).
func (m *PrizeRedemptionsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PrizeRedemptionsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.redeemed_at != nil {
		fields = append(fields, prizeredemptions.FieldRedeemedAt)
	}
	if m.prize != nil {
		fields = append(fields, prizeredemptions.FieldPrizeID)
	}
	if m.user != nil {
		fields = append(fields, prizeredemptions.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PrizeRedemptionsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case prizeredemptions.FieldRedeemedAt:
		return m.RedeemedAt()
	case prizeredemptions.FieldPrizeID:
		return m.PrizeID()
	case prizeredemptions.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PrizeRedemptionsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema PrizeRedemptions does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrizeRedemptionsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case prizeredemptions.FieldRedeemedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedeemedAt(v)
		return nil
	case prizeredemptions.FieldPrizeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrizeID(v)
		return nil
	case prizeredemptions.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown PrizeRedemptions field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PrizeRedemptionsMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PrizeRedemptionsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrizeRedemptionsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PrizeRedemptions numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PrizeRedemptionsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PrizeRedemptionsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrizeRedemptionsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PrizeRedemptions nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PrizeRedemptionsMutation) ResetField(name string) error {
	switch name {
	case prizeredemptions.FieldRedeemedAt:
		m.ResetRedeemedAt()
		return nil
	case prizeredemptions.FieldPrizeID:
		m.ResetPrizeID()
		return nil
	case prizeredemptions.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown PrizeRedemptions field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PrizeRedemptionsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.prize != nil {
		edges = append(edges, prizeredemptions.EdgePrize)
	}
	if m.user != nil {
		edges = append(edges, prizeredemptions.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PrizeRedemptionsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case prizeredemptions.EdgePrize:
		if id := m.prize; id != nil {
			return []ent.Value{*id}
		}
	case prizeredemptions.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PrizeRedemptionsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PrizeRedemptionsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PrizeRedemptionsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprize {
		edges = append(edges, prizeredemptions.EdgePrize)
	}
	if m.cleareduser {
		edges = append(edges, prizeredemptions.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PrizeRedemptionsMutation) EdgeCleared(name string) bool {
	switch name {
	case prizeredemptions.EdgePrize:
		return m.clearedprize
	case prizeredemptions.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PrizeRedemptionsMutation) ClearEdge(name string) error {
	switch name {
	case prizeredemptions.EdgePrize:
		m.ClearPrize()
		return nil
	case prizeredemptions.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown PrizeRedemptions unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PrizeRedemptionsMutation) ResetEdge(name string) error {
	switch name {
	case prizeredemptions.EdgePrize:
		m.ResetPrize()
		return nil
	case prizeredemptions.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown PrizeRedemptions edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	first_name                *string
	last_name                 *string
	email                     *string
	password_hash             *string
	points                    *int
	addpoints                 *int
	points_awarded_count      *int
	addpoints_awarded_count   *int
	points_awarded_reset_time *time.Time
	superuser                 *bool
	clearedFields             map[string]struct{}
	institution               map[int]struct{}
	removedinstitution        map[int]struct{}
	clearedinstitution        bool
	course                    *int
	clearedcourse             bool
	prize                     map[int]struct{}
	removedprize              map[int]struct{}
	clearedprize              bool
	pet                       map[int]struct{}
	removedpet                map[int]struct{}
	clearedpet                bool
	done                      bool
	oldValue                  func(context.Context) (*User, error)
	predicates                []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetPoints sets the "points" field.
func (m *UserMutation) SetPoints(i int) {
	m.points = &i
	m.addpoints = nil
}

// Points returns the value of the "points" field in the mutation.
func (m *UserMutation) Points() (r int, exists bool) {
	v := m.points
	if v == nil {
		return
	}
	return *v, true
}

// OldPoints returns the old "points" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPoints(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoints: %w", err)
	}
	return oldValue.Points, nil
}

// AddPoints adds i to the "points" field.
func (m *UserMutation) AddPoints(i int) {
	if m.addpoints != nil {
		*m.addpoints += i
	} else {
		m.addpoints = &i
	}
}

// AddedPoints returns the value that was added to the "points" field in this mutation.
func (m *UserMutation) AddedPoints() (r int, exists bool) {
	v := m.addpoints
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoints resets all changes to the "points" field.
func (m *UserMutation) ResetPoints() {
	m.points = nil
	m.addpoints = nil
}

// SetPointsAwardedCount sets the "points_awarded_count" field.
func (m *UserMutation) SetPointsAwardedCount(i int) {
	m.points_awarded_count = &i
	m.addpoints_awarded_count = nil
}

// PointsAwardedCount returns the value of the "points_awarded_count" field in the mutation.
func (m *UserMutation) PointsAwardedCount() (r int, exists bool) {
	v := m.points_awarded_count
	if v == nil {
		return
	}
	return *v, true
}

// OldPointsAwardedCount returns the old "points_awarded_count" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPointsAwardedCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointsAwardedCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointsAwardedCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointsAwardedCount: %w", err)
	}
	return oldValue.PointsAwardedCount, nil
}

// AddPointsAwardedCount adds i to the "points_awarded_count" field.
func (m *UserMutation) AddPointsAwardedCount(i int) {
	if m.addpoints_awarded_count != nil {
		*m.addpoints_awarded_count += i
	} else {
		m.addpoints_awarded_count = &i
	}
}

// AddedPointsAwardedCount returns the value that was added to the "points_awarded_count" field in this mutation.
func (m *UserMutation) AddedPointsAwardedCount() (r int, exists bool) {
	v := m.addpoints_awarded_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetPointsAwardedCount resets all changes to the "points_awarded_count" field.
func (m *UserMutation) ResetPointsAwardedCount() {
	m.points_awarded_count = nil
	m.addpoints_awarded_count = nil
}

// SetPointsAwardedResetTime sets the "points_awarded_reset_time" field.
func (m *UserMutation) SetPointsAwardedResetTime(t time.Time) {
	m.points_awarded_reset_time = &t
}

// PointsAwardedResetTime returns the value of the "points_awarded_reset_time" field in the mutation.
func (m *UserMutation) PointsAwardedResetTime() (r time.Time, exists bool) {
	v := m.points_awarded_reset_time
	if v == nil {
		return
	}
	return *v, true
}

// OldPointsAwardedResetTime returns the old "points_awarded_reset_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPointsAwardedResetTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointsAwardedResetTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointsAwardedResetTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointsAwardedResetTime: %w", err)
	}
	return oldValue.PointsAwardedResetTime, nil
}

// ClearPointsAwardedResetTime clears the value of the "points_awarded_reset_time" field.
func (m *UserMutation) ClearPointsAwardedResetTime() {
	m.points_awarded_reset_time = nil
	m.clearedFields[user.FieldPointsAwardedResetTime] = struct{}{}
}

// PointsAwardedResetTimeCleared returns if the "points_awarded_reset_time" field was cleared in this mutation.
func (m *UserMutation) PointsAwardedResetTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldPointsAwardedResetTime]
	return ok
}

// ResetPointsAwardedResetTime resets all changes to the "points_awarded_reset_time" field.
func (m *UserMutation) ResetPointsAwardedResetTime() {
	m.points_awarded_reset_time = nil
	delete(m.clearedFields, user.FieldPointsAwardedResetTime)
}

// SetSuperuser sets the "superuser" field.
func (m *UserMutation) SetSuperuser(b bool) {
	m.superuser = &b
}

// Superuser returns the value of the "superuser" field in the mutation.
func (m *UserMutation) Superuser() (r bool, exists bool) {
	v := m.superuser
	if v == nil {
		return
	}
	return *v, true
}

// OldSuperuser returns the old "superuser" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSuperuser(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuperuser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuperuser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuperuser: %w", err)
	}
	return oldValue.Superuser, nil
}

// ResetSuperuser resets all changes to the "superuser" field.
func (m *UserMutation) ResetSuperuser() {
	m.superuser = nil
}

// AddInstitutionIDs adds the "institution" edge to the Institution entity by ids.
func (m *UserMutation) AddInstitutionIDs(ids ...int) {
	if m.institution == nil {
		m.institution = make(map[int]struct{})
	}
	for i := range ids {
		m.institution[ids[i]] = struct{}{}
	}
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (m *UserMutation) ClearInstitution() {
	m.clearedinstitution = true
}

// InstitutionCleared reports if the "institution" edge to the Institution entity was cleared.
func (m *UserMutation) InstitutionCleared() bool {
	return m.clearedinstitution
}

// RemoveInstitutionIDs removes the "institution" edge to the Institution entity by IDs.
func (m *UserMutation) RemoveInstitutionIDs(ids ...int) {
	if m.removedinstitution == nil {
		m.removedinstitution = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.institution, ids[i])
		m.removedinstitution[ids[i]] = struct{}{}
	}
}

// RemovedInstitution returns the removed IDs of the "institution" edge to the Institution entity.
func (m *UserMutation) RemovedInstitutionIDs() (ids []int) {
	for id := range m.removedinstitution {
		ids = append(ids, id)
	}
	return
}

// InstitutionIDs returns the "institution" edge IDs in the mutation.
func (m *UserMutation) InstitutionIDs() (ids []int) {
	for id := range m.institution {
		ids = append(ids, id)
	}
	return
}

// ResetInstitution resets all changes to the "institution" edge.
func (m *UserMutation) ResetInstitution() {
	m.institution = nil
	m.clearedinstitution = false
	m.removedinstitution = nil
}

// SetCourseID sets the "course" edge to the Course entity by id.
func (m *UserMutation) SetCourseID(id int) {
	m.course = &id
}

// ClearCourse clears the "course" edge to the Course entity.
func (m *UserMutation) ClearCourse() {
	m.clearedcourse = true
}

// CourseCleared reports if the "course" edge to the Course entity was cleared.
func (m *UserMutation) CourseCleared() bool {
	return m.clearedcourse
}

// CourseID returns the "course" edge ID in the mutation.
func (m *UserMutation) CourseID() (id int, exists bool) {
	if m.course != nil {
		return *m.course, true
	}
	return
}

// CourseIDs returns the "course" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CourseID instead. It exists only for internal usage by the builders.
func (m *UserMutation) CourseIDs() (ids []int) {
	if id := m.course; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCourse resets all changes to the "course" edge.
func (m *UserMutation) ResetCourse() {
	m.course = nil
	m.clearedcourse = false
}

// AddPrizeIDs adds the "prize" edge to the Prize entity by ids.
func (m *UserMutation) AddPrizeIDs(ids ...int) {
	if m.prize == nil {
		m.prize = make(map[int]struct{})
	}
	for i := range ids {
		m.prize[ids[i]] = struct{}{}
	}
}

// ClearPrize clears the "prize" edge to the Prize entity.
func (m *UserMutation) ClearPrize() {
	m.clearedprize = true
}

// PrizeCleared reports if the "prize" edge to the Prize entity was cleared.
func (m *UserMutation) PrizeCleared() bool {
	return m.clearedprize
}

// RemovePrizeIDs removes the "prize" edge to the Prize entity by IDs.
func (m *UserMutation) RemovePrizeIDs(ids ...int) {
	if m.removedprize == nil {
		m.removedprize = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.prize, ids[i])
		m.removedprize[ids[i]] = struct{}{}
	}
}

// RemovedPrize returns the removed IDs of the "prize" edge to the Prize entity.
func (m *UserMutation) RemovedPrizeIDs() (ids []int) {
	for id := range m.removedprize {
		ids = append(ids, id)
	}
	return
}

// PrizeIDs returns the "prize" edge IDs in the mutation.
func (m *UserMutation) PrizeIDs() (ids []int) {
	for id := range m.prize {
		ids = append(ids, id)
	}
	return
}

// ResetPrize resets all changes to the "prize" edge.
func (m *UserMutation) ResetPrize() {
	m.prize = nil
	m.clearedprize = false
	m.removedprize = nil
}

// AddPetIDs adds the "pet" edge to the Pet entity by ids.
func (m *UserMutation) AddPetIDs(ids ...int) {
	if m.pet == nil {
		m.pet = make(map[int]struct{})
	}
	for i := range ids {
		m.pet[ids[i]] = struct{}{}
	}
}

// ClearPet clears the "pet" edge to the Pet entity.
func (m *UserMutation) ClearPet() {
	m.clearedpet = true
}

// PetCleared reports if the "pet" edge to the Pet entity was cleared.
func (m *UserMutation) PetCleared() bool {
	return m.clearedpet
}

// RemovePetIDs removes the "pet" edge to the Pet entity by IDs.
func (m *UserMutation) RemovePetIDs(ids ...int) {
	if m.removedpet == nil {
		m.removedpet = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.pet, ids[i])
		m.removedpet[ids[i]] = struct{}{}
	}
}

// RemovedPet returns the removed IDs of the "pet" edge to the Pet entity.
func (m *UserMutation) RemovedPetIDs() (ids []int) {
	for id := range m.removedpet {
		ids = append(ids, id)
	}
	return
}

// PetIDs returns the "pet" edge IDs in the mutation.
func (m *UserMutation) PetIDs() (ids []int) {
	for id := range m.pet {
		ids = append(ids, id)
	}
	return
}

// ResetPet resets all changes to the "pet" edge.
func (m *UserMutation) ResetPet() {
	m.pet = nil
	m.clearedpet = false
	m.removedpet = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.points != nil {
		fields = append(fields, user.FieldPoints)
	}
	if m.points_awarded_count != nil {
		fields = append(fields, user.FieldPointsAwardedCount)
	}
	if m.points_awarded_reset_time != nil {
		fields = append(fields, user.FieldPointsAwardedResetTime)
	}
	if m.superuser != nil {
		fields = append(fields, user.FieldSuperuser)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldPoints:
		return m.Points()
	case user.FieldPointsAwardedCount:
		return m.PointsAwardedCount()
	case user.FieldPointsAwardedResetTime:
		return m.PointsAwardedResetTime()
	case user.FieldSuperuser:
		return m.Superuser()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldPoints:
		return m.OldPoints(ctx)
	case user.FieldPointsAwardedCount:
		return m.OldPointsAwardedCount(ctx)
	case user.FieldPointsAwardedResetTime:
		return m.OldPointsAwardedResetTime(ctx)
	case user.FieldSuperuser:
		return m.OldSuperuser(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldPoints:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoints(v)
		return nil
	case user.FieldPointsAwardedCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointsAwardedCount(v)
		return nil
	case user.FieldPointsAwardedResetTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointsAwardedResetTime(v)
		return nil
	case user.FieldSuperuser:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuperuser(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addpoints != nil {
		fields = append(fields, user.FieldPoints)
	}
	if m.addpoints_awarded_count != nil {
		fields = append(fields, user.FieldPointsAwardedCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldPoints:
		return m.AddedPoints()
	case user.FieldPointsAwardedCount:
		return m.AddedPointsAwardedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldPoints:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoints(v)
		return nil
	case user.FieldPointsAwardedCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPointsAwardedCount(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldPointsAwardedResetTime) {
		fields = append(fields, user.FieldPointsAwardedResetTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldPointsAwardedResetTime:
		m.ClearPointsAwardedResetTime()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldPoints:
		m.ResetPoints()
		return nil
	case user.FieldPointsAwardedCount:
		m.ResetPointsAwardedCount()
		return nil
	case user.FieldPointsAwardedResetTime:
		m.ResetPointsAwardedResetTime()
		return nil
	case user.FieldSuperuser:
		m.ResetSuperuser()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.institution != nil {
		edges = append(edges, user.EdgeInstitution)
	}
	if m.course != nil {
		edges = append(edges, user.EdgeCourse)
	}
	if m.prize != nil {
		edges = append(edges, user.EdgePrize)
	}
	if m.pet != nil {
		edges = append(edges, user.EdgePet)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeInstitution:
		ids := make([]ent.Value, 0, len(m.institution))
		for id := range m.institution {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCourse:
		if id := m.course; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgePrize:
		ids := make([]ent.Value, 0, len(m.prize))
		for id := range m.prize {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePet:
		ids := make([]ent.Value, 0, len(m.pet))
		for id := range m.pet {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedinstitution != nil {
		edges = append(edges, user.EdgeInstitution)
	}
	if m.removedprize != nil {
		edges = append(edges, user.EdgePrize)
	}
	if m.removedpet != nil {
		edges = append(edges, user.EdgePet)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeInstitution:
		ids := make([]ent.Value, 0, len(m.removedinstitution))
		for id := range m.removedinstitution {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePrize:
		ids := make([]ent.Value, 0, len(m.removedprize))
		for id := range m.removedprize {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePet:
		ids := make([]ent.Value, 0, len(m.removedpet))
		for id := range m.removedpet {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedinstitution {
		edges = append(edges, user.EdgeInstitution)
	}
	if m.clearedcourse {
		edges = append(edges, user.EdgeCourse)
	}
	if m.clearedprize {
		edges = append(edges, user.EdgePrize)
	}
	if m.clearedpet {
		edges = append(edges, user.EdgePet)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeInstitution:
		return m.clearedinstitution
	case user.EdgeCourse:
		return m.clearedcourse
	case user.EdgePrize:
		return m.clearedprize
	case user.EdgePet:
		return m.clearedpet
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeCourse:
		m.ClearCourse()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeInstitution:
		m.ResetInstitution()
		return nil
	case user.EdgeCourse:
		m.ResetCourse()
		return nil
	case user.EdgePrize:
		m.ResetPrize()
		return nil
	case user.EdgePet:
		m.ResetPet()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserPetMutation represents an operation that mutates the UserPet nodes in the graph.
type UserPetMutation struct {
	config
	op                            Op
	typ                           string
	hunger_percentage             *float64
	addhunger_percentage          *float64
	enabled_svg_group_element_ids *map[string]bool
	clearedFields                 map[string]struct{}
	pet                           *int
	clearedpet                    bool
	user                          *int
	cleareduser                   bool
	done                          bool
	oldValue                      func(context.Context) (*UserPet, error)
	predicates                    []predicate.UserPet
}

var _ ent.Mutation = (*UserPetMutation)(nil)

// userpetOption allows management of the mutation configuration using functional options.
type userpetOption func(*UserPetMutation)

// newUserPetMutation creates new mutation for the UserPet entity.
func newUserPetMutation(c config, op Op, opts ...userpetOption) *UserPetMutation {
	m := &UserPetMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetHungerPercentage sets the "hunger_percentage" field.
func (m *UserPetMutation) SetHungerPercentage(f float64) {
	m.hunger_percentage = &f
	m.addhunger_percentage = nil
}

// HungerPercentage returns the value of the "hunger_percentage" field in the mutation.
func (m *UserPetMutation) HungerPercentage() (r float64, exists bool) {
	v := m.hunger_percentage
	if v == nil {
		return
	}
	return *v, true
}

// AddHungerPercentage adds f to the "hunger_percentage" field.
func (m *UserPetMutation) AddHungerPercentage(f float64) {
	if m.addhunger_percentage != nil {
		*m.addhunger_percentage += f
	} else {
		m.addhunger_percentage = &f
	}
}

// AddedHungerPercentage returns the value that was added to the "hunger_percentage" field in this mutation.
func (m *UserPetMutation) AddedHungerPercentage() (r float64, exists bool) {
	v := m.addhunger_percentage
	if v == nil {
		return
	}
	return *v, true
}

// ResetHungerPercentage resets all changes to the "hunger_percentage" field.
func (m *UserPetMutation) ResetHungerPercentage() {
	m.hunger_percentage = nil
	m.addhunger_percentage = nil
}

// SetEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field.
func (m *UserPetMutation) SetEnabledSvgGroupElementIds(value map[string]bool) {
	m.enabled_svg_group_element_ids = &value
}

// EnabledSvgGroupElementIds returns the value of the "enabled_svg_group_element_ids" field in the mutation.
func (m *UserPetMutation) EnabledSvgGroupElementIds() (r map[string]bool, exists bool) {
	v := m.enabled_svg_group_element_ids
	if v == nil {
		return
	}
	return *v, true
}

// ResetEnabledSvgGroupElementIds resets all changes to the "enabled_svg_group_element_ids" field.
func (m *UserPetMutation) ResetEnabledSvgGroupElementIds() {
	m.enabled_svg_group_element_ids = nil
}

// SetPetID sets the "pet_id" field.
func (m *UserPetMutation) SetPetID(i int) {
	m.pet = &i
}

// PetID returns the value of the "pet_id" field in the mutation.
func (m *UserPetMutation) PetID() (r int, exists bool) {
	v := m.pet
	if v == nil {
		return
	}
	return *v, true
}

// ResetPetID resets all changes to the "pet_id" field.
func (m *UserPetMutation) ResetPetID() {
	m.pet = nil
}

// SetUserID sets the "user_id" field.
func (m *UserPetMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserPetMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserPetMutation) ResetUserID() {
	m.user = nil
}

// ClearPet clears the "pet" edge to the Pet entity.
func (m *UserPetMutation) ClearPet() {
	m.clearedpet = true
}

// PetCleared reports if the "pet" edge to the Pet entity was cleared.
func (m *UserPetMutation) PetCleared() bool {
	return m.clearedpet
}

// PetIDs returns the "pet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PetID instead. It exists only for internal usage by the builders.
func (m *UserPetMutation) PetIDs() (ids []int) {
	if id := m.pet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPet resets all changes to the "pet" edge.
func (m *UserPetMutation) ResetPet() {
	m.pet = nil
	m.clearedpet = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserPetMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserPetMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserPetMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserPetMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserPetMutation builder.
func (m *UserPetMutation) Where(ps ...predicate.UserPet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserPetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserPetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserPet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserPetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserPetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserPet).
func (m *UserPetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPetMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.hunger_percentage != nil {
		fields = append(fields, userpet.FieldHungerPercentage)
	}
	if m.enabled_svg_group_element_ids != nil {
		fields = append(fields, userpet.FieldEnabledSvgGroupElementIds)
	}
	if m.pet != nil {
		fields = append(fields, userpet.FieldPetID)
	}
	if m.user != nil {
		fields = append(fields, userpet.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userpet.FieldHungerPercentage:
		return m.HungerPercentage()
	case userpet.FieldEnabledSvgGroupElementIds:
		return m.EnabledSvgGroupElementIds()
	case userpet.FieldPetID:
		return m.PetID()
	case userpet.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema UserPet does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userpet.FieldHungerPercentage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHungerPercentage(v)
		return nil
	case userpet.FieldEnabledSvgGroupElementIds:
		v, ok := value.(map[string]bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabledSvgGroupElementIds(v)
		return nil
	case userpet.FieldPetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPetID(v)
		return nil
	case userpet.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown UserPet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPetMutation) AddedFields() []string {
	var fields []string
	if m.addhunger_percentage != nil {
		fields = append(fields, userpet.FieldHungerPercentage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userpet.FieldHungerPercentage:
		return m.AddedHungerPercentage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userpet.FieldHungerPercentage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHungerPercentage(v)
		return nil
	}
	return fmt.Errorf("unknown UserPet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserPet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPetMutation) ResetField(name string) error {
	switch name {
	case userpet.FieldHungerPercentage:
		m.ResetHungerPercentage()
		return nil
	case userpet.FieldEnabledSvgGroupElementIds:
		m.ResetEnabledSvgGroupElementIds()
		return nil
	case userpet.FieldPetID:
		m.ResetPetID()
		return nil
	case userpet.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown UserPet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPetMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.pet != nil {
		edges = append(edges, userpet.EdgePet)
	}
	if m.user != nil {
		edges = append(edges, userpet.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userpet.EdgePet:
		if id := m.pet; id != nil {
			return []ent.Value{*id}
		}
	case userpet.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpet {
		edges = append(edges, userpet.EdgePet)
	}
	if m.cleareduser {
		edges = append(edges, userpet.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPetMutation) EdgeCleared(name string) bool {
	switch name {
	case userpet.EdgePet:
		return m.clearedpet
	case userpet.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPetMutation) ClearEdge(name string) error {
	switch name {
	case userpet.EdgePet:
		m.ClearPet()
		return nil
	case userpet.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserPet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPetMutation) ResetEdge(name string) error {
	switch name {
	case userpet.EdgePet:
		m.ResetPet()
		return nil
	case userpet.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserPet edge %s", name)
}
