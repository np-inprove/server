// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/academicschool"
	"github.com/np-inprove/server/internal/ent/accessory"
	"github.com/np-inprove/server/internal/ent/course"
	"github.com/np-inprove/server/internal/ent/event"
	"github.com/np-inprove/server/internal/ent/forumpost"
	"github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/groupuser"
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/pet"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/reaction"
	"github.com/np-inprove/server/internal/ent/redemption"
	"github.com/np-inprove/server/internal/ent/user"
	"github.com/np-inprove/server/internal/ent/userpet"
	"github.com/np-inprove/server/internal/ent/voucher"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAcademicSchool = "AcademicSchool"
	TypeAccessory      = "Accessory"
	TypeCourse         = "Course"
	TypeEvent          = "Event"
	TypeForumPost      = "ForumPost"
	TypeGroup          = "Group"
	TypeGroupUser      = "GroupUser"
	TypeInstitution    = "Institution"
	TypePet            = "Pet"
	TypeReaction       = "Reaction"
	TypeRedemption     = "Redemption"
	TypeUser           = "User"
	TypeUserPet        = "UserPet"
	TypeVoucher        = "Voucher"
)

// AcademicSchoolMutation represents an operation that mutates the AcademicSchool nodes in the graph.
type AcademicSchoolMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	school_code        *string
	clearedFields      map[string]struct{}
	institution        *int
	clearedinstitution bool
	courses            map[int]struct{}
	removedcourses     map[int]struct{}
	clearedcourses     bool
	done               bool
	oldValue           func(context.Context) (*AcademicSchool, error)
	predicates         []predicate.AcademicSchool
}

var _ ent.Mutation = (*AcademicSchoolMutation)(nil)

// academicschoolOption allows management of the mutation configuration using functional options.
type academicschoolOption func(*AcademicSchoolMutation)

// newAcademicSchoolMutation creates new mutation for the AcademicSchool entity.
func newAcademicSchoolMutation(c config, op Op, opts ...academicschoolOption) *AcademicSchoolMutation {
	m := &AcademicSchoolMutation{
		config:        c,
		op:            op,
		typ:           TypeAcademicSchool,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAcademicSchoolID sets the ID field of the mutation.
func withAcademicSchoolID(id int) academicschoolOption {
	return func(m *AcademicSchoolMutation) {
		var (
			err   error
			once  sync.Once
			value *AcademicSchool
		)
		m.oldValue = func(ctx context.Context) (*AcademicSchool, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AcademicSchool.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAcademicSchool sets the old AcademicSchool of the mutation.
func withAcademicSchool(node *AcademicSchool) academicschoolOption {
	return func(m *AcademicSchoolMutation) {
		m.oldValue = func(context.Context) (*AcademicSchool, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AcademicSchoolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AcademicSchoolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AcademicSchoolMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AcademicSchoolMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AcademicSchool.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AcademicSchoolMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AcademicSchoolMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AcademicSchool entity.
// If the AcademicSchool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcademicSchoolMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AcademicSchoolMutation) ResetName() {
	m.name = nil
}

// SetSchoolCode sets the "school_code" field.
func (m *AcademicSchoolMutation) SetSchoolCode(s string) {
	m.school_code = &s
}

// SchoolCode returns the value of the "school_code" field in the mutation.
func (m *AcademicSchoolMutation) SchoolCode() (r string, exists bool) {
	v := m.school_code
	if v == nil {
		return
	}
	return *v, true
}

// OldSchoolCode returns the old "school_code" field's value of the AcademicSchool entity.
// If the AcademicSchool object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AcademicSchoolMutation) OldSchoolCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSchoolCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSchoolCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSchoolCode: %w", err)
	}
	return oldValue.SchoolCode, nil
}

// ResetSchoolCode resets all changes to the "school_code" field.
func (m *AcademicSchoolMutation) ResetSchoolCode() {
	m.school_code = nil
}

// SetInstitutionID sets the "institution" edge to the Institution entity by id.
func (m *AcademicSchoolMutation) SetInstitutionID(id int) {
	m.institution = &id
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (m *AcademicSchoolMutation) ClearInstitution() {
	m.clearedinstitution = true
}

// InstitutionCleared reports if the "institution" edge to the Institution entity was cleared.
func (m *AcademicSchoolMutation) InstitutionCleared() bool {
	return m.clearedinstitution
}

// InstitutionID returns the "institution" edge ID in the mutation.
func (m *AcademicSchoolMutation) InstitutionID() (id int, exists bool) {
	if m.institution != nil {
		return *m.institution, true
	}
	return
}

// InstitutionIDs returns the "institution" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InstitutionID instead. It exists only for internal usage by the builders.
func (m *AcademicSchoolMutation) InstitutionIDs() (ids []int) {
	if id := m.institution; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInstitution resets all changes to the "institution" edge.
func (m *AcademicSchoolMutation) ResetInstitution() {
	m.institution = nil
	m.clearedinstitution = false
}

// AddCourseIDs adds the "courses" edge to the Course entity by ids.
func (m *AcademicSchoolMutation) AddCourseIDs(ids ...int) {
	if m.courses == nil {
		m.courses = make(map[int]struct{})
	}
	for i := range ids {
		m.courses[ids[i]] = struct{}{}
	}
}

// ClearCourses clears the "courses" edge to the Course entity.
func (m *AcademicSchoolMutation) ClearCourses() {
	m.clearedcourses = true
}

// CoursesCleared reports if the "courses" edge to the Course entity was cleared.
func (m *AcademicSchoolMutation) CoursesCleared() bool {
	return m.clearedcourses
}

// RemoveCourseIDs removes the "courses" edge to the Course entity by IDs.
func (m *AcademicSchoolMutation) RemoveCourseIDs(ids ...int) {
	if m.removedcourses == nil {
		m.removedcourses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.courses, ids[i])
		m.removedcourses[ids[i]] = struct{}{}
	}
}

// RemovedCourses returns the removed IDs of the "courses" edge to the Course entity.
func (m *AcademicSchoolMutation) RemovedCoursesIDs() (ids []int) {
	for id := range m.removedcourses {
		ids = append(ids, id)
	}
	return
}

// CoursesIDs returns the "courses" edge IDs in the mutation.
func (m *AcademicSchoolMutation) CoursesIDs() (ids []int) {
	for id := range m.courses {
		ids = append(ids, id)
	}
	return
}

// ResetCourses resets all changes to the "courses" edge.
func (m *AcademicSchoolMutation) ResetCourses() {
	m.courses = nil
	m.clearedcourses = false
	m.removedcourses = nil
}

// Where appends a list predicates to the AcademicSchoolMutation builder.
func (m *AcademicSchoolMutation) Where(ps ...predicate.AcademicSchool) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AcademicSchoolMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AcademicSchoolMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AcademicSchool, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AcademicSchoolMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AcademicSchoolMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AcademicSchool).
func (m *AcademicSchoolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AcademicSchoolMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, academicschool.FieldName)
	}
	if m.school_code != nil {
		fields = append(fields, academicschool.FieldSchoolCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AcademicSchoolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case academicschool.FieldName:
		return m.Name()
	case academicschool.FieldSchoolCode:
		return m.SchoolCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AcademicSchoolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case academicschool.FieldName:
		return m.OldName(ctx)
	case academicschool.FieldSchoolCode:
		return m.OldSchoolCode(ctx)
	}
	return nil, fmt.Errorf("unknown AcademicSchool field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AcademicSchoolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case academicschool.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case academicschool.FieldSchoolCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSchoolCode(v)
		return nil
	}
	return fmt.Errorf("unknown AcademicSchool field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AcademicSchoolMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AcademicSchoolMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AcademicSchoolMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AcademicSchool numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AcademicSchoolMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AcademicSchoolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AcademicSchoolMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AcademicSchool nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AcademicSchoolMutation) ResetField(name string) error {
	switch name {
	case academicschool.FieldName:
		m.ResetName()
		return nil
	case academicschool.FieldSchoolCode:
		m.ResetSchoolCode()
		return nil
	}
	return fmt.Errorf("unknown AcademicSchool field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AcademicSchoolMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.institution != nil {
		edges = append(edges, academicschool.EdgeInstitution)
	}
	if m.courses != nil {
		edges = append(edges, academicschool.EdgeCourses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AcademicSchoolMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case academicschool.EdgeInstitution:
		if id := m.institution; id != nil {
			return []ent.Value{*id}
		}
	case academicschool.EdgeCourses:
		ids := make([]ent.Value, 0, len(m.courses))
		for id := range m.courses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AcademicSchoolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcourses != nil {
		edges = append(edges, academicschool.EdgeCourses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AcademicSchoolMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case academicschool.EdgeCourses:
		ids := make([]ent.Value, 0, len(m.removedcourses))
		for id := range m.removedcourses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AcademicSchoolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedinstitution {
		edges = append(edges, academicschool.EdgeInstitution)
	}
	if m.clearedcourses {
		edges = append(edges, academicschool.EdgeCourses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AcademicSchoolMutation) EdgeCleared(name string) bool {
	switch name {
	case academicschool.EdgeInstitution:
		return m.clearedinstitution
	case academicschool.EdgeCourses:
		return m.clearedcourses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AcademicSchoolMutation) ClearEdge(name string) error {
	switch name {
	case academicschool.EdgeInstitution:
		m.ClearInstitution()
		return nil
	}
	return fmt.Errorf("unknown AcademicSchool unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AcademicSchoolMutation) ResetEdge(name string) error {
	switch name {
	case academicschool.EdgeInstitution:
		m.ResetInstitution()
		return nil
	case academicschool.EdgeCourses:
		m.ResetCourses()
		return nil
	}
	return fmt.Errorf("unknown AcademicSchool edge %s", name)
}

// AccessoryMutation represents an operation that mutates the Accessory nodes in the graph.
type AccessoryMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	description        *string
	points_required    *int
	addpoints_required *int
	clearedFields      map[string]struct{}
	redemptions        map[int]struct{}
	removedredemptions map[int]struct{}
	clearedredemptions bool
	institution        *int
	clearedinstitution bool
	done               bool
	oldValue           func(context.Context) (*Accessory, error)
	predicates         []predicate.Accessory
}

var _ ent.Mutation = (*AccessoryMutation)(nil)

// accessoryOption allows management of the mutation configuration using functional options.
type accessoryOption func(*AccessoryMutation)

// newAccessoryMutation creates new mutation for the Accessory entity.
func newAccessoryMutation(c config, op Op, opts ...accessoryOption) *AccessoryMutation {
	m := &AccessoryMutation{
		config:        c,
		op:            op,
		typ:           TypeAccessory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccessoryID sets the ID field of the mutation.
func withAccessoryID(id int) accessoryOption {
	return func(m *AccessoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Accessory
		)
		m.oldValue = func(ctx context.Context) (*Accessory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Accessory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccessory sets the old Accessory of the mutation.
func withAccessory(node *Accessory) accessoryOption {
	return func(m *AccessoryMutation) {
		m.oldValue = func(context.Context) (*Accessory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccessoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccessoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccessoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccessoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Accessory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AccessoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AccessoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Accessory entity.
// If the Accessory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AccessoryMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *AccessoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AccessoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Accessory entity.
// If the Accessory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *AccessoryMutation) ResetDescription() {
	m.description = nil
}

// SetPointsRequired sets the "points_required" field.
func (m *AccessoryMutation) SetPointsRequired(i int) {
	m.points_required = &i
	m.addpoints_required = nil
}

// PointsRequired returns the value of the "points_required" field in the mutation.
func (m *AccessoryMutation) PointsRequired() (r int, exists bool) {
	v := m.points_required
	if v == nil {
		return
	}
	return *v, true
}

// OldPointsRequired returns the old "points_required" field's value of the Accessory entity.
// If the Accessory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessoryMutation) OldPointsRequired(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointsRequired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointsRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointsRequired: %w", err)
	}
	return oldValue.PointsRequired, nil
}

// AddPointsRequired adds i to the "points_required" field.
func (m *AccessoryMutation) AddPointsRequired(i int) {
	if m.addpoints_required != nil {
		*m.addpoints_required += i
	} else {
		m.addpoints_required = &i
	}
}

// AddedPointsRequired returns the value that was added to the "points_required" field in this mutation.
func (m *AccessoryMutation) AddedPointsRequired() (r int, exists bool) {
	v := m.addpoints_required
	if v == nil {
		return
	}
	return *v, true
}

// ResetPointsRequired resets all changes to the "points_required" field.
func (m *AccessoryMutation) ResetPointsRequired() {
	m.points_required = nil
	m.addpoints_required = nil
}

// AddRedemptionIDs adds the "redemptions" edge to the Redemption entity by ids.
func (m *AccessoryMutation) AddRedemptionIDs(ids ...int) {
	if m.redemptions == nil {
		m.redemptions = make(map[int]struct{})
	}
	for i := range ids {
		m.redemptions[ids[i]] = struct{}{}
	}
}

// ClearRedemptions clears the "redemptions" edge to the Redemption entity.
func (m *AccessoryMutation) ClearRedemptions() {
	m.clearedredemptions = true
}

// RedemptionsCleared reports if the "redemptions" edge to the Redemption entity was cleared.
func (m *AccessoryMutation) RedemptionsCleared() bool {
	return m.clearedredemptions
}

// RemoveRedemptionIDs removes the "redemptions" edge to the Redemption entity by IDs.
func (m *AccessoryMutation) RemoveRedemptionIDs(ids ...int) {
	if m.removedredemptions == nil {
		m.removedredemptions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.redemptions, ids[i])
		m.removedredemptions[ids[i]] = struct{}{}
	}
}

// RemovedRedemptions returns the removed IDs of the "redemptions" edge to the Redemption entity.
func (m *AccessoryMutation) RemovedRedemptionsIDs() (ids []int) {
	for id := range m.removedredemptions {
		ids = append(ids, id)
	}
	return
}

// RedemptionsIDs returns the "redemptions" edge IDs in the mutation.
func (m *AccessoryMutation) RedemptionsIDs() (ids []int) {
	for id := range m.redemptions {
		ids = append(ids, id)
	}
	return
}

// ResetRedemptions resets all changes to the "redemptions" edge.
func (m *AccessoryMutation) ResetRedemptions() {
	m.redemptions = nil
	m.clearedredemptions = false
	m.removedredemptions = nil
}

// SetInstitutionID sets the "institution" edge to the Institution entity by id.
func (m *AccessoryMutation) SetInstitutionID(id int) {
	m.institution = &id
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (m *AccessoryMutation) ClearInstitution() {
	m.clearedinstitution = true
}

// InstitutionCleared reports if the "institution" edge to the Institution entity was cleared.
func (m *AccessoryMutation) InstitutionCleared() bool {
	return m.clearedinstitution
}

// InstitutionID returns the "institution" edge ID in the mutation.
func (m *AccessoryMutation) InstitutionID() (id int, exists bool) {
	if m.institution != nil {
		return *m.institution, true
	}
	return
}

// InstitutionIDs returns the "institution" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InstitutionID instead. It exists only for internal usage by the builders.
func (m *AccessoryMutation) InstitutionIDs() (ids []int) {
	if id := m.institution; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInstitution resets all changes to the "institution" edge.
func (m *AccessoryMutation) ResetInstitution() {
	m.institution = nil
	m.clearedinstitution = false
}

// Where appends a list predicates to the AccessoryMutation builder.
func (m *AccessoryMutation) Where(ps ...predicate.Accessory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccessoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccessoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Accessory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccessoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccessoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Accessory).
func (m *AccessoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccessoryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, accessory.FieldName)
	}
	if m.description != nil {
		fields = append(fields, accessory.FieldDescription)
	}
	if m.points_required != nil {
		fields = append(fields, accessory.FieldPointsRequired)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccessoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case accessory.FieldName:
		return m.Name()
	case accessory.FieldDescription:
		return m.Description()
	case accessory.FieldPointsRequired:
		return m.PointsRequired()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccessoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case accessory.FieldName:
		return m.OldName(ctx)
	case accessory.FieldDescription:
		return m.OldDescription(ctx)
	case accessory.FieldPointsRequired:
		return m.OldPointsRequired(ctx)
	}
	return nil, fmt.Errorf("unknown Accessory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case accessory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case accessory.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case accessory.FieldPointsRequired:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointsRequired(v)
		return nil
	}
	return fmt.Errorf("unknown Accessory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccessoryMutation) AddedFields() []string {
	var fields []string
	if m.addpoints_required != nil {
		fields = append(fields, accessory.FieldPointsRequired)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccessoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case accessory.FieldPointsRequired:
		return m.AddedPointsRequired()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case accessory.FieldPointsRequired:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPointsRequired(v)
		return nil
	}
	return fmt.Errorf("unknown Accessory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccessoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccessoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccessoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Accessory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccessoryMutation) ResetField(name string) error {
	switch name {
	case accessory.FieldName:
		m.ResetName()
		return nil
	case accessory.FieldDescription:
		m.ResetDescription()
		return nil
	case accessory.FieldPointsRequired:
		m.ResetPointsRequired()
		return nil
	}
	return fmt.Errorf("unknown Accessory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccessoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.redemptions != nil {
		edges = append(edges, accessory.EdgeRedemptions)
	}
	if m.institution != nil {
		edges = append(edges, accessory.EdgeInstitution)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccessoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case accessory.EdgeRedemptions:
		ids := make([]ent.Value, 0, len(m.redemptions))
		for id := range m.redemptions {
			ids = append(ids, id)
		}
		return ids
	case accessory.EdgeInstitution:
		if id := m.institution; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccessoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedredemptions != nil {
		edges = append(edges, accessory.EdgeRedemptions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccessoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case accessory.EdgeRedemptions:
		ids := make([]ent.Value, 0, len(m.removedredemptions))
		for id := range m.removedredemptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccessoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedredemptions {
		edges = append(edges, accessory.EdgeRedemptions)
	}
	if m.clearedinstitution {
		edges = append(edges, accessory.EdgeInstitution)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccessoryMutation) EdgeCleared(name string) bool {
	switch name {
	case accessory.EdgeRedemptions:
		return m.clearedredemptions
	case accessory.EdgeInstitution:
		return m.clearedinstitution
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccessoryMutation) ClearEdge(name string) error {
	switch name {
	case accessory.EdgeInstitution:
		m.ClearInstitution()
		return nil
	}
	return fmt.Errorf("unknown Accessory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccessoryMutation) ResetEdge(name string) error {
	switch name {
	case accessory.EdgeRedemptions:
		m.ResetRedemptions()
		return nil
	case accessory.EdgeInstitution:
		m.ResetInstitution()
		return nil
	}
	return fmt.Errorf("unknown Accessory edge %s", name)
}

// CourseMutation represents an operation that mutates the Course nodes in the graph.
type CourseMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	course_id              *string
	clearedFields          map[string]struct{}
	students               map[int]struct{}
	removedstudents        map[int]struct{}
	clearedstudents        bool
	academic_school        *int
	clearedacademic_school bool
	done                   bool
	oldValue               func(context.Context) (*Course, error)
	predicates             []predicate.Course
}

var _ ent.Mutation = (*CourseMutation)(nil)

// courseOption allows management of the mutation configuration using functional options.
type courseOption func(*CourseMutation)

// newCourseMutation creates new mutation for the Course entity.
func newCourseMutation(c config, op Op, opts ...courseOption) *CourseMutation {
	m := &CourseMutation{
		config:        c,
		op:            op,
		typ:           TypeCourse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCourseID sets the ID field of the mutation.
func withCourseID(id int) courseOption {
	return func(m *CourseMutation) {
		var (
			err   error
			once  sync.Once
			value *Course
		)
		m.oldValue = func(ctx context.Context) (*Course, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Course.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCourse sets the old Course of the mutation.
func withCourse(node *Course) courseOption {
	return func(m *CourseMutation) {
		m.oldValue = func(context.Context) (*Course, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CourseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CourseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CourseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CourseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Course.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CourseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CourseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CourseMutation) ResetName() {
	m.name = nil
}

// SetCourseID sets the "course_id" field.
func (m *CourseMutation) SetCourseID(s string) {
	m.course_id = &s
}

// CourseID returns the value of the "course_id" field in the mutation.
func (m *CourseMutation) CourseID() (r string, exists bool) {
	v := m.course_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCourseID returns the old "course_id" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldCourseID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCourseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCourseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCourseID: %w", err)
	}
	return oldValue.CourseID, nil
}

// ResetCourseID resets all changes to the "course_id" field.
func (m *CourseMutation) ResetCourseID() {
	m.course_id = nil
}

// AddStudentIDs adds the "students" edge to the User entity by ids.
func (m *CourseMutation) AddStudentIDs(ids ...int) {
	if m.students == nil {
		m.students = make(map[int]struct{})
	}
	for i := range ids {
		m.students[ids[i]] = struct{}{}
	}
}

// ClearStudents clears the "students" edge to the User entity.
func (m *CourseMutation) ClearStudents() {
	m.clearedstudents = true
}

// StudentsCleared reports if the "students" edge to the User entity was cleared.
func (m *CourseMutation) StudentsCleared() bool {
	return m.clearedstudents
}

// RemoveStudentIDs removes the "students" edge to the User entity by IDs.
func (m *CourseMutation) RemoveStudentIDs(ids ...int) {
	if m.removedstudents == nil {
		m.removedstudents = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.students, ids[i])
		m.removedstudents[ids[i]] = struct{}{}
	}
}

// RemovedStudents returns the removed IDs of the "students" edge to the User entity.
func (m *CourseMutation) RemovedStudentsIDs() (ids []int) {
	for id := range m.removedstudents {
		ids = append(ids, id)
	}
	return
}

// StudentsIDs returns the "students" edge IDs in the mutation.
func (m *CourseMutation) StudentsIDs() (ids []int) {
	for id := range m.students {
		ids = append(ids, id)
	}
	return
}

// ResetStudents resets all changes to the "students" edge.
func (m *CourseMutation) ResetStudents() {
	m.students = nil
	m.clearedstudents = false
	m.removedstudents = nil
}

// SetAcademicSchoolID sets the "academic_school" edge to the AcademicSchool entity by id.
func (m *CourseMutation) SetAcademicSchoolID(id int) {
	m.academic_school = &id
}

// ClearAcademicSchool clears the "academic_school" edge to the AcademicSchool entity.
func (m *CourseMutation) ClearAcademicSchool() {
	m.clearedacademic_school = true
}

// AcademicSchoolCleared reports if the "academic_school" edge to the AcademicSchool entity was cleared.
func (m *CourseMutation) AcademicSchoolCleared() bool {
	return m.clearedacademic_school
}

// AcademicSchoolID returns the "academic_school" edge ID in the mutation.
func (m *CourseMutation) AcademicSchoolID() (id int, exists bool) {
	if m.academic_school != nil {
		return *m.academic_school, true
	}
	return
}

// AcademicSchoolIDs returns the "academic_school" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AcademicSchoolID instead. It exists only for internal usage by the builders.
func (m *CourseMutation) AcademicSchoolIDs() (ids []int) {
	if id := m.academic_school; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAcademicSchool resets all changes to the "academic_school" edge.
func (m *CourseMutation) ResetAcademicSchool() {
	m.academic_school = nil
	m.clearedacademic_school = false
}

// Where appends a list predicates to the CourseMutation builder.
func (m *CourseMutation) Where(ps ...predicate.Course) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CourseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CourseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Course, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CourseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CourseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Course).
func (m *CourseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CourseMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, course.FieldName)
	}
	if m.course_id != nil {
		fields = append(fields, course.FieldCourseID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CourseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case course.FieldName:
		return m.Name()
	case course.FieldCourseID:
		return m.CourseID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CourseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case course.FieldName:
		return m.OldName(ctx)
	case course.FieldCourseID:
		return m.OldCourseID(ctx)
	}
	return nil, fmt.Errorf("unknown Course field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case course.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case course.FieldCourseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCourseID(v)
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CourseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CourseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Course numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CourseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CourseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CourseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Course nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CourseMutation) ResetField(name string) error {
	switch name {
	case course.FieldName:
		m.ResetName()
		return nil
	case course.FieldCourseID:
		m.ResetCourseID()
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CourseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.students != nil {
		edges = append(edges, course.EdgeStudents)
	}
	if m.academic_school != nil {
		edges = append(edges, course.EdgeAcademicSchool)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CourseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.students))
		for id := range m.students {
			ids = append(ids, id)
		}
		return ids
	case course.EdgeAcademicSchool:
		if id := m.academic_school; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CourseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedstudents != nil {
		edges = append(edges, course.EdgeStudents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CourseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.removedstudents))
		for id := range m.removedstudents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CourseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstudents {
		edges = append(edges, course.EdgeStudents)
	}
	if m.clearedacademic_school {
		edges = append(edges, course.EdgeAcademicSchool)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CourseMutation) EdgeCleared(name string) bool {
	switch name {
	case course.EdgeStudents:
		return m.clearedstudents
	case course.EdgeAcademicSchool:
		return m.clearedacademic_school
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CourseMutation) ClearEdge(name string) error {
	switch name {
	case course.EdgeAcademicSchool:
		m.ClearAcademicSchool()
		return nil
	}
	return fmt.Errorf("unknown Course unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CourseMutation) ResetEdge(name string) error {
	switch name {
	case course.EdgeStudents:
		m.ResetStudents()
		return nil
	case course.EdgeAcademicSchool:
		m.ResetAcademicSchool()
		return nil
	}
	return fmt.Errorf("unknown Course edge %s", name)
}

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	start_time     *time.Time
	end_time       *time.Time
	location       *string
	repeat_pattern *string
	clearedFields  map[string]struct{}
	group          *int
	clearedgroup   bool
	done           bool
	oldValue       func(context.Context) (*Event, error)
	predicates     []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id int) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *EventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EventMutation) ResetName() {
	m.name = nil
}

// SetStartTime sets the "start_time" field.
func (m *EventMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *EventMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *EventMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *EventMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *EventMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEndTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ClearEndTime clears the value of the "end_time" field.
func (m *EventMutation) ClearEndTime() {
	m.end_time = nil
	m.clearedFields[event.FieldEndTime] = struct{}{}
}

// EndTimeCleared returns if the "end_time" field was cleared in this mutation.
func (m *EventMutation) EndTimeCleared() bool {
	_, ok := m.clearedFields[event.FieldEndTime]
	return ok
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *EventMutation) ResetEndTime() {
	m.end_time = nil
	delete(m.clearedFields, event.FieldEndTime)
}

// SetLocation sets the "location" field.
func (m *EventMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *EventMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *EventMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[event.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *EventMutation) LocationCleared() bool {
	_, ok := m.clearedFields[event.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *EventMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, event.FieldLocation)
}

// SetRepeatPattern sets the "repeat_pattern" field.
func (m *EventMutation) SetRepeatPattern(s string) {
	m.repeat_pattern = &s
}

// RepeatPattern returns the value of the "repeat_pattern" field in the mutation.
func (m *EventMutation) RepeatPattern() (r string, exists bool) {
	v := m.repeat_pattern
	if v == nil {
		return
	}
	return *v, true
}

// OldRepeatPattern returns the old "repeat_pattern" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldRepeatPattern(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepeatPattern is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepeatPattern requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepeatPattern: %w", err)
	}
	return oldValue.RepeatPattern, nil
}

// ClearRepeatPattern clears the value of the "repeat_pattern" field.
func (m *EventMutation) ClearRepeatPattern() {
	m.repeat_pattern = nil
	m.clearedFields[event.FieldRepeatPattern] = struct{}{}
}

// RepeatPatternCleared returns if the "repeat_pattern" field was cleared in this mutation.
func (m *EventMutation) RepeatPatternCleared() bool {
	_, ok := m.clearedFields[event.FieldRepeatPattern]
	return ok
}

// ResetRepeatPattern resets all changes to the "repeat_pattern" field.
func (m *EventMutation) ResetRepeatPattern() {
	m.repeat_pattern = nil
	delete(m.clearedFields, event.FieldRepeatPattern)
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *EventMutation) SetGroupID(id int) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *EventMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *EventMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *EventMutation) GroupID() (id int, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *EventMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *EventMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, event.FieldName)
	}
	if m.start_time != nil {
		fields = append(fields, event.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, event.FieldEndTime)
	}
	if m.location != nil {
		fields = append(fields, event.FieldLocation)
	}
	if m.repeat_pattern != nil {
		fields = append(fields, event.FieldRepeatPattern)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldName:
		return m.Name()
	case event.FieldStartTime:
		return m.StartTime()
	case event.FieldEndTime:
		return m.EndTime()
	case event.FieldLocation:
		return m.Location()
	case event.FieldRepeatPattern:
		return m.RepeatPattern()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldName:
		return m.OldName(ctx)
	case event.FieldStartTime:
		return m.OldStartTime(ctx)
	case event.FieldEndTime:
		return m.OldEndTime(ctx)
	case event.FieldLocation:
		return m.OldLocation(ctx)
	case event.FieldRepeatPattern:
		return m.OldRepeatPattern(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case event.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case event.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case event.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case event.FieldRepeatPattern:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepeatPattern(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(event.FieldEndTime) {
		fields = append(fields, event.FieldEndTime)
	}
	if m.FieldCleared(event.FieldLocation) {
		fields = append(fields, event.FieldLocation)
	}
	if m.FieldCleared(event.FieldRepeatPattern) {
		fields = append(fields, event.FieldRepeatPattern)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	switch name {
	case event.FieldEndTime:
		m.ClearEndTime()
		return nil
	case event.FieldLocation:
		m.ClearLocation()
		return nil
	case event.FieldRepeatPattern:
		m.ClearRepeatPattern()
		return nil
	}
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldName:
		m.ResetName()
		return nil
	case event.FieldStartTime:
		m.ResetStartTime()
		return nil
	case event.FieldEndTime:
		m.ResetEndTime()
		return nil
	case event.FieldLocation:
		m.ResetLocation()
		return nil
	case event.FieldRepeatPattern:
		m.ResetRepeatPattern()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.group != nil {
		edges = append(edges, event.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroup {
		edges = append(edges, event.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	case event.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// ForumPostMutation represents an operation that mutates the ForumPost nodes in the graph.
type ForumPostMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	title                      *string
	content                    *string
	mentioned_users_json       *[]int
	appendmentioned_users_json []int
	clearedFields              map[string]struct{}
	author                     *int
	clearedauthor              bool
	group                      *int
	clearedgroup               bool
	parent                     *int
	clearedparent              bool
	children                   map[int]struct{}
	removedchildren            map[int]struct{}
	clearedchildren            bool
	reacted_users              map[int]struct{}
	removedreacted_users       map[int]struct{}
	clearedreacted_users       bool
	done                       bool
	oldValue                   func(context.Context) (*ForumPost, error)
	predicates                 []predicate.ForumPost
}

var _ ent.Mutation = (*ForumPostMutation)(nil)

// forumpostOption allows management of the mutation configuration using functional options.
type forumpostOption func(*ForumPostMutation)

// newForumPostMutation creates new mutation for the ForumPost entity.
func newForumPostMutation(c config, op Op, opts ...forumpostOption) *ForumPostMutation {
	m := &ForumPostMutation{
		config:        c,
		op:            op,
		typ:           TypeForumPost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withForumPostID sets the ID field of the mutation.
func withForumPostID(id int) forumpostOption {
	return func(m *ForumPostMutation) {
		var (
			err   error
			once  sync.Once
			value *ForumPost
		)
		m.oldValue = func(ctx context.Context) (*ForumPost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ForumPost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withForumPost sets the old ForumPost of the mutation.
func withForumPost(node *ForumPost) forumpostOption {
	return func(m *ForumPostMutation) {
		m.oldValue = func(context.Context) (*ForumPost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ForumPostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ForumPostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ForumPostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ForumPostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ForumPost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *ForumPostMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ForumPostMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the ForumPost entity.
// If the ForumPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForumPostMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ForumPostMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the "content" field.
func (m *ForumPostMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ForumPostMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the ForumPost entity.
// If the ForumPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForumPostMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ForumPostMutation) ResetContent() {
	m.content = nil
}

// SetMentionedUsersJSON sets the "mentioned_users_json" field.
func (m *ForumPostMutation) SetMentionedUsersJSON(i []int) {
	m.mentioned_users_json = &i
	m.appendmentioned_users_json = nil
}

// MentionedUsersJSON returns the value of the "mentioned_users_json" field in the mutation.
func (m *ForumPostMutation) MentionedUsersJSON() (r []int, exists bool) {
	v := m.mentioned_users_json
	if v == nil {
		return
	}
	return *v, true
}

// OldMentionedUsersJSON returns the old "mentioned_users_json" field's value of the ForumPost entity.
// If the ForumPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForumPostMutation) OldMentionedUsersJSON(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMentionedUsersJSON is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMentionedUsersJSON requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMentionedUsersJSON: %w", err)
	}
	return oldValue.MentionedUsersJSON, nil
}

// AppendMentionedUsersJSON adds i to the "mentioned_users_json" field.
func (m *ForumPostMutation) AppendMentionedUsersJSON(i []int) {
	m.appendmentioned_users_json = append(m.appendmentioned_users_json, i...)
}

// AppendedMentionedUsersJSON returns the list of values that were appended to the "mentioned_users_json" field in this mutation.
func (m *ForumPostMutation) AppendedMentionedUsersJSON() ([]int, bool) {
	if len(m.appendmentioned_users_json) == 0 {
		return nil, false
	}
	return m.appendmentioned_users_json, true
}

// ResetMentionedUsersJSON resets all changes to the "mentioned_users_json" field.
func (m *ForumPostMutation) ResetMentionedUsersJSON() {
	m.mentioned_users_json = nil
	m.appendmentioned_users_json = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *ForumPostMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *ForumPostMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *ForumPostMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *ForumPostMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *ForumPostMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *ForumPostMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *ForumPostMutation) SetGroupID(id int) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *ForumPostMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *ForumPostMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *ForumPostMutation) GroupID() (id int, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *ForumPostMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *ForumPostMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// SetParentID sets the "parent" edge to the ForumPost entity by id.
func (m *ForumPostMutation) SetParentID(id int) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the ForumPost entity.
func (m *ForumPostMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the ForumPost entity was cleared.
func (m *ForumPostMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *ForumPostMutation) ParentID() (id int, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *ForumPostMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *ForumPostMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the ForumPost entity by ids.
func (m *ForumPostMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the ForumPost entity.
func (m *ForumPostMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the ForumPost entity was cleared.
func (m *ForumPostMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the ForumPost entity by IDs.
func (m *ForumPostMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the ForumPost entity.
func (m *ForumPostMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *ForumPostMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *ForumPostMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// AddReactedUserIDs adds the "reacted_users" edge to the User entity by ids.
func (m *ForumPostMutation) AddReactedUserIDs(ids ...int) {
	if m.reacted_users == nil {
		m.reacted_users = make(map[int]struct{})
	}
	for i := range ids {
		m.reacted_users[ids[i]] = struct{}{}
	}
}

// ClearReactedUsers clears the "reacted_users" edge to the User entity.
func (m *ForumPostMutation) ClearReactedUsers() {
	m.clearedreacted_users = true
}

// ReactedUsersCleared reports if the "reacted_users" edge to the User entity was cleared.
func (m *ForumPostMutation) ReactedUsersCleared() bool {
	return m.clearedreacted_users
}

// RemoveReactedUserIDs removes the "reacted_users" edge to the User entity by IDs.
func (m *ForumPostMutation) RemoveReactedUserIDs(ids ...int) {
	if m.removedreacted_users == nil {
		m.removedreacted_users = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reacted_users, ids[i])
		m.removedreacted_users[ids[i]] = struct{}{}
	}
}

// RemovedReactedUsers returns the removed IDs of the "reacted_users" edge to the User entity.
func (m *ForumPostMutation) RemovedReactedUsersIDs() (ids []int) {
	for id := range m.removedreacted_users {
		ids = append(ids, id)
	}
	return
}

// ReactedUsersIDs returns the "reacted_users" edge IDs in the mutation.
func (m *ForumPostMutation) ReactedUsersIDs() (ids []int) {
	for id := range m.reacted_users {
		ids = append(ids, id)
	}
	return
}

// ResetReactedUsers resets all changes to the "reacted_users" edge.
func (m *ForumPostMutation) ResetReactedUsers() {
	m.reacted_users = nil
	m.clearedreacted_users = false
	m.removedreacted_users = nil
}

// Where appends a list predicates to the ForumPostMutation builder.
func (m *ForumPostMutation) Where(ps ...predicate.ForumPost) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ForumPostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ForumPostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ForumPost, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ForumPostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ForumPostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ForumPost).
func (m *ForumPostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ForumPostMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, forumpost.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, forumpost.FieldContent)
	}
	if m.mentioned_users_json != nil {
		fields = append(fields, forumpost.FieldMentionedUsersJSON)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ForumPostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case forumpost.FieldTitle:
		return m.Title()
	case forumpost.FieldContent:
		return m.Content()
	case forumpost.FieldMentionedUsersJSON:
		return m.MentionedUsersJSON()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ForumPostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case forumpost.FieldTitle:
		return m.OldTitle(ctx)
	case forumpost.FieldContent:
		return m.OldContent(ctx)
	case forumpost.FieldMentionedUsersJSON:
		return m.OldMentionedUsersJSON(ctx)
	}
	return nil, fmt.Errorf("unknown ForumPost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ForumPostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case forumpost.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case forumpost.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case forumpost.FieldMentionedUsersJSON:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMentionedUsersJSON(v)
		return nil
	}
	return fmt.Errorf("unknown ForumPost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ForumPostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ForumPostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ForumPostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ForumPost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ForumPostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ForumPostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ForumPostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ForumPost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ForumPostMutation) ResetField(name string) error {
	switch name {
	case forumpost.FieldTitle:
		m.ResetTitle()
		return nil
	case forumpost.FieldContent:
		m.ResetContent()
		return nil
	case forumpost.FieldMentionedUsersJSON:
		m.ResetMentionedUsersJSON()
		return nil
	}
	return fmt.Errorf("unknown ForumPost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ForumPostMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.author != nil {
		edges = append(edges, forumpost.EdgeAuthor)
	}
	if m.group != nil {
		edges = append(edges, forumpost.EdgeGroup)
	}
	if m.parent != nil {
		edges = append(edges, forumpost.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, forumpost.EdgeChildren)
	}
	if m.reacted_users != nil {
		edges = append(edges, forumpost.EdgeReactedUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ForumPostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case forumpost.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case forumpost.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case forumpost.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case forumpost.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case forumpost.EdgeReactedUsers:
		ids := make([]ent.Value, 0, len(m.reacted_users))
		for id := range m.reacted_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ForumPostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedchildren != nil {
		edges = append(edges, forumpost.EdgeChildren)
	}
	if m.removedreacted_users != nil {
		edges = append(edges, forumpost.EdgeReactedUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ForumPostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case forumpost.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case forumpost.EdgeReactedUsers:
		ids := make([]ent.Value, 0, len(m.removedreacted_users))
		for id := range m.removedreacted_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ForumPostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedauthor {
		edges = append(edges, forumpost.EdgeAuthor)
	}
	if m.clearedgroup {
		edges = append(edges, forumpost.EdgeGroup)
	}
	if m.clearedparent {
		edges = append(edges, forumpost.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, forumpost.EdgeChildren)
	}
	if m.clearedreacted_users {
		edges = append(edges, forumpost.EdgeReactedUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ForumPostMutation) EdgeCleared(name string) bool {
	switch name {
	case forumpost.EdgeAuthor:
		return m.clearedauthor
	case forumpost.EdgeGroup:
		return m.clearedgroup
	case forumpost.EdgeParent:
		return m.clearedparent
	case forumpost.EdgeChildren:
		return m.clearedchildren
	case forumpost.EdgeReactedUsers:
		return m.clearedreacted_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ForumPostMutation) ClearEdge(name string) error {
	switch name {
	case forumpost.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case forumpost.EdgeGroup:
		m.ClearGroup()
		return nil
	case forumpost.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown ForumPost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ForumPostMutation) ResetEdge(name string) error {
	switch name {
	case forumpost.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case forumpost.EdgeGroup:
		m.ResetGroup()
		return nil
	case forumpost.EdgeParent:
		m.ResetParent()
		return nil
	case forumpost.EdgeChildren:
		m.ResetChildren()
		return nil
	case forumpost.EdgeReactedUsers:
		m.ResetReactedUsers()
		return nil
	}
	return fmt.Errorf("unknown ForumPost edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	_path              *string
	name               *string
	description        *string
	group_type         *group.GroupType
	clearedFields      map[string]struct{}
	users              map[int]struct{}
	removedusers       map[int]struct{}
	clearedusers       bool
	events             map[int]struct{}
	removedevents      map[int]struct{}
	clearedevents      bool
	forum_posts        map[int]struct{}
	removedforum_posts map[int]struct{}
	clearedforum_posts bool
	done               bool
	oldValue           func(context.Context) (*Group, error)
	predicates         []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPath sets the "path" field.
func (m *GroupMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *GroupMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *GroupMutation) ResetPath() {
	m._path = nil
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *GroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *GroupMutation) ResetDescription() {
	m.description = nil
}

// SetGroupType sets the "group_type" field.
func (m *GroupMutation) SetGroupType(gt group.GroupType) {
	m.group_type = &gt
}

// GroupType returns the value of the "group_type" field in the mutation.
func (m *GroupMutation) GroupType() (r group.GroupType, exists bool) {
	v := m.group_type
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupType returns the old "group_type" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldGroupType(ctx context.Context) (v group.GroupType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupType: %w", err)
	}
	return oldValue.GroupType, nil
}

// ResetGroupType resets all changes to the "group_type" field.
func (m *GroupMutation) ResetGroupType() {
	m.group_type = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *GroupMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *GroupMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *GroupMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *GroupMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *GroupMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *GroupMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *GroupMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddEventIDs adds the "events" edge to the Event entity by ids.
func (m *GroupMutation) AddEventIDs(ids ...int) {
	if m.events == nil {
		m.events = make(map[int]struct{})
	}
	for i := range ids {
		m.events[ids[i]] = struct{}{}
	}
}

// ClearEvents clears the "events" edge to the Event entity.
func (m *GroupMutation) ClearEvents() {
	m.clearedevents = true
}

// EventsCleared reports if the "events" edge to the Event entity was cleared.
func (m *GroupMutation) EventsCleared() bool {
	return m.clearedevents
}

// RemoveEventIDs removes the "events" edge to the Event entity by IDs.
func (m *GroupMutation) RemoveEventIDs(ids ...int) {
	if m.removedevents == nil {
		m.removedevents = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.events, ids[i])
		m.removedevents[ids[i]] = struct{}{}
	}
}

// RemovedEvents returns the removed IDs of the "events" edge to the Event entity.
func (m *GroupMutation) RemovedEventsIDs() (ids []int) {
	for id := range m.removedevents {
		ids = append(ids, id)
	}
	return
}

// EventsIDs returns the "events" edge IDs in the mutation.
func (m *GroupMutation) EventsIDs() (ids []int) {
	for id := range m.events {
		ids = append(ids, id)
	}
	return
}

// ResetEvents resets all changes to the "events" edge.
func (m *GroupMutation) ResetEvents() {
	m.events = nil
	m.clearedevents = false
	m.removedevents = nil
}

// AddForumPostIDs adds the "forum_posts" edge to the ForumPost entity by ids.
func (m *GroupMutation) AddForumPostIDs(ids ...int) {
	if m.forum_posts == nil {
		m.forum_posts = make(map[int]struct{})
	}
	for i := range ids {
		m.forum_posts[ids[i]] = struct{}{}
	}
}

// ClearForumPosts clears the "forum_posts" edge to the ForumPost entity.
func (m *GroupMutation) ClearForumPosts() {
	m.clearedforum_posts = true
}

// ForumPostsCleared reports if the "forum_posts" edge to the ForumPost entity was cleared.
func (m *GroupMutation) ForumPostsCleared() bool {
	return m.clearedforum_posts
}

// RemoveForumPostIDs removes the "forum_posts" edge to the ForumPost entity by IDs.
func (m *GroupMutation) RemoveForumPostIDs(ids ...int) {
	if m.removedforum_posts == nil {
		m.removedforum_posts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.forum_posts, ids[i])
		m.removedforum_posts[ids[i]] = struct{}{}
	}
}

// RemovedForumPosts returns the removed IDs of the "forum_posts" edge to the ForumPost entity.
func (m *GroupMutation) RemovedForumPostsIDs() (ids []int) {
	for id := range m.removedforum_posts {
		ids = append(ids, id)
	}
	return
}

// ForumPostsIDs returns the "forum_posts" edge IDs in the mutation.
func (m *GroupMutation) ForumPostsIDs() (ids []int) {
	for id := range m.forum_posts {
		ids = append(ids, id)
	}
	return
}

// ResetForumPosts resets all changes to the "forum_posts" edge.
func (m *GroupMutation) ResetForumPosts() {
	m.forum_posts = nil
	m.clearedforum_posts = false
	m.removedforum_posts = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._path != nil {
		fields = append(fields, group.FieldPath)
	}
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.description != nil {
		fields = append(fields, group.FieldDescription)
	}
	if m.group_type != nil {
		fields = append(fields, group.FieldGroupType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldPath:
		return m.Path()
	case group.FieldName:
		return m.Name()
	case group.FieldDescription:
		return m.Description()
	case group.FieldGroupType:
		return m.GroupType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldPath:
		return m.OldPath(ctx)
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldDescription:
		return m.OldDescription(ctx)
	case group.FieldGroupType:
		return m.OldGroupType(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case group.FieldGroupType:
		v, ok := value.(group.GroupType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupType(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldPath:
		m.ResetPath()
		return nil
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldDescription:
		m.ResetDescription()
		return nil
	case group.FieldGroupType:
		m.ResetGroupType()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.users != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.events != nil {
		edges = append(edges, group.EdgeEvents)
	}
	if m.forum_posts != nil {
		edges = append(edges, group.EdgeForumPosts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.events))
		for id := range m.events {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeForumPosts:
		ids := make([]ent.Value, 0, len(m.forum_posts))
		for id := range m.forum_posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedusers != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.removedevents != nil {
		edges = append(edges, group.EdgeEvents)
	}
	if m.removedforum_posts != nil {
		edges = append(edges, group.EdgeForumPosts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.removedevents))
		for id := range m.removedevents {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeForumPosts:
		ids := make([]ent.Value, 0, len(m.removedforum_posts))
		for id := range m.removedforum_posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedusers {
		edges = append(edges, group.EdgeUsers)
	}
	if m.clearedevents {
		edges = append(edges, group.EdgeEvents)
	}
	if m.clearedforum_posts {
		edges = append(edges, group.EdgeForumPosts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeUsers:
		return m.clearedusers
	case group.EdgeEvents:
		return m.clearedevents
	case group.EdgeForumPosts:
		return m.clearedforum_posts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeUsers:
		m.ResetUsers()
		return nil
	case group.EdgeEvents:
		m.ResetEvents()
		return nil
	case group.EdgeForumPosts:
		m.ResetForumPosts()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// GroupUserMutation represents an operation that mutates the GroupUser nodes in the graph.
type GroupUserMutation struct {
	config
	op            Op
	typ           string
	role          *groupuser.Role
	clearedFields map[string]struct{}
	group         *int
	clearedgroup  bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*GroupUser, error)
	predicates    []predicate.GroupUser
}

var _ ent.Mutation = (*GroupUserMutation)(nil)

// groupuserOption allows management of the mutation configuration using functional options.
type groupuserOption func(*GroupUserMutation)

// newGroupUserMutation creates new mutation for the GroupUser entity.
func newGroupUserMutation(c config, op Op, opts ...groupuserOption) *GroupUserMutation {
	m := &GroupUserMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetGroupID sets the "group_id" field.
func (m *GroupUserMutation) SetGroupID(i int) {
	m.group = &i
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *GroupUserMutation) GroupID() (r int, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *GroupUserMutation) ResetGroupID() {
	m.group = nil
}

// SetUserID sets the "user_id" field.
func (m *GroupUserMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GroupUserMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GroupUserMutation) ResetUserID() {
	m.user = nil
}

// SetRole sets the "role" field.
func (m *GroupUserMutation) SetRole(gr groupuser.Role) {
	m.role = &gr
}

// Role returns the value of the "role" field in the mutation.
func (m *GroupUserMutation) Role() (r groupuser.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// ResetRole resets all changes to the "role" field.
func (m *GroupUserMutation) ResetRole() {
	m.role = nil
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupUserMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupUserMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupUserMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupUserMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *GroupUserMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GroupUserMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GroupUserMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GroupUserMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the GroupUserMutation builder.
func (m *GroupUserMutation) Where(ps ...predicate.GroupUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupUser).
func (m *GroupUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupUserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.group != nil {
		fields = append(fields, groupuser.FieldGroupID)
	}
	if m.user != nil {
		fields = append(fields, groupuser.FieldUserID)
	}
	if m.role != nil {
		fields = append(fields, groupuser.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupuser.FieldGroupID:
		return m.GroupID()
	case groupuser.FieldUserID:
		return m.UserID()
	case groupuser.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema GroupUser does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupuser.FieldGroupID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case groupuser.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case groupuser.FieldRole:
		v, ok := value.(groupuser.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown GroupUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupUserMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GroupUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupUserMutation) ResetField(name string) error {
	switch name {
	case groupuser.FieldGroupID:
		m.ResetGroupID()
		return nil
	case groupuser.FieldUserID:
		m.ResetUserID()
		return nil
	case groupuser.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown GroupUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.group != nil {
		edges = append(edges, groupuser.EdgeGroup)
	}
	if m.user != nil {
		edges = append(edges, groupuser.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupuser.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case groupuser.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgroup {
		edges = append(edges, groupuser.EdgeGroup)
	}
	if m.cleareduser {
		edges = append(edges, groupuser.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupUserMutation) EdgeCleared(name string) bool {
	switch name {
	case groupuser.EdgeGroup:
		return m.clearedgroup
	case groupuser.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupUserMutation) ClearEdge(name string) error {
	switch name {
	case groupuser.EdgeGroup:
		m.ClearGroup()
		return nil
	case groupuser.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown GroupUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupUserMutation) ResetEdge(name string) error {
	switch name {
	case groupuser.EdgeGroup:
		m.ResetGroup()
		return nil
	case groupuser.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown GroupUser edge %s", name)
}

// InstitutionMutation represents an operation that mutates the Institution nodes in the graph.
type InstitutionMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	clearedFields           map[string]struct{}
	admins                  map[int]struct{}
	removedadmins           map[int]struct{}
	clearedadmins           bool
	vouchers                map[int]struct{}
	removedvouchers         map[int]struct{}
	clearedvouchers         bool
	accessories             map[int]struct{}
	removedaccessories      map[int]struct{}
	clearedaccessories      bool
	academic_schools        map[int]struct{}
	removedacademic_schools map[int]struct{}
	clearedacademic_schools bool
	done                    bool
	oldValue                func(context.Context) (*Institution, error)
	predicates              []predicate.Institution
}

var _ ent.Mutation = (*InstitutionMutation)(nil)

// institutionOption allows management of the mutation configuration using functional options.
type institutionOption func(*InstitutionMutation)

// newInstitutionMutation creates new mutation for the Institution entity.
func newInstitutionMutation(c config, op Op, opts ...institutionOption) *InstitutionMutation {
	m := &InstitutionMutation{
		config:        c,
		op:            op,
		typ:           TypeInstitution,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInstitutionID sets the ID field of the mutation.
func withInstitutionID(id int) institutionOption {
	return func(m *InstitutionMutation) {
		var (
			err   error
			once  sync.Once
			value *Institution
		)
		m.oldValue = func(ctx context.Context) (*Institution, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Institution.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInstitution sets the old Institution of the mutation.
func withInstitution(node *Institution) institutionOption {
	return func(m *InstitutionMutation) {
		m.oldValue = func(context.Context) (*Institution, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InstitutionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InstitutionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InstitutionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InstitutionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Institution.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *InstitutionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *InstitutionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Institution entity.
// If the Institution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstitutionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *InstitutionMutation) ResetName() {
	m.name = nil
}

// AddAdminIDs adds the "admins" edge to the User entity by ids.
func (m *InstitutionMutation) AddAdminIDs(ids ...int) {
	if m.admins == nil {
		m.admins = make(map[int]struct{})
	}
	for i := range ids {
		m.admins[ids[i]] = struct{}{}
	}
}

// ClearAdmins clears the "admins" edge to the User entity.
func (m *InstitutionMutation) ClearAdmins() {
	m.clearedadmins = true
}

// AdminsCleared reports if the "admins" edge to the User entity was cleared.
func (m *InstitutionMutation) AdminsCleared() bool {
	return m.clearedadmins
}

// RemoveAdminIDs removes the "admins" edge to the User entity by IDs.
func (m *InstitutionMutation) RemoveAdminIDs(ids ...int) {
	if m.removedadmins == nil {
		m.removedadmins = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.admins, ids[i])
		m.removedadmins[ids[i]] = struct{}{}
	}
}

// RemovedAdmins returns the removed IDs of the "admins" edge to the User entity.
func (m *InstitutionMutation) RemovedAdminsIDs() (ids []int) {
	for id := range m.removedadmins {
		ids = append(ids, id)
	}
	return
}

// AdminsIDs returns the "admins" edge IDs in the mutation.
func (m *InstitutionMutation) AdminsIDs() (ids []int) {
	for id := range m.admins {
		ids = append(ids, id)
	}
	return
}

// ResetAdmins resets all changes to the "admins" edge.
func (m *InstitutionMutation) ResetAdmins() {
	m.admins = nil
	m.clearedadmins = false
	m.removedadmins = nil
}

// AddVoucherIDs adds the "vouchers" edge to the Voucher entity by ids.
func (m *InstitutionMutation) AddVoucherIDs(ids ...int) {
	if m.vouchers == nil {
		m.vouchers = make(map[int]struct{})
	}
	for i := range ids {
		m.vouchers[ids[i]] = struct{}{}
	}
}

// ClearVouchers clears the "vouchers" edge to the Voucher entity.
func (m *InstitutionMutation) ClearVouchers() {
	m.clearedvouchers = true
}

// VouchersCleared reports if the "vouchers" edge to the Voucher entity was cleared.
func (m *InstitutionMutation) VouchersCleared() bool {
	return m.clearedvouchers
}

// RemoveVoucherIDs removes the "vouchers" edge to the Voucher entity by IDs.
func (m *InstitutionMutation) RemoveVoucherIDs(ids ...int) {
	if m.removedvouchers == nil {
		m.removedvouchers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.vouchers, ids[i])
		m.removedvouchers[ids[i]] = struct{}{}
	}
}

// RemovedVouchers returns the removed IDs of the "vouchers" edge to the Voucher entity.
func (m *InstitutionMutation) RemovedVouchersIDs() (ids []int) {
	for id := range m.removedvouchers {
		ids = append(ids, id)
	}
	return
}

// VouchersIDs returns the "vouchers" edge IDs in the mutation.
func (m *InstitutionMutation) VouchersIDs() (ids []int) {
	for id := range m.vouchers {
		ids = append(ids, id)
	}
	return
}

// ResetVouchers resets all changes to the "vouchers" edge.
func (m *InstitutionMutation) ResetVouchers() {
	m.vouchers = nil
	m.clearedvouchers = false
	m.removedvouchers = nil
}

// AddAccessoryIDs adds the "accessories" edge to the Accessory entity by ids.
func (m *InstitutionMutation) AddAccessoryIDs(ids ...int) {
	if m.accessories == nil {
		m.accessories = make(map[int]struct{})
	}
	for i := range ids {
		m.accessories[ids[i]] = struct{}{}
	}
}

// ClearAccessories clears the "accessories" edge to the Accessory entity.
func (m *InstitutionMutation) ClearAccessories() {
	m.clearedaccessories = true
}

// AccessoriesCleared reports if the "accessories" edge to the Accessory entity was cleared.
func (m *InstitutionMutation) AccessoriesCleared() bool {
	return m.clearedaccessories
}

// RemoveAccessoryIDs removes the "accessories" edge to the Accessory entity by IDs.
func (m *InstitutionMutation) RemoveAccessoryIDs(ids ...int) {
	if m.removedaccessories == nil {
		m.removedaccessories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.accessories, ids[i])
		m.removedaccessories[ids[i]] = struct{}{}
	}
}

// RemovedAccessories returns the removed IDs of the "accessories" edge to the Accessory entity.
func (m *InstitutionMutation) RemovedAccessoriesIDs() (ids []int) {
	for id := range m.removedaccessories {
		ids = append(ids, id)
	}
	return
}

// AccessoriesIDs returns the "accessories" edge IDs in the mutation.
func (m *InstitutionMutation) AccessoriesIDs() (ids []int) {
	for id := range m.accessories {
		ids = append(ids, id)
	}
	return
}

// ResetAccessories resets all changes to the "accessories" edge.
func (m *InstitutionMutation) ResetAccessories() {
	m.accessories = nil
	m.clearedaccessories = false
	m.removedaccessories = nil
}

// AddAcademicSchoolIDs adds the "academic_schools" edge to the AcademicSchool entity by ids.
func (m *InstitutionMutation) AddAcademicSchoolIDs(ids ...int) {
	if m.academic_schools == nil {
		m.academic_schools = make(map[int]struct{})
	}
	for i := range ids {
		m.academic_schools[ids[i]] = struct{}{}
	}
}

// ClearAcademicSchools clears the "academic_schools" edge to the AcademicSchool entity.
func (m *InstitutionMutation) ClearAcademicSchools() {
	m.clearedacademic_schools = true
}

// AcademicSchoolsCleared reports if the "academic_schools" edge to the AcademicSchool entity was cleared.
func (m *InstitutionMutation) AcademicSchoolsCleared() bool {
	return m.clearedacademic_schools
}

// RemoveAcademicSchoolIDs removes the "academic_schools" edge to the AcademicSchool entity by IDs.
func (m *InstitutionMutation) RemoveAcademicSchoolIDs(ids ...int) {
	if m.removedacademic_schools == nil {
		m.removedacademic_schools = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.academic_schools, ids[i])
		m.removedacademic_schools[ids[i]] = struct{}{}
	}
}

// RemovedAcademicSchools returns the removed IDs of the "academic_schools" edge to the AcademicSchool entity.
func (m *InstitutionMutation) RemovedAcademicSchoolsIDs() (ids []int) {
	for id := range m.removedacademic_schools {
		ids = append(ids, id)
	}
	return
}

// AcademicSchoolsIDs returns the "academic_schools" edge IDs in the mutation.
func (m *InstitutionMutation) AcademicSchoolsIDs() (ids []int) {
	for id := range m.academic_schools {
		ids = append(ids, id)
	}
	return
}

// ResetAcademicSchools resets all changes to the "academic_schools" edge.
func (m *InstitutionMutation) ResetAcademicSchools() {
	m.academic_schools = nil
	m.clearedacademic_schools = false
	m.removedacademic_schools = nil
}

// Where appends a list predicates to the InstitutionMutation builder.
func (m *InstitutionMutation) Where(ps ...predicate.Institution) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InstitutionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InstitutionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Institution, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InstitutionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InstitutionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Institution).
func (m *InstitutionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InstitutionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, institution.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InstitutionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case institution.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InstitutionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case institution.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Institution field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstitutionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case institution.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Institution field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InstitutionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InstitutionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstitutionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Institution numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InstitutionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InstitutionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InstitutionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Institution nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InstitutionMutation) ResetField(name string) error {
	switch name {
	case institution.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Institution field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InstitutionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.admins != nil {
		edges = append(edges, institution.EdgeAdmins)
	}
	if m.vouchers != nil {
		edges = append(edges, institution.EdgeVouchers)
	}
	if m.accessories != nil {
		edges = append(edges, institution.EdgeAccessories)
	}
	if m.academic_schools != nil {
		edges = append(edges, institution.EdgeAcademicSchools)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InstitutionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case institution.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.admins))
		for id := range m.admins {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgeVouchers:
		ids := make([]ent.Value, 0, len(m.vouchers))
		for id := range m.vouchers {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgeAccessories:
		ids := make([]ent.Value, 0, len(m.accessories))
		for id := range m.accessories {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgeAcademicSchools:
		ids := make([]ent.Value, 0, len(m.academic_schools))
		for id := range m.academic_schools {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InstitutionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedadmins != nil {
		edges = append(edges, institution.EdgeAdmins)
	}
	if m.removedvouchers != nil {
		edges = append(edges, institution.EdgeVouchers)
	}
	if m.removedaccessories != nil {
		edges = append(edges, institution.EdgeAccessories)
	}
	if m.removedacademic_schools != nil {
		edges = append(edges, institution.EdgeAcademicSchools)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InstitutionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case institution.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.removedadmins))
		for id := range m.removedadmins {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgeVouchers:
		ids := make([]ent.Value, 0, len(m.removedvouchers))
		for id := range m.removedvouchers {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgeAccessories:
		ids := make([]ent.Value, 0, len(m.removedaccessories))
		for id := range m.removedaccessories {
			ids = append(ids, id)
		}
		return ids
	case institution.EdgeAcademicSchools:
		ids := make([]ent.Value, 0, len(m.removedacademic_schools))
		for id := range m.removedacademic_schools {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InstitutionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedadmins {
		edges = append(edges, institution.EdgeAdmins)
	}
	if m.clearedvouchers {
		edges = append(edges, institution.EdgeVouchers)
	}
	if m.clearedaccessories {
		edges = append(edges, institution.EdgeAccessories)
	}
	if m.clearedacademic_schools {
		edges = append(edges, institution.EdgeAcademicSchools)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InstitutionMutation) EdgeCleared(name string) bool {
	switch name {
	case institution.EdgeAdmins:
		return m.clearedadmins
	case institution.EdgeVouchers:
		return m.clearedvouchers
	case institution.EdgeAccessories:
		return m.clearedaccessories
	case institution.EdgeAcademicSchools:
		return m.clearedacademic_schools
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InstitutionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Institution unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InstitutionMutation) ResetEdge(name string) error {
	switch name {
	case institution.EdgeAdmins:
		m.ResetAdmins()
		return nil
	case institution.EdgeVouchers:
		m.ResetVouchers()
		return nil
	case institution.EdgeAccessories:
		m.ResetAccessories()
		return nil
	case institution.EdgeAcademicSchools:
		m.ResetAcademicSchools()
		return nil
	}
	return fmt.Errorf("unknown Institution edge %s", name)
}

// PetMutation represents an operation that mutates the Pet nodes in the graph.
type PetMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	svg_raw       *string
	clearedFields map[string]struct{}
	owner         map[int]struct{}
	removedowner  map[int]struct{}
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*Pet, error)
	predicates    []predicate.Pet
}

var _ ent.Mutation = (*PetMutation)(nil)

// petOption allows management of the mutation configuration using functional options.
type petOption func(*PetMutation)

// newPetMutation creates new mutation for the Pet entity.
func newPetMutation(c config, op Op, opts ...petOption) *PetMutation {
	m := &PetMutation{
		config:        c,
		op:            op,
		typ:           TypePet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPetID sets the ID field of the mutation.
func withPetID(id int) petOption {
	return func(m *PetMutation) {
		var (
			err   error
			once  sync.Once
			value *Pet
		)
		m.oldValue = func(ctx context.Context) (*Pet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPet sets the old Pet of the mutation.
func withPet(node *Pet) petOption {
	return func(m *PetMutation) {
		m.oldValue = func(context.Context) (*Pet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PetMutation) ResetName() {
	m.name = nil
}

// SetSvgRaw sets the "svg_raw" field.
func (m *PetMutation) SetSvgRaw(s string) {
	m.svg_raw = &s
}

// SvgRaw returns the value of the "svg_raw" field in the mutation.
func (m *PetMutation) SvgRaw() (r string, exists bool) {
	v := m.svg_raw
	if v == nil {
		return
	}
	return *v, true
}

// OldSvgRaw returns the old "svg_raw" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldSvgRaw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSvgRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSvgRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSvgRaw: %w", err)
	}
	return oldValue.SvgRaw, nil
}

// ResetSvgRaw resets all changes to the "svg_raw" field.
func (m *PetMutation) ResetSvgRaw() {
	m.svg_raw = nil
}

// AddOwnerIDs adds the "owner" edge to the User entity by ids.
func (m *PetMutation) AddOwnerIDs(ids ...int) {
	if m.owner == nil {
		m.owner = make(map[int]struct{})
	}
	for i := range ids {
		m.owner[ids[i]] = struct{}{}
	}
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *PetMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *PetMutation) OwnerCleared() bool {
	return m.clearedowner
}

// RemoveOwnerIDs removes the "owner" edge to the User entity by IDs.
func (m *PetMutation) RemoveOwnerIDs(ids ...int) {
	if m.removedowner == nil {
		m.removedowner = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.owner, ids[i])
		m.removedowner[ids[i]] = struct{}{}
	}
}

// RemovedOwner returns the removed IDs of the "owner" edge to the User entity.
func (m *PetMutation) RemovedOwnerIDs() (ids []int) {
	for id := range m.removedowner {
		ids = append(ids, id)
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
func (m *PetMutation) OwnerIDs() (ids []int) {
	for id := range m.owner {
		ids = append(ids, id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *PetMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
	m.removedowner = nil
}

// Where appends a list predicates to the PetMutation builder.
func (m *PetMutation) Where(ps ...predicate.Pet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pet).
func (m *PetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PetMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, pet.FieldName)
	}
	if m.svg_raw != nil {
		fields = append(fields, pet.FieldSvgRaw)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pet.FieldName:
		return m.Name()
	case pet.FieldSvgRaw:
		return m.SvgRaw()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pet.FieldName:
		return m.OldName(ctx)
	case pet.FieldSvgRaw:
		return m.OldSvgRaw(ctx)
	}
	return nil, fmt.Errorf("unknown Pet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pet.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case pet.FieldSvgRaw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSvgRaw(v)
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Pet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PetMutation) ResetField(name string) error {
	switch name {
	case pet.FieldName:
		m.ResetName()
		return nil
	case pet.FieldSvgRaw:
		m.ResetSvgRaw()
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, pet.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pet.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.owner))
		for id := range m.owner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedowner != nil {
		edges = append(edges, pet.EdgeOwner)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pet.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.removedowner))
		for id := range m.removedowner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, pet.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PetMutation) EdgeCleared(name string) bool {
	switch name {
	case pet.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Pet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PetMutation) ResetEdge(name string) error {
	switch name {
	case pet.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Pet edge %s", name)
}

// ReactionMutation represents an operation that mutates the Reaction nodes in the graph.
type ReactionMutation struct {
	config
	op                Op
	typ               string
	emoji             *string
	clearedFields     map[string]struct{}
	user              *int
	cleareduser       bool
	forum_post        *int
	clearedforum_post bool
	done              bool
	oldValue          func(context.Context) (*Reaction, error)
	predicates        []predicate.Reaction
}

var _ ent.Mutation = (*ReactionMutation)(nil)

// reactionOption allows management of the mutation configuration using functional options.
type reactionOption func(*ReactionMutation)

// newReactionMutation creates new mutation for the Reaction entity.
func newReactionMutation(c config, op Op, opts ...reactionOption) *ReactionMutation {
	m := &ReactionMutation{
		config:        c,
		op:            op,
		typ:           TypeReaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetUserID sets the "user_id" field.
func (m *ReactionMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ReactionMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ReactionMutation) ResetUserID() {
	m.user = nil
}

// SetForumPostID sets the "forum_post_id" field.
func (m *ReactionMutation) SetForumPostID(i int) {
	m.forum_post = &i
}

// ForumPostID returns the value of the "forum_post_id" field in the mutation.
func (m *ReactionMutation) ForumPostID() (r int, exists bool) {
	v := m.forum_post
	if v == nil {
		return
	}
	return *v, true
}

// ResetForumPostID resets all changes to the "forum_post_id" field.
func (m *ReactionMutation) ResetForumPostID() {
	m.forum_post = nil
}

// SetEmoji sets the "emoji" field.
func (m *ReactionMutation) SetEmoji(s string) {
	m.emoji = &s
}

// Emoji returns the value of the "emoji" field in the mutation.
func (m *ReactionMutation) Emoji() (r string, exists bool) {
	v := m.emoji
	if v == nil {
		return
	}
	return *v, true
}

// ResetEmoji resets all changes to the "emoji" field.
func (m *ReactionMutation) ResetEmoji() {
	m.emoji = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ReactionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ReactionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ReactionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ReactionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearForumPost clears the "forum_post" edge to the ForumPost entity.
func (m *ReactionMutation) ClearForumPost() {
	m.clearedforum_post = true
}

// ForumPostCleared reports if the "forum_post" edge to the ForumPost entity was cleared.
func (m *ReactionMutation) ForumPostCleared() bool {
	return m.clearedforum_post
}

// ForumPostIDs returns the "forum_post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ForumPostID instead. It exists only for internal usage by the builders.
func (m *ReactionMutation) ForumPostIDs() (ids []int) {
	if id := m.forum_post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetForumPost resets all changes to the "forum_post" edge.
func (m *ReactionMutation) ResetForumPost() {
	m.forum_post = nil
	m.clearedforum_post = false
}

// Where appends a list predicates to the ReactionMutation builder.
func (m *ReactionMutation) Where(ps ...predicate.Reaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Reaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Reaction).
func (m *ReactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReactionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, reaction.FieldUserID)
	}
	if m.forum_post != nil {
		fields = append(fields, reaction.FieldForumPostID)
	}
	if m.emoji != nil {
		fields = append(fields, reaction.FieldEmoji)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reaction.FieldUserID:
		return m.UserID()
	case reaction.FieldForumPostID:
		return m.ForumPostID()
	case reaction.FieldEmoji:
		return m.Emoji()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema Reaction does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reaction.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case reaction.FieldForumPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForumPostID(v)
		return nil
	case reaction.FieldEmoji:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmoji(v)
		return nil
	}
	return fmt.Errorf("unknown Reaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReactionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Reaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReactionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReactionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Reaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReactionMutation) ResetField(name string) error {
	switch name {
	case reaction.FieldUserID:
		m.ResetUserID()
		return nil
	case reaction.FieldForumPostID:
		m.ResetForumPostID()
		return nil
	case reaction.FieldEmoji:
		m.ResetEmoji()
		return nil
	}
	return fmt.Errorf("unknown Reaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, reaction.EdgeUser)
	}
	if m.forum_post != nil {
		edges = append(edges, reaction.EdgeForumPost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReactionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reaction.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case reaction.EdgeForumPost:
		if id := m.forum_post; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, reaction.EdgeUser)
	}
	if m.clearedforum_post {
		edges = append(edges, reaction.EdgeForumPost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReactionMutation) EdgeCleared(name string) bool {
	switch name {
	case reaction.EdgeUser:
		return m.cleareduser
	case reaction.EdgeForumPost:
		return m.clearedforum_post
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReactionMutation) ClearEdge(name string) error {
	switch name {
	case reaction.EdgeUser:
		m.ClearUser()
		return nil
	case reaction.EdgeForumPost:
		m.ClearForumPost()
		return nil
	}
	return fmt.Errorf("unknown Reaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReactionMutation) ResetEdge(name string) error {
	switch name {
	case reaction.EdgeUser:
		m.ResetUser()
		return nil
	case reaction.EdgeForumPost:
		m.ResetForumPost()
		return nil
	}
	return fmt.Errorf("unknown Reaction edge %s", name)
}

// RedemptionMutation represents an operation that mutates the Redemption nodes in the graph.
type RedemptionMutation struct {
	config
	op               Op
	typ              string
	id               *int
	redeemed_at      *time.Time
	clearedFields    map[string]struct{}
	voucher          *int
	clearedvoucher   bool
	accessory        *int
	clearedaccessory bool
	user             *int
	cleareduser      bool
	done             bool
	oldValue         func(context.Context) (*Redemption, error)
	predicates       []predicate.Redemption
}

var _ ent.Mutation = (*RedemptionMutation)(nil)

// redemptionOption allows management of the mutation configuration using functional options.
type redemptionOption func(*RedemptionMutation)

// newRedemptionMutation creates new mutation for the Redemption entity.
func newRedemptionMutation(c config, op Op, opts ...redemptionOption) *RedemptionMutation {
	m := &RedemptionMutation{
		config:        c,
		op:            op,
		typ:           TypeRedemption,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRedemptionID sets the ID field of the mutation.
func withRedemptionID(id int) redemptionOption {
	return func(m *RedemptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Redemption
		)
		m.oldValue = func(ctx context.Context) (*Redemption, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Redemption.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRedemption sets the old Redemption of the mutation.
func withRedemption(node *Redemption) redemptionOption {
	return func(m *RedemptionMutation) {
		m.oldValue = func(context.Context) (*Redemption, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RedemptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RedemptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RedemptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RedemptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Redemption.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRedeemedAt sets the "redeemed_at" field.
func (m *RedemptionMutation) SetRedeemedAt(t time.Time) {
	m.redeemed_at = &t
}

// RedeemedAt returns the value of the "redeemed_at" field in the mutation.
func (m *RedemptionMutation) RedeemedAt() (r time.Time, exists bool) {
	v := m.redeemed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRedeemedAt returns the old "redeemed_at" field's value of the Redemption entity.
// If the Redemption object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RedemptionMutation) OldRedeemedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedeemedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedeemedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedeemedAt: %w", err)
	}
	return oldValue.RedeemedAt, nil
}

// ResetRedeemedAt resets all changes to the "redeemed_at" field.
func (m *RedemptionMutation) ResetRedeemedAt() {
	m.redeemed_at = nil
}

// SetVoucherID sets the "voucher" edge to the Voucher entity by id.
func (m *RedemptionMutation) SetVoucherID(id int) {
	m.voucher = &id
}

// ClearVoucher clears the "voucher" edge to the Voucher entity.
func (m *RedemptionMutation) ClearVoucher() {
	m.clearedvoucher = true
}

// VoucherCleared reports if the "voucher" edge to the Voucher entity was cleared.
func (m *RedemptionMutation) VoucherCleared() bool {
	return m.clearedvoucher
}

// VoucherID returns the "voucher" edge ID in the mutation.
func (m *RedemptionMutation) VoucherID() (id int, exists bool) {
	if m.voucher != nil {
		return *m.voucher, true
	}
	return
}

// VoucherIDs returns the "voucher" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VoucherID instead. It exists only for internal usage by the builders.
func (m *RedemptionMutation) VoucherIDs() (ids []int) {
	if id := m.voucher; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVoucher resets all changes to the "voucher" edge.
func (m *RedemptionMutation) ResetVoucher() {
	m.voucher = nil
	m.clearedvoucher = false
}

// SetAccessoryID sets the "accessory" edge to the Accessory entity by id.
func (m *RedemptionMutation) SetAccessoryID(id int) {
	m.accessory = &id
}

// ClearAccessory clears the "accessory" edge to the Accessory entity.
func (m *RedemptionMutation) ClearAccessory() {
	m.clearedaccessory = true
}

// AccessoryCleared reports if the "accessory" edge to the Accessory entity was cleared.
func (m *RedemptionMutation) AccessoryCleared() bool {
	return m.clearedaccessory
}

// AccessoryID returns the "accessory" edge ID in the mutation.
func (m *RedemptionMutation) AccessoryID() (id int, exists bool) {
	if m.accessory != nil {
		return *m.accessory, true
	}
	return
}

// AccessoryIDs returns the "accessory" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AccessoryID instead. It exists only for internal usage by the builders.
func (m *RedemptionMutation) AccessoryIDs() (ids []int) {
	if id := m.accessory; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAccessory resets all changes to the "accessory" edge.
func (m *RedemptionMutation) ResetAccessory() {
	m.accessory = nil
	m.clearedaccessory = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *RedemptionMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *RedemptionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *RedemptionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *RedemptionMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RedemptionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *RedemptionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the RedemptionMutation builder.
func (m *RedemptionMutation) Where(ps ...predicate.Redemption) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RedemptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RedemptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Redemption, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RedemptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RedemptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Redemption).
func (m *RedemptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RedemptionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.redeemed_at != nil {
		fields = append(fields, redemption.FieldRedeemedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RedemptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case redemption.FieldRedeemedAt:
		return m.RedeemedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RedemptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case redemption.FieldRedeemedAt:
		return m.OldRedeemedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Redemption field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RedemptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case redemption.FieldRedeemedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedeemedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Redemption field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RedemptionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RedemptionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RedemptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Redemption numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RedemptionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RedemptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RedemptionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Redemption nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RedemptionMutation) ResetField(name string) error {
	switch name {
	case redemption.FieldRedeemedAt:
		m.ResetRedeemedAt()
		return nil
	}
	return fmt.Errorf("unknown Redemption field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RedemptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.voucher != nil {
		edges = append(edges, redemption.EdgeVoucher)
	}
	if m.accessory != nil {
		edges = append(edges, redemption.EdgeAccessory)
	}
	if m.user != nil {
		edges = append(edges, redemption.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RedemptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case redemption.EdgeVoucher:
		if id := m.voucher; id != nil {
			return []ent.Value{*id}
		}
	case redemption.EdgeAccessory:
		if id := m.accessory; id != nil {
			return []ent.Value{*id}
		}
	case redemption.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RedemptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RedemptionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RedemptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedvoucher {
		edges = append(edges, redemption.EdgeVoucher)
	}
	if m.clearedaccessory {
		edges = append(edges, redemption.EdgeAccessory)
	}
	if m.cleareduser {
		edges = append(edges, redemption.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RedemptionMutation) EdgeCleared(name string) bool {
	switch name {
	case redemption.EdgeVoucher:
		return m.clearedvoucher
	case redemption.EdgeAccessory:
		return m.clearedaccessory
	case redemption.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RedemptionMutation) ClearEdge(name string) error {
	switch name {
	case redemption.EdgeVoucher:
		m.ClearVoucher()
		return nil
	case redemption.EdgeAccessory:
		m.ClearAccessory()
		return nil
	case redemption.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Redemption unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RedemptionMutation) ResetEdge(name string) error {
	switch name {
	case redemption.EdgeVoucher:
		m.ResetVoucher()
		return nil
	case redemption.EdgeAccessory:
		m.ResetAccessory()
		return nil
	case redemption.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Redemption edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	first_name                *string
	last_name                 *string
	email                     *string
	password_hash             *string
	points                    *int
	addpoints                 *int
	points_awarded_count      *int
	addpoints_awarded_count   *int
	points_awarded_reset_time *time.Time
	god_mode                  *bool
	clearedFields             map[string]struct{}
	course                    *int
	clearedcourse             bool
	institution               map[int]struct{}
	removedinstitution        map[int]struct{}
	clearedinstitution        bool
	redemptions               map[int]struct{}
	removedredemptions        map[int]struct{}
	clearedredemptions        bool
	forum_posts               map[int]struct{}
	removedforum_posts        map[int]struct{}
	clearedforum_posts        bool
	pet                       map[int]struct{}
	removedpet                map[int]struct{}
	clearedpet                bool
	groups                    map[int]struct{}
	removedgroups             map[int]struct{}
	clearedgroups             bool
	reacted_posts             map[int]struct{}
	removedreacted_posts      map[int]struct{}
	clearedreacted_posts      bool
	done                      bool
	oldValue                  func(context.Context) (*User, error)
	predicates                []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetPoints sets the "points" field.
func (m *UserMutation) SetPoints(i int) {
	m.points = &i
	m.addpoints = nil
}

// Points returns the value of the "points" field in the mutation.
func (m *UserMutation) Points() (r int, exists bool) {
	v := m.points
	if v == nil {
		return
	}
	return *v, true
}

// OldPoints returns the old "points" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPoints(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoints: %w", err)
	}
	return oldValue.Points, nil
}

// AddPoints adds i to the "points" field.
func (m *UserMutation) AddPoints(i int) {
	if m.addpoints != nil {
		*m.addpoints += i
	} else {
		m.addpoints = &i
	}
}

// AddedPoints returns the value that was added to the "points" field in this mutation.
func (m *UserMutation) AddedPoints() (r int, exists bool) {
	v := m.addpoints
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoints resets all changes to the "points" field.
func (m *UserMutation) ResetPoints() {
	m.points = nil
	m.addpoints = nil
}

// SetPointsAwardedCount sets the "points_awarded_count" field.
func (m *UserMutation) SetPointsAwardedCount(i int) {
	m.points_awarded_count = &i
	m.addpoints_awarded_count = nil
}

// PointsAwardedCount returns the value of the "points_awarded_count" field in the mutation.
func (m *UserMutation) PointsAwardedCount() (r int, exists bool) {
	v := m.points_awarded_count
	if v == nil {
		return
	}
	return *v, true
}

// OldPointsAwardedCount returns the old "points_awarded_count" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPointsAwardedCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointsAwardedCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointsAwardedCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointsAwardedCount: %w", err)
	}
	return oldValue.PointsAwardedCount, nil
}

// AddPointsAwardedCount adds i to the "points_awarded_count" field.
func (m *UserMutation) AddPointsAwardedCount(i int) {
	if m.addpoints_awarded_count != nil {
		*m.addpoints_awarded_count += i
	} else {
		m.addpoints_awarded_count = &i
	}
}

// AddedPointsAwardedCount returns the value that was added to the "points_awarded_count" field in this mutation.
func (m *UserMutation) AddedPointsAwardedCount() (r int, exists bool) {
	v := m.addpoints_awarded_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetPointsAwardedCount resets all changes to the "points_awarded_count" field.
func (m *UserMutation) ResetPointsAwardedCount() {
	m.points_awarded_count = nil
	m.addpoints_awarded_count = nil
}

// SetPointsAwardedResetTime sets the "points_awarded_reset_time" field.
func (m *UserMutation) SetPointsAwardedResetTime(t time.Time) {
	m.points_awarded_reset_time = &t
}

// PointsAwardedResetTime returns the value of the "points_awarded_reset_time" field in the mutation.
func (m *UserMutation) PointsAwardedResetTime() (r time.Time, exists bool) {
	v := m.points_awarded_reset_time
	if v == nil {
		return
	}
	return *v, true
}

// OldPointsAwardedResetTime returns the old "points_awarded_reset_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPointsAwardedResetTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointsAwardedResetTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointsAwardedResetTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointsAwardedResetTime: %w", err)
	}
	return oldValue.PointsAwardedResetTime, nil
}

// ClearPointsAwardedResetTime clears the value of the "points_awarded_reset_time" field.
func (m *UserMutation) ClearPointsAwardedResetTime() {
	m.points_awarded_reset_time = nil
	m.clearedFields[user.FieldPointsAwardedResetTime] = struct{}{}
}

// PointsAwardedResetTimeCleared returns if the "points_awarded_reset_time" field was cleared in this mutation.
func (m *UserMutation) PointsAwardedResetTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldPointsAwardedResetTime]
	return ok
}

// ResetPointsAwardedResetTime resets all changes to the "points_awarded_reset_time" field.
func (m *UserMutation) ResetPointsAwardedResetTime() {
	m.points_awarded_reset_time = nil
	delete(m.clearedFields, user.FieldPointsAwardedResetTime)
}

// SetGodMode sets the "god_mode" field.
func (m *UserMutation) SetGodMode(b bool) {
	m.god_mode = &b
}

// GodMode returns the value of the "god_mode" field in the mutation.
func (m *UserMutation) GodMode() (r bool, exists bool) {
	v := m.god_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldGodMode returns the old "god_mode" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGodMode(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGodMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGodMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGodMode: %w", err)
	}
	return oldValue.GodMode, nil
}

// ResetGodMode resets all changes to the "god_mode" field.
func (m *UserMutation) ResetGodMode() {
	m.god_mode = nil
}

// SetCourseID sets the "course" edge to the Course entity by id.
func (m *UserMutation) SetCourseID(id int) {
	m.course = &id
}

// ClearCourse clears the "course" edge to the Course entity.
func (m *UserMutation) ClearCourse() {
	m.clearedcourse = true
}

// CourseCleared reports if the "course" edge to the Course entity was cleared.
func (m *UserMutation) CourseCleared() bool {
	return m.clearedcourse
}

// CourseID returns the "course" edge ID in the mutation.
func (m *UserMutation) CourseID() (id int, exists bool) {
	if m.course != nil {
		return *m.course, true
	}
	return
}

// CourseIDs returns the "course" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CourseID instead. It exists only for internal usage by the builders.
func (m *UserMutation) CourseIDs() (ids []int) {
	if id := m.course; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCourse resets all changes to the "course" edge.
func (m *UserMutation) ResetCourse() {
	m.course = nil
	m.clearedcourse = false
}

// AddInstitutionIDs adds the "institution" edge to the Institution entity by ids.
func (m *UserMutation) AddInstitutionIDs(ids ...int) {
	if m.institution == nil {
		m.institution = make(map[int]struct{})
	}
	for i := range ids {
		m.institution[ids[i]] = struct{}{}
	}
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (m *UserMutation) ClearInstitution() {
	m.clearedinstitution = true
}

// InstitutionCleared reports if the "institution" edge to the Institution entity was cleared.
func (m *UserMutation) InstitutionCleared() bool {
	return m.clearedinstitution
}

// RemoveInstitutionIDs removes the "institution" edge to the Institution entity by IDs.
func (m *UserMutation) RemoveInstitutionIDs(ids ...int) {
	if m.removedinstitution == nil {
		m.removedinstitution = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.institution, ids[i])
		m.removedinstitution[ids[i]] = struct{}{}
	}
}

// RemovedInstitution returns the removed IDs of the "institution" edge to the Institution entity.
func (m *UserMutation) RemovedInstitutionIDs() (ids []int) {
	for id := range m.removedinstitution {
		ids = append(ids, id)
	}
	return
}

// InstitutionIDs returns the "institution" edge IDs in the mutation.
func (m *UserMutation) InstitutionIDs() (ids []int) {
	for id := range m.institution {
		ids = append(ids, id)
	}
	return
}

// ResetInstitution resets all changes to the "institution" edge.
func (m *UserMutation) ResetInstitution() {
	m.institution = nil
	m.clearedinstitution = false
	m.removedinstitution = nil
}

// AddRedemptionIDs adds the "redemptions" edge to the Redemption entity by ids.
func (m *UserMutation) AddRedemptionIDs(ids ...int) {
	if m.redemptions == nil {
		m.redemptions = make(map[int]struct{})
	}
	for i := range ids {
		m.redemptions[ids[i]] = struct{}{}
	}
}

// ClearRedemptions clears the "redemptions" edge to the Redemption entity.
func (m *UserMutation) ClearRedemptions() {
	m.clearedredemptions = true
}

// RedemptionsCleared reports if the "redemptions" edge to the Redemption entity was cleared.
func (m *UserMutation) RedemptionsCleared() bool {
	return m.clearedredemptions
}

// RemoveRedemptionIDs removes the "redemptions" edge to the Redemption entity by IDs.
func (m *UserMutation) RemoveRedemptionIDs(ids ...int) {
	if m.removedredemptions == nil {
		m.removedredemptions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.redemptions, ids[i])
		m.removedredemptions[ids[i]] = struct{}{}
	}
}

// RemovedRedemptions returns the removed IDs of the "redemptions" edge to the Redemption entity.
func (m *UserMutation) RemovedRedemptionsIDs() (ids []int) {
	for id := range m.removedredemptions {
		ids = append(ids, id)
	}
	return
}

// RedemptionsIDs returns the "redemptions" edge IDs in the mutation.
func (m *UserMutation) RedemptionsIDs() (ids []int) {
	for id := range m.redemptions {
		ids = append(ids, id)
	}
	return
}

// ResetRedemptions resets all changes to the "redemptions" edge.
func (m *UserMutation) ResetRedemptions() {
	m.redemptions = nil
	m.clearedredemptions = false
	m.removedredemptions = nil
}

// AddForumPostIDs adds the "forum_posts" edge to the ForumPost entity by ids.
func (m *UserMutation) AddForumPostIDs(ids ...int) {
	if m.forum_posts == nil {
		m.forum_posts = make(map[int]struct{})
	}
	for i := range ids {
		m.forum_posts[ids[i]] = struct{}{}
	}
}

// ClearForumPosts clears the "forum_posts" edge to the ForumPost entity.
func (m *UserMutation) ClearForumPosts() {
	m.clearedforum_posts = true
}

// ForumPostsCleared reports if the "forum_posts" edge to the ForumPost entity was cleared.
func (m *UserMutation) ForumPostsCleared() bool {
	return m.clearedforum_posts
}

// RemoveForumPostIDs removes the "forum_posts" edge to the ForumPost entity by IDs.
func (m *UserMutation) RemoveForumPostIDs(ids ...int) {
	if m.removedforum_posts == nil {
		m.removedforum_posts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.forum_posts, ids[i])
		m.removedforum_posts[ids[i]] = struct{}{}
	}
}

// RemovedForumPosts returns the removed IDs of the "forum_posts" edge to the ForumPost entity.
func (m *UserMutation) RemovedForumPostsIDs() (ids []int) {
	for id := range m.removedforum_posts {
		ids = append(ids, id)
	}
	return
}

// ForumPostsIDs returns the "forum_posts" edge IDs in the mutation.
func (m *UserMutation) ForumPostsIDs() (ids []int) {
	for id := range m.forum_posts {
		ids = append(ids, id)
	}
	return
}

// ResetForumPosts resets all changes to the "forum_posts" edge.
func (m *UserMutation) ResetForumPosts() {
	m.forum_posts = nil
	m.clearedforum_posts = false
	m.removedforum_posts = nil
}

// AddPetIDs adds the "pet" edge to the Pet entity by ids.
func (m *UserMutation) AddPetIDs(ids ...int) {
	if m.pet == nil {
		m.pet = make(map[int]struct{})
	}
	for i := range ids {
		m.pet[ids[i]] = struct{}{}
	}
}

// ClearPet clears the "pet" edge to the Pet entity.
func (m *UserMutation) ClearPet() {
	m.clearedpet = true
}

// PetCleared reports if the "pet" edge to the Pet entity was cleared.
func (m *UserMutation) PetCleared() bool {
	return m.clearedpet
}

// RemovePetIDs removes the "pet" edge to the Pet entity by IDs.
func (m *UserMutation) RemovePetIDs(ids ...int) {
	if m.removedpet == nil {
		m.removedpet = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.pet, ids[i])
		m.removedpet[ids[i]] = struct{}{}
	}
}

// RemovedPet returns the removed IDs of the "pet" edge to the Pet entity.
func (m *UserMutation) RemovedPetIDs() (ids []int) {
	for id := range m.removedpet {
		ids = append(ids, id)
	}
	return
}

// PetIDs returns the "pet" edge IDs in the mutation.
func (m *UserMutation) PetIDs() (ids []int) {
	for id := range m.pet {
		ids = append(ids, id)
	}
	return
}

// ResetPet resets all changes to the "pet" edge.
func (m *UserMutation) ResetPet() {
	m.pet = nil
	m.clearedpet = false
	m.removedpet = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *UserMutation) AddGroupIDs(ids ...int) {
	if m.groups == nil {
		m.groups = make(map[int]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *UserMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *UserMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupIDs(ids ...int) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *UserMutation) RemovedGroupsIDs() (ids []int) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *UserMutation) GroupsIDs() (ids []int) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddReactedPostIDs adds the "reacted_posts" edge to the ForumPost entity by ids.
func (m *UserMutation) AddReactedPostIDs(ids ...int) {
	if m.reacted_posts == nil {
		m.reacted_posts = make(map[int]struct{})
	}
	for i := range ids {
		m.reacted_posts[ids[i]] = struct{}{}
	}
}

// ClearReactedPosts clears the "reacted_posts" edge to the ForumPost entity.
func (m *UserMutation) ClearReactedPosts() {
	m.clearedreacted_posts = true
}

// ReactedPostsCleared reports if the "reacted_posts" edge to the ForumPost entity was cleared.
func (m *UserMutation) ReactedPostsCleared() bool {
	return m.clearedreacted_posts
}

// RemoveReactedPostIDs removes the "reacted_posts" edge to the ForumPost entity by IDs.
func (m *UserMutation) RemoveReactedPostIDs(ids ...int) {
	if m.removedreacted_posts == nil {
		m.removedreacted_posts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reacted_posts, ids[i])
		m.removedreacted_posts[ids[i]] = struct{}{}
	}
}

// RemovedReactedPosts returns the removed IDs of the "reacted_posts" edge to the ForumPost entity.
func (m *UserMutation) RemovedReactedPostsIDs() (ids []int) {
	for id := range m.removedreacted_posts {
		ids = append(ids, id)
	}
	return
}

// ReactedPostsIDs returns the "reacted_posts" edge IDs in the mutation.
func (m *UserMutation) ReactedPostsIDs() (ids []int) {
	for id := range m.reacted_posts {
		ids = append(ids, id)
	}
	return
}

// ResetReactedPosts resets all changes to the "reacted_posts" edge.
func (m *UserMutation) ResetReactedPosts() {
	m.reacted_posts = nil
	m.clearedreacted_posts = false
	m.removedreacted_posts = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.points != nil {
		fields = append(fields, user.FieldPoints)
	}
	if m.points_awarded_count != nil {
		fields = append(fields, user.FieldPointsAwardedCount)
	}
	if m.points_awarded_reset_time != nil {
		fields = append(fields, user.FieldPointsAwardedResetTime)
	}
	if m.god_mode != nil {
		fields = append(fields, user.FieldGodMode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldPoints:
		return m.Points()
	case user.FieldPointsAwardedCount:
		return m.PointsAwardedCount()
	case user.FieldPointsAwardedResetTime:
		return m.PointsAwardedResetTime()
	case user.FieldGodMode:
		return m.GodMode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldPoints:
		return m.OldPoints(ctx)
	case user.FieldPointsAwardedCount:
		return m.OldPointsAwardedCount(ctx)
	case user.FieldPointsAwardedResetTime:
		return m.OldPointsAwardedResetTime(ctx)
	case user.FieldGodMode:
		return m.OldGodMode(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldPoints:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoints(v)
		return nil
	case user.FieldPointsAwardedCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointsAwardedCount(v)
		return nil
	case user.FieldPointsAwardedResetTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointsAwardedResetTime(v)
		return nil
	case user.FieldGodMode:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGodMode(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addpoints != nil {
		fields = append(fields, user.FieldPoints)
	}
	if m.addpoints_awarded_count != nil {
		fields = append(fields, user.FieldPointsAwardedCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldPoints:
		return m.AddedPoints()
	case user.FieldPointsAwardedCount:
		return m.AddedPointsAwardedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldPoints:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoints(v)
		return nil
	case user.FieldPointsAwardedCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPointsAwardedCount(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldPointsAwardedResetTime) {
		fields = append(fields, user.FieldPointsAwardedResetTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldPointsAwardedResetTime:
		m.ClearPointsAwardedResetTime()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldPoints:
		m.ResetPoints()
		return nil
	case user.FieldPointsAwardedCount:
		m.ResetPointsAwardedCount()
		return nil
	case user.FieldPointsAwardedResetTime:
		m.ResetPointsAwardedResetTime()
		return nil
	case user.FieldGodMode:
		m.ResetGodMode()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.course != nil {
		edges = append(edges, user.EdgeCourse)
	}
	if m.institution != nil {
		edges = append(edges, user.EdgeInstitution)
	}
	if m.redemptions != nil {
		edges = append(edges, user.EdgeRedemptions)
	}
	if m.forum_posts != nil {
		edges = append(edges, user.EdgeForumPosts)
	}
	if m.pet != nil {
		edges = append(edges, user.EdgePet)
	}
	if m.groups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.reacted_posts != nil {
		edges = append(edges, user.EdgeReactedPosts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCourse:
		if id := m.course; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeInstitution:
		ids := make([]ent.Value, 0, len(m.institution))
		for id := range m.institution {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRedemptions:
		ids := make([]ent.Value, 0, len(m.redemptions))
		for id := range m.redemptions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeForumPosts:
		ids := make([]ent.Value, 0, len(m.forum_posts))
		for id := range m.forum_posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePet:
		ids := make([]ent.Value, 0, len(m.pet))
		for id := range m.pet {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReactedPosts:
		ids := make([]ent.Value, 0, len(m.reacted_posts))
		for id := range m.reacted_posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedinstitution != nil {
		edges = append(edges, user.EdgeInstitution)
	}
	if m.removedredemptions != nil {
		edges = append(edges, user.EdgeRedemptions)
	}
	if m.removedforum_posts != nil {
		edges = append(edges, user.EdgeForumPosts)
	}
	if m.removedpet != nil {
		edges = append(edges, user.EdgePet)
	}
	if m.removedgroups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.removedreacted_posts != nil {
		edges = append(edges, user.EdgeReactedPosts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeInstitution:
		ids := make([]ent.Value, 0, len(m.removedinstitution))
		for id := range m.removedinstitution {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRedemptions:
		ids := make([]ent.Value, 0, len(m.removedredemptions))
		for id := range m.removedredemptions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeForumPosts:
		ids := make([]ent.Value, 0, len(m.removedforum_posts))
		for id := range m.removedforum_posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePet:
		ids := make([]ent.Value, 0, len(m.removedpet))
		for id := range m.removedpet {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReactedPosts:
		ids := make([]ent.Value, 0, len(m.removedreacted_posts))
		for id := range m.removedreacted_posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedcourse {
		edges = append(edges, user.EdgeCourse)
	}
	if m.clearedinstitution {
		edges = append(edges, user.EdgeInstitution)
	}
	if m.clearedredemptions {
		edges = append(edges, user.EdgeRedemptions)
	}
	if m.clearedforum_posts {
		edges = append(edges, user.EdgeForumPosts)
	}
	if m.clearedpet {
		edges = append(edges, user.EdgePet)
	}
	if m.clearedgroups {
		edges = append(edges, user.EdgeGroups)
	}
	if m.clearedreacted_posts {
		edges = append(edges, user.EdgeReactedPosts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCourse:
		return m.clearedcourse
	case user.EdgeInstitution:
		return m.clearedinstitution
	case user.EdgeRedemptions:
		return m.clearedredemptions
	case user.EdgeForumPosts:
		return m.clearedforum_posts
	case user.EdgePet:
		return m.clearedpet
	case user.EdgeGroups:
		return m.clearedgroups
	case user.EdgeReactedPosts:
		return m.clearedreacted_posts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeCourse:
		m.ClearCourse()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCourse:
		m.ResetCourse()
		return nil
	case user.EdgeInstitution:
		m.ResetInstitution()
		return nil
	case user.EdgeRedemptions:
		m.ResetRedemptions()
		return nil
	case user.EdgeForumPosts:
		m.ResetForumPosts()
		return nil
	case user.EdgePet:
		m.ResetPet()
		return nil
	case user.EdgeGroups:
		m.ResetGroups()
		return nil
	case user.EdgeReactedPosts:
		m.ResetReactedPosts()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserPetMutation represents an operation that mutates the UserPet nodes in the graph.
type UserPetMutation struct {
	config
	op                            Op
	typ                           string
	hunger_percentage             *float64
	addhunger_percentage          *float64
	enabled_svg_group_element_ids *map[string]bool
	clearedFields                 map[string]struct{}
	pet                           *int
	clearedpet                    bool
	user                          *int
	cleareduser                   bool
	done                          bool
	oldValue                      func(context.Context) (*UserPet, error)
	predicates                    []predicate.UserPet
}

var _ ent.Mutation = (*UserPetMutation)(nil)

// userpetOption allows management of the mutation configuration using functional options.
type userpetOption func(*UserPetMutation)

// newUserPetMutation creates new mutation for the UserPet entity.
func newUserPetMutation(c config, op Op, opts ...userpetOption) *UserPetMutation {
	m := &UserPetMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetHungerPercentage sets the "hunger_percentage" field.
func (m *UserPetMutation) SetHungerPercentage(f float64) {
	m.hunger_percentage = &f
	m.addhunger_percentage = nil
}

// HungerPercentage returns the value of the "hunger_percentage" field in the mutation.
func (m *UserPetMutation) HungerPercentage() (r float64, exists bool) {
	v := m.hunger_percentage
	if v == nil {
		return
	}
	return *v, true
}

// AddHungerPercentage adds f to the "hunger_percentage" field.
func (m *UserPetMutation) AddHungerPercentage(f float64) {
	if m.addhunger_percentage != nil {
		*m.addhunger_percentage += f
	} else {
		m.addhunger_percentage = &f
	}
}

// AddedHungerPercentage returns the value that was added to the "hunger_percentage" field in this mutation.
func (m *UserPetMutation) AddedHungerPercentage() (r float64, exists bool) {
	v := m.addhunger_percentage
	if v == nil {
		return
	}
	return *v, true
}

// ResetHungerPercentage resets all changes to the "hunger_percentage" field.
func (m *UserPetMutation) ResetHungerPercentage() {
	m.hunger_percentage = nil
	m.addhunger_percentage = nil
}

// SetEnabledSvgGroupElementIds sets the "enabled_svg_group_element_ids" field.
func (m *UserPetMutation) SetEnabledSvgGroupElementIds(value map[string]bool) {
	m.enabled_svg_group_element_ids = &value
}

// EnabledSvgGroupElementIds returns the value of the "enabled_svg_group_element_ids" field in the mutation.
func (m *UserPetMutation) EnabledSvgGroupElementIds() (r map[string]bool, exists bool) {
	v := m.enabled_svg_group_element_ids
	if v == nil {
		return
	}
	return *v, true
}

// ResetEnabledSvgGroupElementIds resets all changes to the "enabled_svg_group_element_ids" field.
func (m *UserPetMutation) ResetEnabledSvgGroupElementIds() {
	m.enabled_svg_group_element_ids = nil
}

// SetPetID sets the "pet_id" field.
func (m *UserPetMutation) SetPetID(i int) {
	m.pet = &i
}

// PetID returns the value of the "pet_id" field in the mutation.
func (m *UserPetMutation) PetID() (r int, exists bool) {
	v := m.pet
	if v == nil {
		return
	}
	return *v, true
}

// ResetPetID resets all changes to the "pet_id" field.
func (m *UserPetMutation) ResetPetID() {
	m.pet = nil
}

// SetUserID sets the "user_id" field.
func (m *UserPetMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserPetMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserPetMutation) ResetUserID() {
	m.user = nil
}

// ClearPet clears the "pet" edge to the Pet entity.
func (m *UserPetMutation) ClearPet() {
	m.clearedpet = true
}

// PetCleared reports if the "pet" edge to the Pet entity was cleared.
func (m *UserPetMutation) PetCleared() bool {
	return m.clearedpet
}

// PetIDs returns the "pet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PetID instead. It exists only for internal usage by the builders.
func (m *UserPetMutation) PetIDs() (ids []int) {
	if id := m.pet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPet resets all changes to the "pet" edge.
func (m *UserPetMutation) ResetPet() {
	m.pet = nil
	m.clearedpet = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserPetMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserPetMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserPetMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserPetMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserPetMutation builder.
func (m *UserPetMutation) Where(ps ...predicate.UserPet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserPetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserPetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserPet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserPetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserPetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserPet).
func (m *UserPetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPetMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.hunger_percentage != nil {
		fields = append(fields, userpet.FieldHungerPercentage)
	}
	if m.enabled_svg_group_element_ids != nil {
		fields = append(fields, userpet.FieldEnabledSvgGroupElementIds)
	}
	if m.pet != nil {
		fields = append(fields, userpet.FieldPetID)
	}
	if m.user != nil {
		fields = append(fields, userpet.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userpet.FieldHungerPercentage:
		return m.HungerPercentage()
	case userpet.FieldEnabledSvgGroupElementIds:
		return m.EnabledSvgGroupElementIds()
	case userpet.FieldPetID:
		return m.PetID()
	case userpet.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema UserPet does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userpet.FieldHungerPercentage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHungerPercentage(v)
		return nil
	case userpet.FieldEnabledSvgGroupElementIds:
		v, ok := value.(map[string]bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabledSvgGroupElementIds(v)
		return nil
	case userpet.FieldPetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPetID(v)
		return nil
	case userpet.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown UserPet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPetMutation) AddedFields() []string {
	var fields []string
	if m.addhunger_percentage != nil {
		fields = append(fields, userpet.FieldHungerPercentage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userpet.FieldHungerPercentage:
		return m.AddedHungerPercentage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userpet.FieldHungerPercentage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHungerPercentage(v)
		return nil
	}
	return fmt.Errorf("unknown UserPet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserPet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPetMutation) ResetField(name string) error {
	switch name {
	case userpet.FieldHungerPercentage:
		m.ResetHungerPercentage()
		return nil
	case userpet.FieldEnabledSvgGroupElementIds:
		m.ResetEnabledSvgGroupElementIds()
		return nil
	case userpet.FieldPetID:
		m.ResetPetID()
		return nil
	case userpet.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown UserPet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPetMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.pet != nil {
		edges = append(edges, userpet.EdgePet)
	}
	if m.user != nil {
		edges = append(edges, userpet.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userpet.EdgePet:
		if id := m.pet; id != nil {
			return []ent.Value{*id}
		}
	case userpet.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpet {
		edges = append(edges, userpet.EdgePet)
	}
	if m.cleareduser {
		edges = append(edges, userpet.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPetMutation) EdgeCleared(name string) bool {
	switch name {
	case userpet.EdgePet:
		return m.clearedpet
	case userpet.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPetMutation) ClearEdge(name string) error {
	switch name {
	case userpet.EdgePet:
		m.ClearPet()
		return nil
	case userpet.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserPet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPetMutation) ResetEdge(name string) error {
	switch name {
	case userpet.EdgePet:
		m.ResetPet()
		return nil
	case userpet.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserPet edge %s", name)
}

// VoucherMutation represents an operation that mutates the Voucher nodes in the graph.
type VoucherMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	description        *string
	points_required    *int
	addpoints_required *int
	clearedFields      map[string]struct{}
	redemptions        map[int]struct{}
	removedredemptions map[int]struct{}
	clearedredemptions bool
	institution        *int
	clearedinstitution bool
	done               bool
	oldValue           func(context.Context) (*Voucher, error)
	predicates         []predicate.Voucher
}

var _ ent.Mutation = (*VoucherMutation)(nil)

// voucherOption allows management of the mutation configuration using functional options.
type voucherOption func(*VoucherMutation)

// newVoucherMutation creates new mutation for the Voucher entity.
func newVoucherMutation(c config, op Op, opts ...voucherOption) *VoucherMutation {
	m := &VoucherMutation{
		config:        c,
		op:            op,
		typ:           TypeVoucher,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVoucherID sets the ID field of the mutation.
func withVoucherID(id int) voucherOption {
	return func(m *VoucherMutation) {
		var (
			err   error
			once  sync.Once
			value *Voucher
		)
		m.oldValue = func(ctx context.Context) (*Voucher, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Voucher.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVoucher sets the old Voucher of the mutation.
func withVoucher(node *Voucher) voucherOption {
	return func(m *VoucherMutation) {
		m.oldValue = func(context.Context) (*Voucher, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VoucherMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VoucherMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VoucherMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VoucherMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Voucher.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *VoucherMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VoucherMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Voucher entity.
// If the Voucher object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoucherMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VoucherMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *VoucherMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *VoucherMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Voucher entity.
// If the Voucher object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoucherMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *VoucherMutation) ResetDescription() {
	m.description = nil
}

// SetPointsRequired sets the "points_required" field.
func (m *VoucherMutation) SetPointsRequired(i int) {
	m.points_required = &i
	m.addpoints_required = nil
}

// PointsRequired returns the value of the "points_required" field in the mutation.
func (m *VoucherMutation) PointsRequired() (r int, exists bool) {
	v := m.points_required
	if v == nil {
		return
	}
	return *v, true
}

// OldPointsRequired returns the old "points_required" field's value of the Voucher entity.
// If the Voucher object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoucherMutation) OldPointsRequired(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointsRequired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointsRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointsRequired: %w", err)
	}
	return oldValue.PointsRequired, nil
}

// AddPointsRequired adds i to the "points_required" field.
func (m *VoucherMutation) AddPointsRequired(i int) {
	if m.addpoints_required != nil {
		*m.addpoints_required += i
	} else {
		m.addpoints_required = &i
	}
}

// AddedPointsRequired returns the value that was added to the "points_required" field in this mutation.
func (m *VoucherMutation) AddedPointsRequired() (r int, exists bool) {
	v := m.addpoints_required
	if v == nil {
		return
	}
	return *v, true
}

// ResetPointsRequired resets all changes to the "points_required" field.
func (m *VoucherMutation) ResetPointsRequired() {
	m.points_required = nil
	m.addpoints_required = nil
}

// AddRedemptionIDs adds the "redemptions" edge to the Redemption entity by ids.
func (m *VoucherMutation) AddRedemptionIDs(ids ...int) {
	if m.redemptions == nil {
		m.redemptions = make(map[int]struct{})
	}
	for i := range ids {
		m.redemptions[ids[i]] = struct{}{}
	}
}

// ClearRedemptions clears the "redemptions" edge to the Redemption entity.
func (m *VoucherMutation) ClearRedemptions() {
	m.clearedredemptions = true
}

// RedemptionsCleared reports if the "redemptions" edge to the Redemption entity was cleared.
func (m *VoucherMutation) RedemptionsCleared() bool {
	return m.clearedredemptions
}

// RemoveRedemptionIDs removes the "redemptions" edge to the Redemption entity by IDs.
func (m *VoucherMutation) RemoveRedemptionIDs(ids ...int) {
	if m.removedredemptions == nil {
		m.removedredemptions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.redemptions, ids[i])
		m.removedredemptions[ids[i]] = struct{}{}
	}
}

// RemovedRedemptions returns the removed IDs of the "redemptions" edge to the Redemption entity.
func (m *VoucherMutation) RemovedRedemptionsIDs() (ids []int) {
	for id := range m.removedredemptions {
		ids = append(ids, id)
	}
	return
}

// RedemptionsIDs returns the "redemptions" edge IDs in the mutation.
func (m *VoucherMutation) RedemptionsIDs() (ids []int) {
	for id := range m.redemptions {
		ids = append(ids, id)
	}
	return
}

// ResetRedemptions resets all changes to the "redemptions" edge.
func (m *VoucherMutation) ResetRedemptions() {
	m.redemptions = nil
	m.clearedredemptions = false
	m.removedredemptions = nil
}

// SetInstitutionID sets the "institution" edge to the Institution entity by id.
func (m *VoucherMutation) SetInstitutionID(id int) {
	m.institution = &id
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (m *VoucherMutation) ClearInstitution() {
	m.clearedinstitution = true
}

// InstitutionCleared reports if the "institution" edge to the Institution entity was cleared.
func (m *VoucherMutation) InstitutionCleared() bool {
	return m.clearedinstitution
}

// InstitutionID returns the "institution" edge ID in the mutation.
func (m *VoucherMutation) InstitutionID() (id int, exists bool) {
	if m.institution != nil {
		return *m.institution, true
	}
	return
}

// InstitutionIDs returns the "institution" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InstitutionID instead. It exists only for internal usage by the builders.
func (m *VoucherMutation) InstitutionIDs() (ids []int) {
	if id := m.institution; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInstitution resets all changes to the "institution" edge.
func (m *VoucherMutation) ResetInstitution() {
	m.institution = nil
	m.clearedinstitution = false
}

// Where appends a list predicates to the VoucherMutation builder.
func (m *VoucherMutation) Where(ps ...predicate.Voucher) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VoucherMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VoucherMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Voucher, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VoucherMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VoucherMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Voucher).
func (m *VoucherMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VoucherMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, voucher.FieldName)
	}
	if m.description != nil {
		fields = append(fields, voucher.FieldDescription)
	}
	if m.points_required != nil {
		fields = append(fields, voucher.FieldPointsRequired)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VoucherMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case voucher.FieldName:
		return m.Name()
	case voucher.FieldDescription:
		return m.Description()
	case voucher.FieldPointsRequired:
		return m.PointsRequired()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VoucherMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case voucher.FieldName:
		return m.OldName(ctx)
	case voucher.FieldDescription:
		return m.OldDescription(ctx)
	case voucher.FieldPointsRequired:
		return m.OldPointsRequired(ctx)
	}
	return nil, fmt.Errorf("unknown Voucher field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoucherMutation) SetField(name string, value ent.Value) error {
	switch name {
	case voucher.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case voucher.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case voucher.FieldPointsRequired:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointsRequired(v)
		return nil
	}
	return fmt.Errorf("unknown Voucher field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VoucherMutation) AddedFields() []string {
	var fields []string
	if m.addpoints_required != nil {
		fields = append(fields, voucher.FieldPointsRequired)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VoucherMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case voucher.FieldPointsRequired:
		return m.AddedPointsRequired()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoucherMutation) AddField(name string, value ent.Value) error {
	switch name {
	case voucher.FieldPointsRequired:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPointsRequired(v)
		return nil
	}
	return fmt.Errorf("unknown Voucher numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VoucherMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VoucherMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VoucherMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Voucher nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VoucherMutation) ResetField(name string) error {
	switch name {
	case voucher.FieldName:
		m.ResetName()
		return nil
	case voucher.FieldDescription:
		m.ResetDescription()
		return nil
	case voucher.FieldPointsRequired:
		m.ResetPointsRequired()
		return nil
	}
	return fmt.Errorf("unknown Voucher field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VoucherMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.redemptions != nil {
		edges = append(edges, voucher.EdgeRedemptions)
	}
	if m.institution != nil {
		edges = append(edges, voucher.EdgeInstitution)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VoucherMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case voucher.EdgeRedemptions:
		ids := make([]ent.Value, 0, len(m.redemptions))
		for id := range m.redemptions {
			ids = append(ids, id)
		}
		return ids
	case voucher.EdgeInstitution:
		if id := m.institution; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VoucherMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedredemptions != nil {
		edges = append(edges, voucher.EdgeRedemptions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VoucherMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case voucher.EdgeRedemptions:
		ids := make([]ent.Value, 0, len(m.removedredemptions))
		for id := range m.removedredemptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VoucherMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedredemptions {
		edges = append(edges, voucher.EdgeRedemptions)
	}
	if m.clearedinstitution {
		edges = append(edges, voucher.EdgeInstitution)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VoucherMutation) EdgeCleared(name string) bool {
	switch name {
	case voucher.EdgeRedemptions:
		return m.clearedredemptions
	case voucher.EdgeInstitution:
		return m.clearedinstitution
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VoucherMutation) ClearEdge(name string) error {
	switch name {
	case voucher.EdgeInstitution:
		m.ClearInstitution()
		return nil
	}
	return fmt.Errorf("unknown Voucher unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VoucherMutation) ResetEdge(name string) error {
	switch name {
	case voucher.EdgeRedemptions:
		m.ResetRedemptions()
		return nil
	case voucher.EdgeInstitution:
		m.ResetInstitution()
		return nil
	}
	return fmt.Errorf("unknown Voucher edge %s", name)
}
