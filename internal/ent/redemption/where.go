// Code generated by ent, DO NOT EDIT.

package redemption

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Redemption {
	return predicate.Redemption(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Redemption {
	return predicate.Redemption(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Redemption {
	return predicate.Redemption(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Redemption {
	return predicate.Redemption(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Redemption {
	return predicate.Redemption(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Redemption {
	return predicate.Redemption(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Redemption {
	return predicate.Redemption(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Redemption {
	return predicate.Redemption(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Redemption {
	return predicate.Redemption(sql.FieldLTE(FieldID, id))
}

// RedeemedAt applies equality check predicate on the "redeemed_at" field. It's identical to RedeemedAtEQ.
func RedeemedAt(v time.Time) predicate.Redemption {
	return predicate.Redemption(sql.FieldEQ(FieldRedeemedAt, v))
}

// RedeemedAtEQ applies the EQ predicate on the "redeemed_at" field.
func RedeemedAtEQ(v time.Time) predicate.Redemption {
	return predicate.Redemption(sql.FieldEQ(FieldRedeemedAt, v))
}

// RedeemedAtNEQ applies the NEQ predicate on the "redeemed_at" field.
func RedeemedAtNEQ(v time.Time) predicate.Redemption {
	return predicate.Redemption(sql.FieldNEQ(FieldRedeemedAt, v))
}

// RedeemedAtIn applies the In predicate on the "redeemed_at" field.
func RedeemedAtIn(vs ...time.Time) predicate.Redemption {
	return predicate.Redemption(sql.FieldIn(FieldRedeemedAt, vs...))
}

// RedeemedAtNotIn applies the NotIn predicate on the "redeemed_at" field.
func RedeemedAtNotIn(vs ...time.Time) predicate.Redemption {
	return predicate.Redemption(sql.FieldNotIn(FieldRedeemedAt, vs...))
}

// RedeemedAtGT applies the GT predicate on the "redeemed_at" field.
func RedeemedAtGT(v time.Time) predicate.Redemption {
	return predicate.Redemption(sql.FieldGT(FieldRedeemedAt, v))
}

// RedeemedAtGTE applies the GTE predicate on the "redeemed_at" field.
func RedeemedAtGTE(v time.Time) predicate.Redemption {
	return predicate.Redemption(sql.FieldGTE(FieldRedeemedAt, v))
}

// RedeemedAtLT applies the LT predicate on the "redeemed_at" field.
func RedeemedAtLT(v time.Time) predicate.Redemption {
	return predicate.Redemption(sql.FieldLT(FieldRedeemedAt, v))
}

// RedeemedAtLTE applies the LTE predicate on the "redeemed_at" field.
func RedeemedAtLTE(v time.Time) predicate.Redemption {
	return predicate.Redemption(sql.FieldLTE(FieldRedeemedAt, v))
}

// HasVoucher applies the HasEdge predicate on the "voucher" edge.
func HasVoucher() predicate.Redemption {
	return predicate.Redemption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VoucherTable, VoucherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoucherWith applies the HasEdge predicate on the "voucher" edge with a given conditions (other predicates).
func HasVoucherWith(preds ...predicate.Voucher) predicate.Redemption {
	return predicate.Redemption(func(s *sql.Selector) {
		step := newVoucherStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccessory applies the HasEdge predicate on the "accessory" edge.
func HasAccessory() predicate.Redemption {
	return predicate.Redemption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AccessoryTable, AccessoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccessoryWith applies the HasEdge predicate on the "accessory" edge with a given conditions (other predicates).
func HasAccessoryWith(preds ...predicate.Accessory) predicate.Redemption {
	return predicate.Redemption(func(s *sql.Selector) {
		step := newAccessoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Redemption {
	return predicate.Redemption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Redemption {
	return predicate.Redemption(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Redemption) predicate.Redemption {
	return predicate.Redemption(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Redemption) predicate.Redemption {
	return predicate.Redemption(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Redemption) predicate.Redemption {
	return predicate.Redemption(func(s *sql.Selector) {
		p(s.Not())
	})
}
