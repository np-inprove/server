// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/prize"
	"github.com/np-inprove/server/internal/ent/prizeredemptions"
	"github.com/np-inprove/server/internal/ent/user"
)

// PrizeRedemptionsUpdate is the builder for updating PrizeRedemptions entities.
type PrizeRedemptionsUpdate struct {
	config
	hooks    []Hook
	mutation *PrizeRedemptionsMutation
}

// Where appends a list predicates to the PrizeRedemptionsUpdate builder.
func (pru *PrizeRedemptionsUpdate) Where(ps ...predicate.PrizeRedemptions) *PrizeRedemptionsUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetRedeemedAt sets the "redeemed_at" field.
func (pru *PrizeRedemptionsUpdate) SetRedeemedAt(t time.Time) *PrizeRedemptionsUpdate {
	pru.mutation.SetRedeemedAt(t)
	return pru
}

// SetPrizeID sets the "prize_id" field.
func (pru *PrizeRedemptionsUpdate) SetPrizeID(i int) *PrizeRedemptionsUpdate {
	pru.mutation.SetPrizeID(i)
	return pru
}

// SetUserID sets the "user_id" field.
func (pru *PrizeRedemptionsUpdate) SetUserID(i int) *PrizeRedemptionsUpdate {
	pru.mutation.SetUserID(i)
	return pru
}

// SetPrize sets the "prize" edge to the Prize entity.
func (pru *PrizeRedemptionsUpdate) SetPrize(p *Prize) *PrizeRedemptionsUpdate {
	return pru.SetPrizeID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (pru *PrizeRedemptionsUpdate) SetUser(u *User) *PrizeRedemptionsUpdate {
	return pru.SetUserID(u.ID)
}

// Mutation returns the PrizeRedemptionsMutation object of the builder.
func (pru *PrizeRedemptionsUpdate) Mutation() *PrizeRedemptionsMutation {
	return pru.mutation
}

// ClearPrize clears the "prize" edge to the Prize entity.
func (pru *PrizeRedemptionsUpdate) ClearPrize() *PrizeRedemptionsUpdate {
	pru.mutation.ClearPrize()
	return pru
}

// ClearUser clears the "user" edge to the User entity.
func (pru *PrizeRedemptionsUpdate) ClearUser() *PrizeRedemptionsUpdate {
	pru.mutation.ClearUser()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PrizeRedemptionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PrizeRedemptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PrizeRedemptionsUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PrizeRedemptionsUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PrizeRedemptionsUpdate) check() error {
	if _, ok := pru.mutation.PrizeID(); pru.mutation.PrizeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrizeRedemptions.prize"`)
	}
	if _, ok := pru.mutation.UserID(); pru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrizeRedemptions.user"`)
	}
	return nil
}

func (pru *PrizeRedemptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(prizeredemptions.Table, prizeredemptions.Columns, sqlgraph.NewFieldSpec(prizeredemptions.FieldPrizeID, field.TypeInt), sqlgraph.NewFieldSpec(prizeredemptions.FieldUserID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.RedeemedAt(); ok {
		_spec.SetField(prizeredemptions.FieldRedeemedAt, field.TypeTime, value)
	}
	if pru.mutation.PrizeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.PrizeTable,
			Columns: []string{prizeredemptions.PrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prize.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.PrizeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.PrizeTable,
			Columns: []string{prizeredemptions.PrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prize.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.UserTable,
			Columns: []string{prizeredemptions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.UserTable,
			Columns: []string{prizeredemptions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prizeredemptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PrizeRedemptionsUpdateOne is the builder for updating a single PrizeRedemptions entity.
type PrizeRedemptionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrizeRedemptionsMutation
}

// SetRedeemedAt sets the "redeemed_at" field.
func (pruo *PrizeRedemptionsUpdateOne) SetRedeemedAt(t time.Time) *PrizeRedemptionsUpdateOne {
	pruo.mutation.SetRedeemedAt(t)
	return pruo
}

// SetPrizeID sets the "prize_id" field.
func (pruo *PrizeRedemptionsUpdateOne) SetPrizeID(i int) *PrizeRedemptionsUpdateOne {
	pruo.mutation.SetPrizeID(i)
	return pruo
}

// SetUserID sets the "user_id" field.
func (pruo *PrizeRedemptionsUpdateOne) SetUserID(i int) *PrizeRedemptionsUpdateOne {
	pruo.mutation.SetUserID(i)
	return pruo
}

// SetPrize sets the "prize" edge to the Prize entity.
func (pruo *PrizeRedemptionsUpdateOne) SetPrize(p *Prize) *PrizeRedemptionsUpdateOne {
	return pruo.SetPrizeID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (pruo *PrizeRedemptionsUpdateOne) SetUser(u *User) *PrizeRedemptionsUpdateOne {
	return pruo.SetUserID(u.ID)
}

// Mutation returns the PrizeRedemptionsMutation object of the builder.
func (pruo *PrizeRedemptionsUpdateOne) Mutation() *PrizeRedemptionsMutation {
	return pruo.mutation
}

// ClearPrize clears the "prize" edge to the Prize entity.
func (pruo *PrizeRedemptionsUpdateOne) ClearPrize() *PrizeRedemptionsUpdateOne {
	pruo.mutation.ClearPrize()
	return pruo
}

// ClearUser clears the "user" edge to the User entity.
func (pruo *PrizeRedemptionsUpdateOne) ClearUser() *PrizeRedemptionsUpdateOne {
	pruo.mutation.ClearUser()
	return pruo
}

// Where appends a list predicates to the PrizeRedemptionsUpdate builder.
func (pruo *PrizeRedemptionsUpdateOne) Where(ps ...predicate.PrizeRedemptions) *PrizeRedemptionsUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PrizeRedemptionsUpdateOne) Select(field string, fields ...string) *PrizeRedemptionsUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PrizeRedemptions entity.
func (pruo *PrizeRedemptionsUpdateOne) Save(ctx context.Context) (*PrizeRedemptions, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PrizeRedemptionsUpdateOne) SaveX(ctx context.Context) *PrizeRedemptions {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PrizeRedemptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PrizeRedemptionsUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PrizeRedemptionsUpdateOne) check() error {
	if _, ok := pruo.mutation.PrizeID(); pruo.mutation.PrizeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrizeRedemptions.prize"`)
	}
	if _, ok := pruo.mutation.UserID(); pruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrizeRedemptions.user"`)
	}
	return nil
}

func (pruo *PrizeRedemptionsUpdateOne) sqlSave(ctx context.Context) (_node *PrizeRedemptions, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(prizeredemptions.Table, prizeredemptions.Columns, sqlgraph.NewFieldSpec(prizeredemptions.FieldPrizeID, field.TypeInt), sqlgraph.NewFieldSpec(prizeredemptions.FieldUserID, field.TypeInt))
	if id, ok := pruo.mutation.PrizeID(); !ok {
		return nil, &ValidationError{Name: "prize_id", err: errors.New(`ent: missing "PrizeRedemptions.prize_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := pruo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "PrizeRedemptions.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !prizeredemptions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.RedeemedAt(); ok {
		_spec.SetField(prizeredemptions.FieldRedeemedAt, field.TypeTime, value)
	}
	if pruo.mutation.PrizeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.PrizeTable,
			Columns: []string{prizeredemptions.PrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prize.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.PrizeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.PrizeTable,
			Columns: []string{prizeredemptions.PrizeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prize.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.UserTable,
			Columns: []string{prizeredemptions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   prizeredemptions.UserTable,
			Columns: []string{prizeredemptions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrizeRedemptions{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prizeredemptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
