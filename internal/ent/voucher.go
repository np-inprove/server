// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	entinstitution "github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/voucher"
)

// Voucher is the model entity for the Voucher schema.
type Voucher struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the prize
	Name string `json:"name,omitempty"`
	// Description of the prize
	Description string `json:"description,omitempty"`
	// Points required to redeem the prize
	PointsRequired int `json:"points_required,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VoucherQuery when eager-loading is set.
	Edges                VoucherEdges `json:"edges"`
	institution_vouchers *int
	selectValues         sql.SelectValues
}

// VoucherEdges holds the relations/edges for other nodes in the graph.
type VoucherEdges struct {
	// Redemptions that involve this prize
	Redemptions []*Redemption `json:"redemptions,omitempty"`
	// Institution that owns this voucher
	Institution *Institution `json:"institution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RedemptionsOrErr returns the Redemptions value or an error if the edge
// was not loaded in eager-loading.
func (e VoucherEdges) RedemptionsOrErr() ([]*Redemption, error) {
	if e.loadedTypes[0] {
		return e.Redemptions, nil
	}
	return nil, &NotLoadedError{edge: "redemptions"}
}

// InstitutionOrErr returns the Institution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoucherEdges) InstitutionOrErr() (*Institution, error) {
	if e.loadedTypes[1] {
		if e.Institution == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entinstitution.Label}
		}
		return e.Institution, nil
	}
	return nil, &NotLoadedError{edge: "institution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Voucher) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case voucher.FieldID, voucher.FieldPointsRequired:
			values[i] = new(sql.NullInt64)
		case voucher.FieldName, voucher.FieldDescription:
			values[i] = new(sql.NullString)
		case voucher.ForeignKeys[0]: // institution_vouchers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Voucher fields.
func (v *Voucher) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case voucher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case voucher.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case voucher.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = value.String
			}
		case voucher.FieldPointsRequired:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points_required", values[i])
			} else if value.Valid {
				v.PointsRequired = int(value.Int64)
			}
		case voucher.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field institution_vouchers", value)
			} else if value.Valid {
				v.institution_vouchers = new(int)
				*v.institution_vouchers = int(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Voucher.
// This includes values selected through modifiers, order, etc.
func (v *Voucher) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryRedemptions queries the "redemptions" edge of the Voucher entity.
func (v *Voucher) QueryRedemptions() *RedemptionQuery {
	return NewVoucherClient(v.config).QueryRedemptions(v)
}

// QueryInstitution queries the "institution" edge of the Voucher entity.
func (v *Voucher) QueryInstitution() *InstitutionQuery {
	return NewVoucherClient(v.config).QueryInstitution(v)
}

// Update returns a builder for updating this Voucher.
// Note that you need to call Voucher.Unwrap() before calling this method if this Voucher
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Voucher) Update() *VoucherUpdateOne {
	return NewVoucherClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Voucher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Voucher) Unwrap() *Voucher {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Voucher is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Voucher) String() string {
	var builder strings.Builder
	builder.WriteString("Voucher(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(v.Description)
	builder.WriteString(", ")
	builder.WriteString("points_required=")
	builder.WriteString(fmt.Sprintf("%v", v.PointsRequired))
	builder.WriteByte(')')
	return builder.String()
}

// Vouchers is a parsable slice of Voucher.
type Vouchers []*Voucher
