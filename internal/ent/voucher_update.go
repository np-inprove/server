// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/predicate"
	"github.com/np-inprove/server/internal/ent/redemption"
	"github.com/np-inprove/server/internal/ent/voucher"
)

// VoucherUpdate is the builder for updating Voucher entities.
type VoucherUpdate struct {
	config
	hooks    []Hook
	mutation *VoucherMutation
}

// Where appends a list predicates to the VoucherUpdate builder.
func (vu *VoucherUpdate) Where(ps ...predicate.Voucher) *VoucherUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetName sets the "name" field.
func (vu *VoucherUpdate) SetName(s string) *VoucherUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetDescription sets the "description" field.
func (vu *VoucherUpdate) SetDescription(s string) *VoucherUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetPointsRequired sets the "points_required" field.
func (vu *VoucherUpdate) SetPointsRequired(i int) *VoucherUpdate {
	vu.mutation.ResetPointsRequired()
	vu.mutation.SetPointsRequired(i)
	return vu
}

// AddPointsRequired adds i to the "points_required" field.
func (vu *VoucherUpdate) AddPointsRequired(i int) *VoucherUpdate {
	vu.mutation.AddPointsRequired(i)
	return vu
}

// AddRedemptionIDs adds the "redemptions" edge to the Redemption entity by IDs.
func (vu *VoucherUpdate) AddRedemptionIDs(ids ...int) *VoucherUpdate {
	vu.mutation.AddRedemptionIDs(ids...)
	return vu
}

// AddRedemptions adds the "redemptions" edges to the Redemption entity.
func (vu *VoucherUpdate) AddRedemptions(r ...*Redemption) *VoucherUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vu.AddRedemptionIDs(ids...)
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (vu *VoucherUpdate) SetInstitutionID(id int) *VoucherUpdate {
	vu.mutation.SetInstitutionID(id)
	return vu
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (vu *VoucherUpdate) SetInstitution(i *Institution) *VoucherUpdate {
	return vu.SetInstitutionID(i.ID)
}

// Mutation returns the VoucherMutation object of the builder.
func (vu *VoucherUpdate) Mutation() *VoucherMutation {
	return vu.mutation
}

// ClearRedemptions clears all "redemptions" edges to the Redemption entity.
func (vu *VoucherUpdate) ClearRedemptions() *VoucherUpdate {
	vu.mutation.ClearRedemptions()
	return vu
}

// RemoveRedemptionIDs removes the "redemptions" edge to Redemption entities by IDs.
func (vu *VoucherUpdate) RemoveRedemptionIDs(ids ...int) *VoucherUpdate {
	vu.mutation.RemoveRedemptionIDs(ids...)
	return vu
}

// RemoveRedemptions removes "redemptions" edges to Redemption entities.
func (vu *VoucherUpdate) RemoveRedemptions(r ...*Redemption) *VoucherUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vu.RemoveRedemptionIDs(ids...)
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (vu *VoucherUpdate) ClearInstitution() *VoucherUpdate {
	vu.mutation.ClearInstitution()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoucherUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoucherUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoucherUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoucherUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VoucherUpdate) check() error {
	if v, ok := vu.mutation.Name(); ok {
		if err := voucher.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Voucher.name": %w`, err)}
		}
	}
	if v, ok := vu.mutation.PointsRequired(); ok {
		if err := voucher.PointsRequiredValidator(v); err != nil {
			return &ValidationError{Name: "points_required", err: fmt.Errorf(`ent: validator failed for field "Voucher.points_required": %w`, err)}
		}
	}
	if _, ok := vu.mutation.InstitutionID(); vu.mutation.InstitutionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Voucher.institution"`)
	}
	return nil
}

func (vu *VoucherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(voucher.Table, voucher.Columns, sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(voucher.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.SetField(voucher.FieldDescription, field.TypeString, value)
	}
	if value, ok := vu.mutation.PointsRequired(); ok {
		_spec.SetField(voucher.FieldPointsRequired, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedPointsRequired(); ok {
		_spec.AddField(voucher.FieldPointsRequired, field.TypeInt, value)
	}
	if vu.mutation.RedemptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.RedemptionsTable,
			Columns: []string{voucher.RedemptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(redemption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedRedemptionsIDs(); len(nodes) > 0 && !vu.mutation.RedemptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.RedemptionsTable,
			Columns: []string{voucher.RedemptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(redemption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RedemptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.RedemptionsTable,
			Columns: []string{voucher.RedemptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(redemption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voucher.InstitutionTable,
			Columns: []string{voucher.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voucher.InstitutionTable,
			Columns: []string{voucher.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VoucherUpdateOne is the builder for updating a single Voucher entity.
type VoucherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoucherMutation
}

// SetName sets the "name" field.
func (vuo *VoucherUpdateOne) SetName(s string) *VoucherUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VoucherUpdateOne) SetDescription(s string) *VoucherUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetPointsRequired sets the "points_required" field.
func (vuo *VoucherUpdateOne) SetPointsRequired(i int) *VoucherUpdateOne {
	vuo.mutation.ResetPointsRequired()
	vuo.mutation.SetPointsRequired(i)
	return vuo
}

// AddPointsRequired adds i to the "points_required" field.
func (vuo *VoucherUpdateOne) AddPointsRequired(i int) *VoucherUpdateOne {
	vuo.mutation.AddPointsRequired(i)
	return vuo
}

// AddRedemptionIDs adds the "redemptions" edge to the Redemption entity by IDs.
func (vuo *VoucherUpdateOne) AddRedemptionIDs(ids ...int) *VoucherUpdateOne {
	vuo.mutation.AddRedemptionIDs(ids...)
	return vuo
}

// AddRedemptions adds the "redemptions" edges to the Redemption entity.
func (vuo *VoucherUpdateOne) AddRedemptions(r ...*Redemption) *VoucherUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vuo.AddRedemptionIDs(ids...)
}

// SetInstitutionID sets the "institution" edge to the Institution entity by ID.
func (vuo *VoucherUpdateOne) SetInstitutionID(id int) *VoucherUpdateOne {
	vuo.mutation.SetInstitutionID(id)
	return vuo
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (vuo *VoucherUpdateOne) SetInstitution(i *Institution) *VoucherUpdateOne {
	return vuo.SetInstitutionID(i.ID)
}

// Mutation returns the VoucherMutation object of the builder.
func (vuo *VoucherUpdateOne) Mutation() *VoucherMutation {
	return vuo.mutation
}

// ClearRedemptions clears all "redemptions" edges to the Redemption entity.
func (vuo *VoucherUpdateOne) ClearRedemptions() *VoucherUpdateOne {
	vuo.mutation.ClearRedemptions()
	return vuo
}

// RemoveRedemptionIDs removes the "redemptions" edge to Redemption entities by IDs.
func (vuo *VoucherUpdateOne) RemoveRedemptionIDs(ids ...int) *VoucherUpdateOne {
	vuo.mutation.RemoveRedemptionIDs(ids...)
	return vuo
}

// RemoveRedemptions removes "redemptions" edges to Redemption entities.
func (vuo *VoucherUpdateOne) RemoveRedemptions(r ...*Redemption) *VoucherUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vuo.RemoveRedemptionIDs(ids...)
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (vuo *VoucherUpdateOne) ClearInstitution() *VoucherUpdateOne {
	vuo.mutation.ClearInstitution()
	return vuo
}

// Where appends a list predicates to the VoucherUpdate builder.
func (vuo *VoucherUpdateOne) Where(ps ...predicate.Voucher) *VoucherUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VoucherUpdateOne) Select(field string, fields ...string) *VoucherUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Voucher entity.
func (vuo *VoucherUpdateOne) Save(ctx context.Context) (*Voucher, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoucherUpdateOne) SaveX(ctx context.Context) *Voucher {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoucherUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoucherUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VoucherUpdateOne) check() error {
	if v, ok := vuo.mutation.Name(); ok {
		if err := voucher.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Voucher.name": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.PointsRequired(); ok {
		if err := voucher.PointsRequiredValidator(v); err != nil {
			return &ValidationError{Name: "points_required", err: fmt.Errorf(`ent: validator failed for field "Voucher.points_required": %w`, err)}
		}
	}
	if _, ok := vuo.mutation.InstitutionID(); vuo.mutation.InstitutionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Voucher.institution"`)
	}
	return nil
}

func (vuo *VoucherUpdateOne) sqlSave(ctx context.Context) (_node *Voucher, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(voucher.Table, voucher.Columns, sqlgraph.NewFieldSpec(voucher.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Voucher.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, voucher.FieldID)
		for _, f := range fields {
			if !voucher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != voucher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(voucher.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.SetField(voucher.FieldDescription, field.TypeString, value)
	}
	if value, ok := vuo.mutation.PointsRequired(); ok {
		_spec.SetField(voucher.FieldPointsRequired, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedPointsRequired(); ok {
		_spec.AddField(voucher.FieldPointsRequired, field.TypeInt, value)
	}
	if vuo.mutation.RedemptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.RedemptionsTable,
			Columns: []string{voucher.RedemptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(redemption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedRedemptionsIDs(); len(nodes) > 0 && !vuo.mutation.RedemptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.RedemptionsTable,
			Columns: []string{voucher.RedemptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(redemption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RedemptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voucher.RedemptionsTable,
			Columns: []string{voucher.RedemptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(redemption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voucher.InstitutionTable,
			Columns: []string{voucher.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voucher.InstitutionTable,
			Columns: []string{voucher.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Voucher{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voucher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
