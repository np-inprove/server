// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/academicschool"
	"github.com/np-inprove/server/internal/ent/course"
)

// Course is the model entity for the Course schema.
type Course struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the course
	Name string `json:"name,omitempty"`
	// Short code of the course (example: CSF)
	CourseID string `json:"course_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseQuery when eager-loading is set.
	Edges                   CourseEdges `json:"edges"`
	academic_school_courses *int
	selectValues            sql.SelectValues
}

// CourseEdges holds the relations/edges for other nodes in the graph.
type CourseEdges struct {
	// Students taking this course
	Students []*User `json:"students,omitempty"`
	// AcademicSchool holds the value of the academic_school edge.
	AcademicSchool *AcademicSchool `json:"academic_school,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudentsOrErr returns the Students value or an error if the edge
// was not loaded in eager-loading.
func (e CourseEdges) StudentsOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Students, nil
	}
	return nil, &NotLoadedError{edge: "students"}
}

// AcademicSchoolOrErr returns the AcademicSchool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseEdges) AcademicSchoolOrErr() (*AcademicSchool, error) {
	if e.loadedTypes[1] {
		if e.AcademicSchool == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: academicschool.Label}
		}
		return e.AcademicSchool, nil
	}
	return nil, &NotLoadedError{edge: "academic_school"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Course) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case course.FieldID:
			values[i] = new(sql.NullInt64)
		case course.FieldName, course.FieldCourseID:
			values[i] = new(sql.NullString)
		case course.ForeignKeys[0]: // academic_school_courses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Course fields.
func (c *Course) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case course.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case course.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case course.FieldCourseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				c.CourseID = value.String
			}
		case course.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field academic_school_courses", value)
			} else if value.Valid {
				c.academic_school_courses = new(int)
				*c.academic_school_courses = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Course.
// This includes values selected through modifiers, order, etc.
func (c *Course) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryStudents queries the "students" edge of the Course entity.
func (c *Course) QueryStudents() *UserQuery {
	return NewCourseClient(c.config).QueryStudents(c)
}

// QueryAcademicSchool queries the "academic_school" edge of the Course entity.
func (c *Course) QueryAcademicSchool() *AcademicSchoolQuery {
	return NewCourseClient(c.config).QueryAcademicSchool(c)
}

// Update returns a builder for updating this Course.
// Note that you need to call Course.Unwrap() before calling this method if this Course
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Course) Update() *CourseUpdateOne {
	return NewCourseClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Course entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Course) Unwrap() *Course {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Course is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Course) String() string {
	var builder strings.Builder
	builder.WriteString("Course(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("course_id=")
	builder.WriteString(c.CourseID)
	builder.WriteByte(')')
	return builder.String()
}

// Courses is a parsable slice of Course.
type Courses []*Course
