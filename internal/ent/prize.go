// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/np-inprove/server/internal/ent/institution"
	"github.com/np-inprove/server/internal/ent/prize"
)

// Prize is the model entity for the Prize schema.
type Prize struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name of the prize
	Name string `json:"name,omitempty"`
	// Description of the prize
	Description string `json:"description,omitempty"`
	// Points required to redeem the prize
	PointsRequired int `json:"points_required,omitempty"`
	// Type of prize, can only be voucher or a pet accessory
	Discriminator prize.Discriminator `json:"discriminator,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrizeQuery when eager-loading is set.
	Edges              PrizeEdges `json:"edges"`
	institution_prizes *int
	selectValues       sql.SelectValues
}

// PrizeEdges holds the relations/edges for other nodes in the graph.
type PrizeEdges struct {
	// Institution holds the value of the institution edge.
	Institution *Institution `json:"institution,omitempty"`
	// Users who have redeemed this prize
	RedemptionUsers []*User `json:"redemption_users,omitempty"`
	// PrizeRedemptions holds the value of the prize_redemptions edge.
	PrizeRedemptions []*PrizeRedemptions `json:"prize_redemptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// InstitutionOrErr returns the Institution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrizeEdges) InstitutionOrErr() (*Institution, error) {
	if e.loadedTypes[0] {
		if e.Institution == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: institution.Label}
		}
		return e.Institution, nil
	}
	return nil, &NotLoadedError{edge: "institution"}
}

// RedemptionUsersOrErr returns the RedemptionUsers value or an error if the edge
// was not loaded in eager-loading.
func (e PrizeEdges) RedemptionUsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.RedemptionUsers, nil
	}
	return nil, &NotLoadedError{edge: "redemption_users"}
}

// PrizeRedemptionsOrErr returns the PrizeRedemptions value or an error if the edge
// was not loaded in eager-loading.
func (e PrizeEdges) PrizeRedemptionsOrErr() ([]*PrizeRedemptions, error) {
	if e.loadedTypes[2] {
		return e.PrizeRedemptions, nil
	}
	return nil, &NotLoadedError{edge: "prize_redemptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prize) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case prize.FieldID, prize.FieldPointsRequired:
			values[i] = new(sql.NullInt64)
		case prize.FieldName, prize.FieldDescription, prize.FieldDiscriminator:
			values[i] = new(sql.NullString)
		case prize.ForeignKeys[0]: // institution_prizes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prize fields.
func (pr *Prize) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prize.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case prize.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case prize.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case prize.FieldPointsRequired:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points_required", values[i])
			} else if value.Valid {
				pr.PointsRequired = int(value.Int64)
			}
		case prize.FieldDiscriminator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discriminator", values[i])
			} else if value.Valid {
				pr.Discriminator = prize.Discriminator(value.String)
			}
		case prize.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field institution_prizes", value)
			} else if value.Valid {
				pr.institution_prizes = new(int)
				*pr.institution_prizes = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Prize.
// This includes values selected through modifiers, order, etc.
func (pr *Prize) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryInstitution queries the "institution" edge of the Prize entity.
func (pr *Prize) QueryInstitution() *InstitutionQuery {
	return NewPrizeClient(pr.config).QueryInstitution(pr)
}

// QueryRedemptionUsers queries the "redemption_users" edge of the Prize entity.
func (pr *Prize) QueryRedemptionUsers() *UserQuery {
	return NewPrizeClient(pr.config).QueryRedemptionUsers(pr)
}

// QueryPrizeRedemptions queries the "prize_redemptions" edge of the Prize entity.
func (pr *Prize) QueryPrizeRedemptions() *PrizeRedemptionsQuery {
	return NewPrizeClient(pr.config).QueryPrizeRedemptions(pr)
}

// Update returns a builder for updating this Prize.
// Note that you need to call Prize.Unwrap() before calling this method if this Prize
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prize) Update() *PrizeUpdateOne {
	return NewPrizeClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Prize entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Prize) Unwrap() *Prize {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Prize is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prize) String() string {
	var builder strings.Builder
	builder.WriteString("Prize(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("points_required=")
	builder.WriteString(fmt.Sprintf("%v", pr.PointsRequired))
	builder.WriteString(", ")
	builder.WriteString("discriminator=")
	builder.WriteString(fmt.Sprintf("%v", pr.Discriminator))
	builder.WriteByte(')')
	return builder.String()
}

// Prizes is a parsable slice of Prize.
type Prizes []*Prize
