// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	entgroup "github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/groupinvitelink"
	"github.com/np-inprove/server/internal/entity/group"
)

// GroupInviteLinkCreate is the builder for creating a GroupInviteLink entity.
type GroupInviteLinkCreate struct {
	config
	mutation *GroupInviteLinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (gilc *GroupInviteLinkCreate) SetCode(s string) *GroupInviteLinkCreate {
	gilc.mutation.SetCode(s)
	return gilc
}

// SetRole sets the "role" field.
func (gilc *GroupInviteLinkCreate) SetRole(gr group.Role) *GroupInviteLinkCreate {
	gilc.mutation.SetRole(gr)
	return gilc
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (gilc *GroupInviteLinkCreate) SetGroupID(id int) *GroupInviteLinkCreate {
	gilc.mutation.SetGroupID(id)
	return gilc
}

// SetGroup sets the "group" edge to the Group entity.
func (gilc *GroupInviteLinkCreate) SetGroup(g *Group) *GroupInviteLinkCreate {
	return gilc.SetGroupID(g.ID)
}

// Mutation returns the GroupInviteLinkMutation object of the builder.
func (gilc *GroupInviteLinkCreate) Mutation() *GroupInviteLinkMutation {
	return gilc.mutation
}

// Save creates the GroupInviteLink in the database.
func (gilc *GroupInviteLinkCreate) Save(ctx context.Context) (*GroupInviteLink, error) {
	return withHooks(ctx, gilc.sqlSave, gilc.mutation, gilc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gilc *GroupInviteLinkCreate) SaveX(ctx context.Context) *GroupInviteLink {
	v, err := gilc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gilc *GroupInviteLinkCreate) Exec(ctx context.Context) error {
	_, err := gilc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gilc *GroupInviteLinkCreate) ExecX(ctx context.Context) {
	if err := gilc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gilc *GroupInviteLinkCreate) check() error {
	if _, ok := gilc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "GroupInviteLink.code"`)}
	}
	if v, ok := gilc.mutation.Code(); ok {
		if err := groupinvitelink.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "GroupInviteLink.code": %w`, err)}
		}
	}
	if _, ok := gilc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "GroupInviteLink.role"`)}
	}
	if v, ok := gilc.mutation.Role(); ok {
		if err := groupinvitelink.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "GroupInviteLink.role": %w`, err)}
		}
	}
	if _, ok := gilc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "GroupInviteLink.group"`)}
	}
	return nil
}

func (gilc *GroupInviteLinkCreate) sqlSave(ctx context.Context) (*GroupInviteLink, error) {
	if err := gilc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gilc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gilc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gilc.mutation.id = &_node.ID
	gilc.mutation.done = true
	return _node, nil
}

func (gilc *GroupInviteLinkCreate) createSpec() (*GroupInviteLink, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupInviteLink{config: gilc.config}
		_spec = sqlgraph.NewCreateSpec(groupinvitelink.Table, sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt))
	)
	_spec.OnConflict = gilc.conflict
	if value, ok := gilc.mutation.Code(); ok {
		_spec.SetField(groupinvitelink.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := gilc.mutation.Role(); ok {
		_spec.SetField(groupinvitelink.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if nodes := gilc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupinvitelink.GroupTable,
			Columns: []string{groupinvitelink.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_invites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GroupInviteLink.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GroupInviteLinkUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (gilc *GroupInviteLinkCreate) OnConflict(opts ...sql.ConflictOption) *GroupInviteLinkUpsertOne {
	gilc.conflict = opts
	return &GroupInviteLinkUpsertOne{
		create: gilc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GroupInviteLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gilc *GroupInviteLinkCreate) OnConflictColumns(columns ...string) *GroupInviteLinkUpsertOne {
	gilc.conflict = append(gilc.conflict, sql.ConflictColumns(columns...))
	return &GroupInviteLinkUpsertOne{
		create: gilc,
	}
}

type (
	// GroupInviteLinkUpsertOne is the builder for "upsert"-ing
	//  one GroupInviteLink node.
	GroupInviteLinkUpsertOne struct {
		create *GroupInviteLinkCreate
	}

	// GroupInviteLinkUpsert is the "OnConflict" setter.
	GroupInviteLinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *GroupInviteLinkUpsert) SetCode(v string) *GroupInviteLinkUpsert {
	u.Set(groupinvitelink.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *GroupInviteLinkUpsert) UpdateCode() *GroupInviteLinkUpsert {
	u.SetExcluded(groupinvitelink.FieldCode)
	return u
}

// SetRole sets the "role" field.
func (u *GroupInviteLinkUpsert) SetRole(v group.Role) *GroupInviteLinkUpsert {
	u.Set(groupinvitelink.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *GroupInviteLinkUpsert) UpdateRole() *GroupInviteLinkUpsert {
	u.SetExcluded(groupinvitelink.FieldRole)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GroupInviteLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GroupInviteLinkUpsertOne) UpdateNewValues() *GroupInviteLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GroupInviteLink.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GroupInviteLinkUpsertOne) Ignore() *GroupInviteLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GroupInviteLinkUpsertOne) DoNothing() *GroupInviteLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GroupInviteLinkCreate.OnConflict
// documentation for more info.
func (u *GroupInviteLinkUpsertOne) Update(set func(*GroupInviteLinkUpsert)) *GroupInviteLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GroupInviteLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *GroupInviteLinkUpsertOne) SetCode(v string) *GroupInviteLinkUpsertOne {
	return u.Update(func(s *GroupInviteLinkUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *GroupInviteLinkUpsertOne) UpdateCode() *GroupInviteLinkUpsertOne {
	return u.Update(func(s *GroupInviteLinkUpsert) {
		s.UpdateCode()
	})
}

// SetRole sets the "role" field.
func (u *GroupInviteLinkUpsertOne) SetRole(v group.Role) *GroupInviteLinkUpsertOne {
	return u.Update(func(s *GroupInviteLinkUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *GroupInviteLinkUpsertOne) UpdateRole() *GroupInviteLinkUpsertOne {
	return u.Update(func(s *GroupInviteLinkUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *GroupInviteLinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GroupInviteLinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupInviteLinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GroupInviteLinkUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GroupInviteLinkUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GroupInviteLinkCreateBulk is the builder for creating many GroupInviteLink entities in bulk.
type GroupInviteLinkCreateBulk struct {
	config
	builders []*GroupInviteLinkCreate
	conflict []sql.ConflictOption
}

// Save creates the GroupInviteLink entities in the database.
func (gilcb *GroupInviteLinkCreateBulk) Save(ctx context.Context) ([]*GroupInviteLink, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gilcb.builders))
	nodes := make([]*GroupInviteLink, len(gilcb.builders))
	mutators := make([]Mutator, len(gilcb.builders))
	for i := range gilcb.builders {
		func(i int, root context.Context) {
			builder := gilcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupInviteLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gilcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gilcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gilcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gilcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gilcb *GroupInviteLinkCreateBulk) SaveX(ctx context.Context) []*GroupInviteLink {
	v, err := gilcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gilcb *GroupInviteLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := gilcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gilcb *GroupInviteLinkCreateBulk) ExecX(ctx context.Context) {
	if err := gilcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GroupInviteLink.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GroupInviteLinkUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (gilcb *GroupInviteLinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *GroupInviteLinkUpsertBulk {
	gilcb.conflict = opts
	return &GroupInviteLinkUpsertBulk{
		create: gilcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GroupInviteLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gilcb *GroupInviteLinkCreateBulk) OnConflictColumns(columns ...string) *GroupInviteLinkUpsertBulk {
	gilcb.conflict = append(gilcb.conflict, sql.ConflictColumns(columns...))
	return &GroupInviteLinkUpsertBulk{
		create: gilcb,
	}
}

// GroupInviteLinkUpsertBulk is the builder for "upsert"-ing
// a bulk of GroupInviteLink nodes.
type GroupInviteLinkUpsertBulk struct {
	create *GroupInviteLinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GroupInviteLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GroupInviteLinkUpsertBulk) UpdateNewValues() *GroupInviteLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GroupInviteLink.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GroupInviteLinkUpsertBulk) Ignore() *GroupInviteLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GroupInviteLinkUpsertBulk) DoNothing() *GroupInviteLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GroupInviteLinkCreateBulk.OnConflict
// documentation for more info.
func (u *GroupInviteLinkUpsertBulk) Update(set func(*GroupInviteLinkUpsert)) *GroupInviteLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GroupInviteLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *GroupInviteLinkUpsertBulk) SetCode(v string) *GroupInviteLinkUpsertBulk {
	return u.Update(func(s *GroupInviteLinkUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *GroupInviteLinkUpsertBulk) UpdateCode() *GroupInviteLinkUpsertBulk {
	return u.Update(func(s *GroupInviteLinkUpsert) {
		s.UpdateCode()
	})
}

// SetRole sets the "role" field.
func (u *GroupInviteLinkUpsertBulk) SetRole(v group.Role) *GroupInviteLinkUpsertBulk {
	return u.Update(func(s *GroupInviteLinkUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *GroupInviteLinkUpsertBulk) UpdateRole() *GroupInviteLinkUpsertBulk {
	return u.Update(func(s *GroupInviteLinkUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *GroupInviteLinkUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GroupInviteLinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GroupInviteLinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupInviteLinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
