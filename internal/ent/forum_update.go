// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/np-inprove/server/internal/ent/forum"
	"github.com/np-inprove/server/internal/ent/forumpost"
	entgroup "github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// ForumUpdate is the builder for updating Forum entities.
type ForumUpdate struct {
	config
	hooks    []Hook
	mutation *ForumMutation
}

// Where appends a list predicates to the ForumUpdate builder.
func (fu *ForumUpdate) Where(ps ...predicate.Forum) *ForumUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *ForumUpdate) SetName(s string) *ForumUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetShortName sets the "short_name" field.
func (fu *ForumUpdate) SetShortName(s string) *ForumUpdate {
	fu.mutation.SetShortName(s)
	return fu
}

// SetDescription sets the "description" field.
func (fu *ForumUpdate) SetDescription(s string) *ForumUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (fu *ForumUpdate) SetGroupID(id int) *ForumUpdate {
	fu.mutation.SetGroupID(id)
	return fu
}

// SetGroup sets the "group" edge to the Group entity.
func (fu *ForumUpdate) SetGroup(g *Group) *ForumUpdate {
	return fu.SetGroupID(g.ID)
}

// AddPostIDs adds the "posts" edge to the ForumPost entity by IDs.
func (fu *ForumUpdate) AddPostIDs(ids ...int) *ForumUpdate {
	fu.mutation.AddPostIDs(ids...)
	return fu
}

// AddPosts adds the "posts" edges to the ForumPost entity.
func (fu *ForumUpdate) AddPosts(f ...*ForumPost) *ForumUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddPostIDs(ids...)
}

// Mutation returns the ForumMutation object of the builder.
func (fu *ForumUpdate) Mutation() *ForumMutation {
	return fu.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (fu *ForumUpdate) ClearGroup() *ForumUpdate {
	fu.mutation.ClearGroup()
	return fu
}

// ClearPosts clears all "posts" edges to the ForumPost entity.
func (fu *ForumUpdate) ClearPosts() *ForumUpdate {
	fu.mutation.ClearPosts()
	return fu
}

// RemovePostIDs removes the "posts" edge to ForumPost entities by IDs.
func (fu *ForumUpdate) RemovePostIDs(ids ...int) *ForumUpdate {
	fu.mutation.RemovePostIDs(ids...)
	return fu
}

// RemovePosts removes "posts" edges to ForumPost entities.
func (fu *ForumUpdate) RemovePosts(f ...*ForumPost) *ForumUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *ForumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *ForumUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *ForumUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *ForumUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *ForumUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := forum.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Forum.name": %w`, err)}
		}
	}
	if v, ok := fu.mutation.ShortName(); ok {
		if err := forum.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "short_name", err: fmt.Errorf(`ent: validator failed for field "Forum.short_name": %w`, err)}
		}
	}
	if _, ok := fu.mutation.GroupID(); fu.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Forum.group"`)
	}
	return nil
}

func (fu *ForumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(forum.Table, forum.Columns, sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(forum.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.ShortName(); ok {
		_spec.SetField(forum.FieldShortName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(forum.FieldDescription, field.TypeString, value)
	}
	if fu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forum.GroupTable,
			Columns: []string{forum.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forum.GroupTable,
			Columns: []string{forum.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forum.PostsTable,
			Columns: []string{forum.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !fu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forum.PostsTable,
			Columns: []string{forum.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forum.PostsTable,
			Columns: []string{forum.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// ForumUpdateOne is the builder for updating a single Forum entity.
type ForumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ForumMutation
}

// SetName sets the "name" field.
func (fuo *ForumUpdateOne) SetName(s string) *ForumUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetShortName sets the "short_name" field.
func (fuo *ForumUpdateOne) SetShortName(s string) *ForumUpdateOne {
	fuo.mutation.SetShortName(s)
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *ForumUpdateOne) SetDescription(s string) *ForumUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (fuo *ForumUpdateOne) SetGroupID(id int) *ForumUpdateOne {
	fuo.mutation.SetGroupID(id)
	return fuo
}

// SetGroup sets the "group" edge to the Group entity.
func (fuo *ForumUpdateOne) SetGroup(g *Group) *ForumUpdateOne {
	return fuo.SetGroupID(g.ID)
}

// AddPostIDs adds the "posts" edge to the ForumPost entity by IDs.
func (fuo *ForumUpdateOne) AddPostIDs(ids ...int) *ForumUpdateOne {
	fuo.mutation.AddPostIDs(ids...)
	return fuo
}

// AddPosts adds the "posts" edges to the ForumPost entity.
func (fuo *ForumUpdateOne) AddPosts(f ...*ForumPost) *ForumUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddPostIDs(ids...)
}

// Mutation returns the ForumMutation object of the builder.
func (fuo *ForumUpdateOne) Mutation() *ForumMutation {
	return fuo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (fuo *ForumUpdateOne) ClearGroup() *ForumUpdateOne {
	fuo.mutation.ClearGroup()
	return fuo
}

// ClearPosts clears all "posts" edges to the ForumPost entity.
func (fuo *ForumUpdateOne) ClearPosts() *ForumUpdateOne {
	fuo.mutation.ClearPosts()
	return fuo
}

// RemovePostIDs removes the "posts" edge to ForumPost entities by IDs.
func (fuo *ForumUpdateOne) RemovePostIDs(ids ...int) *ForumUpdateOne {
	fuo.mutation.RemovePostIDs(ids...)
	return fuo
}

// RemovePosts removes "posts" edges to ForumPost entities.
func (fuo *ForumUpdateOne) RemovePosts(f ...*ForumPost) *ForumUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemovePostIDs(ids...)
}

// Where appends a list predicates to the ForumUpdate builder.
func (fuo *ForumUpdateOne) Where(ps ...predicate.Forum) *ForumUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *ForumUpdateOne) Select(field string, fields ...string) *ForumUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Forum entity.
func (fuo *ForumUpdateOne) Save(ctx context.Context) (*Forum, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *ForumUpdateOne) SaveX(ctx context.Context) *Forum {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *ForumUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *ForumUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *ForumUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := forum.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Forum.name": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.ShortName(); ok {
		if err := forum.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "short_name", err: fmt.Errorf(`ent: validator failed for field "Forum.short_name": %w`, err)}
		}
	}
	if _, ok := fuo.mutation.GroupID(); fuo.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Forum.group"`)
	}
	return nil
}

func (fuo *ForumUpdateOne) sqlSave(ctx context.Context) (_node *Forum, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(forum.Table, forum.Columns, sqlgraph.NewFieldSpec(forum.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Forum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, forum.FieldID)
		for _, f := range fields {
			if !forum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != forum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(forum.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ShortName(); ok {
		_spec.SetField(forum.FieldShortName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(forum.FieldDescription, field.TypeString, value)
	}
	if fuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forum.GroupTable,
			Columns: []string{forum.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forum.GroupTable,
			Columns: []string{forum.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forum.PostsTable,
			Columns: []string{forum.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !fuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forum.PostsTable,
			Columns: []string{forum.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forum.PostsTable,
			Columns: []string{forum.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forumpost.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Forum{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
