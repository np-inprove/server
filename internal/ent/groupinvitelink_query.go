// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	entgroup "github.com/np-inprove/server/internal/ent/group"
	"github.com/np-inprove/server/internal/ent/groupinvitelink"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// GroupInviteLinkQuery is the builder for querying GroupInviteLink entities.
type GroupInviteLinkQuery struct {
	config
	ctx        *QueryContext
	order      []groupinvitelink.OrderOption
	inters     []Interceptor
	predicates []predicate.GroupInviteLink
	withGroup  *GroupQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GroupInviteLinkQuery builder.
func (gilq *GroupInviteLinkQuery) Where(ps ...predicate.GroupInviteLink) *GroupInviteLinkQuery {
	gilq.predicates = append(gilq.predicates, ps...)
	return gilq
}

// Limit the number of records to be returned by this query.
func (gilq *GroupInviteLinkQuery) Limit(limit int) *GroupInviteLinkQuery {
	gilq.ctx.Limit = &limit
	return gilq
}

// Offset to start from.
func (gilq *GroupInviteLinkQuery) Offset(offset int) *GroupInviteLinkQuery {
	gilq.ctx.Offset = &offset
	return gilq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gilq *GroupInviteLinkQuery) Unique(unique bool) *GroupInviteLinkQuery {
	gilq.ctx.Unique = &unique
	return gilq
}

// Order specifies how the records should be ordered.
func (gilq *GroupInviteLinkQuery) Order(o ...groupinvitelink.OrderOption) *GroupInviteLinkQuery {
	gilq.order = append(gilq.order, o...)
	return gilq
}

// QueryGroup chains the current query on the "group" edge.
func (gilq *GroupInviteLinkQuery) QueryGroup() *GroupQuery {
	query := (&GroupClient{config: gilq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gilq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gilq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(groupinvitelink.Table, groupinvitelink.FieldID, selector),
			sqlgraph.To(entgroup.Table, entgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupinvitelink.GroupTable, groupinvitelink.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(gilq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GroupInviteLink entity from the query.
// Returns a *NotFoundError when no GroupInviteLink was found.
func (gilq *GroupInviteLinkQuery) First(ctx context.Context) (*GroupInviteLink, error) {
	nodes, err := gilq.Limit(1).All(setContextOp(ctx, gilq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{groupinvitelink.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gilq *GroupInviteLinkQuery) FirstX(ctx context.Context) *GroupInviteLink {
	node, err := gilq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GroupInviteLink ID from the query.
// Returns a *NotFoundError when no GroupInviteLink ID was found.
func (gilq *GroupInviteLinkQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gilq.Limit(1).IDs(setContextOp(ctx, gilq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{groupinvitelink.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gilq *GroupInviteLinkQuery) FirstIDX(ctx context.Context) int {
	id, err := gilq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GroupInviteLink entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GroupInviteLink entity is found.
// Returns a *NotFoundError when no GroupInviteLink entities are found.
func (gilq *GroupInviteLinkQuery) Only(ctx context.Context) (*GroupInviteLink, error) {
	nodes, err := gilq.Limit(2).All(setContextOp(ctx, gilq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{groupinvitelink.Label}
	default:
		return nil, &NotSingularError{groupinvitelink.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gilq *GroupInviteLinkQuery) OnlyX(ctx context.Context) *GroupInviteLink {
	node, err := gilq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GroupInviteLink ID in the query.
// Returns a *NotSingularError when more than one GroupInviteLink ID is found.
// Returns a *NotFoundError when no entities are found.
func (gilq *GroupInviteLinkQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gilq.Limit(2).IDs(setContextOp(ctx, gilq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{groupinvitelink.Label}
	default:
		err = &NotSingularError{groupinvitelink.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gilq *GroupInviteLinkQuery) OnlyIDX(ctx context.Context) int {
	id, err := gilq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GroupInviteLinks.
func (gilq *GroupInviteLinkQuery) All(ctx context.Context) ([]*GroupInviteLink, error) {
	ctx = setContextOp(ctx, gilq.ctx, "All")
	if err := gilq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GroupInviteLink, *GroupInviteLinkQuery]()
	return withInterceptors[[]*GroupInviteLink](ctx, gilq, qr, gilq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gilq *GroupInviteLinkQuery) AllX(ctx context.Context) []*GroupInviteLink {
	nodes, err := gilq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GroupInviteLink IDs.
func (gilq *GroupInviteLinkQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gilq.ctx.Unique == nil && gilq.path != nil {
		gilq.Unique(true)
	}
	ctx = setContextOp(ctx, gilq.ctx, "IDs")
	if err = gilq.Select(groupinvitelink.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gilq *GroupInviteLinkQuery) IDsX(ctx context.Context) []int {
	ids, err := gilq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gilq *GroupInviteLinkQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gilq.ctx, "Count")
	if err := gilq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gilq, querierCount[*GroupInviteLinkQuery](), gilq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gilq *GroupInviteLinkQuery) CountX(ctx context.Context) int {
	count, err := gilq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gilq *GroupInviteLinkQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gilq.ctx, "Exist")
	switch _, err := gilq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gilq *GroupInviteLinkQuery) ExistX(ctx context.Context) bool {
	exist, err := gilq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GroupInviteLinkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gilq *GroupInviteLinkQuery) Clone() *GroupInviteLinkQuery {
	if gilq == nil {
		return nil
	}
	return &GroupInviteLinkQuery{
		config:     gilq.config,
		ctx:        gilq.ctx.Clone(),
		order:      append([]groupinvitelink.OrderOption{}, gilq.order...),
		inters:     append([]Interceptor{}, gilq.inters...),
		predicates: append([]predicate.GroupInviteLink{}, gilq.predicates...),
		withGroup:  gilq.withGroup.Clone(),
		// clone intermediate query.
		sql:  gilq.sql.Clone(),
		path: gilq.path,
	}
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (gilq *GroupInviteLinkQuery) WithGroup(opts ...func(*GroupQuery)) *GroupInviteLinkQuery {
	query := (&GroupClient{config: gilq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gilq.withGroup = query
	return gilq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GroupInviteLink.Query().
//		GroupBy(groupinvitelink.FieldCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gilq *GroupInviteLinkQuery) GroupBy(field string, fields ...string) *GroupInviteLinkGroupBy {
	gilq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GroupInviteLinkGroupBy{build: gilq}
	grbuild.flds = &gilq.ctx.Fields
	grbuild.label = groupinvitelink.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//	}
//
//	client.GroupInviteLink.Query().
//		Select(groupinvitelink.FieldCode).
//		Scan(ctx, &v)
func (gilq *GroupInviteLinkQuery) Select(fields ...string) *GroupInviteLinkSelect {
	gilq.ctx.Fields = append(gilq.ctx.Fields, fields...)
	sbuild := &GroupInviteLinkSelect{GroupInviteLinkQuery: gilq}
	sbuild.label = groupinvitelink.Label
	sbuild.flds, sbuild.scan = &gilq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GroupInviteLinkSelect configured with the given aggregations.
func (gilq *GroupInviteLinkQuery) Aggregate(fns ...AggregateFunc) *GroupInviteLinkSelect {
	return gilq.Select().Aggregate(fns...)
}

func (gilq *GroupInviteLinkQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gilq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gilq); err != nil {
				return err
			}
		}
	}
	for _, f := range gilq.ctx.Fields {
		if !groupinvitelink.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gilq.path != nil {
		prev, err := gilq.path(ctx)
		if err != nil {
			return err
		}
		gilq.sql = prev
	}
	return nil
}

func (gilq *GroupInviteLinkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GroupInviteLink, error) {
	var (
		nodes       = []*GroupInviteLink{}
		withFKs     = gilq.withFKs
		_spec       = gilq.querySpec()
		loadedTypes = [1]bool{
			gilq.withGroup != nil,
		}
	)
	if gilq.withGroup != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, groupinvitelink.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GroupInviteLink).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GroupInviteLink{config: gilq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gilq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gilq.withGroup; query != nil {
		if err := gilq.loadGroup(ctx, query, nodes, nil,
			func(n *GroupInviteLink, e *Group) { n.Edges.Group = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gilq *GroupInviteLinkQuery) loadGroup(ctx context.Context, query *GroupQuery, nodes []*GroupInviteLink, init func(*GroupInviteLink), assign func(*GroupInviteLink, *Group)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GroupInviteLink)
	for i := range nodes {
		if nodes[i].group_invites == nil {
			continue
		}
		fk := *nodes[i].group_invites
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entgroup.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_invites" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gilq *GroupInviteLinkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gilq.querySpec()
	_spec.Node.Columns = gilq.ctx.Fields
	if len(gilq.ctx.Fields) > 0 {
		_spec.Unique = gilq.ctx.Unique != nil && *gilq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gilq.driver, _spec)
}

func (gilq *GroupInviteLinkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(groupinvitelink.Table, groupinvitelink.Columns, sqlgraph.NewFieldSpec(groupinvitelink.FieldID, field.TypeInt))
	_spec.From = gilq.sql
	if unique := gilq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gilq.path != nil {
		_spec.Unique = true
	}
	if fields := gilq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupinvitelink.FieldID)
		for i := range fields {
			if fields[i] != groupinvitelink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gilq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gilq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gilq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gilq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gilq *GroupInviteLinkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gilq.driver.Dialect())
	t1 := builder.Table(groupinvitelink.Table)
	columns := gilq.ctx.Fields
	if len(columns) == 0 {
		columns = groupinvitelink.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gilq.sql != nil {
		selector = gilq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gilq.ctx.Unique != nil && *gilq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gilq.predicates {
		p(selector)
	}
	for _, p := range gilq.order {
		p(selector)
	}
	if offset := gilq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gilq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GroupInviteLinkGroupBy is the group-by builder for GroupInviteLink entities.
type GroupInviteLinkGroupBy struct {
	selector
	build *GroupInviteLinkQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gilgb *GroupInviteLinkGroupBy) Aggregate(fns ...AggregateFunc) *GroupInviteLinkGroupBy {
	gilgb.fns = append(gilgb.fns, fns...)
	return gilgb
}

// Scan applies the selector query and scans the result into the given value.
func (gilgb *GroupInviteLinkGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gilgb.build.ctx, "GroupBy")
	if err := gilgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupInviteLinkQuery, *GroupInviteLinkGroupBy](ctx, gilgb.build, gilgb, gilgb.build.inters, v)
}

func (gilgb *GroupInviteLinkGroupBy) sqlScan(ctx context.Context, root *GroupInviteLinkQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gilgb.fns))
	for _, fn := range gilgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gilgb.flds)+len(gilgb.fns))
		for _, f := range *gilgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gilgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gilgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GroupInviteLinkSelect is the builder for selecting fields of GroupInviteLink entities.
type GroupInviteLinkSelect struct {
	*GroupInviteLinkQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gils *GroupInviteLinkSelect) Aggregate(fns ...AggregateFunc) *GroupInviteLinkSelect {
	gils.fns = append(gils.fns, fns...)
	return gils
}

// Scan applies the selector query and scans the result into the given value.
func (gils *GroupInviteLinkSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gils.ctx, "Select")
	if err := gils.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupInviteLinkQuery, *GroupInviteLinkSelect](ctx, gils.GroupInviteLinkQuery, gils, gils.inters, v)
}

func (gils *GroupInviteLinkSelect) sqlScan(ctx context.Context, root *GroupInviteLinkQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gils.fns))
	for _, fn := range gils.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gils.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gils.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
