// Code generated by ent, DO NOT EDIT.

package institution

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldName, v))
}

// ShortName applies equality check predicate on the "short_name" field. It's identical to ShortNameEQ.
func ShortName(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldShortName, v))
}

// AdminDomain applies equality check predicate on the "admin_domain" field. It's identical to AdminDomainEQ.
func AdminDomain(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldAdminDomain, v))
}

// StudentDomain applies equality check predicate on the "student_domain" field. It's identical to StudentDomainEQ.
func StudentDomain(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldStudentDomain, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldName, v))
}

// ShortNameEQ applies the EQ predicate on the "short_name" field.
func ShortNameEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldShortName, v))
}

// ShortNameNEQ applies the NEQ predicate on the "short_name" field.
func ShortNameNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldShortName, v))
}

// ShortNameIn applies the In predicate on the "short_name" field.
func ShortNameIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldShortName, vs...))
}

// ShortNameNotIn applies the NotIn predicate on the "short_name" field.
func ShortNameNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldShortName, vs...))
}

// ShortNameGT applies the GT predicate on the "short_name" field.
func ShortNameGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldShortName, v))
}

// ShortNameGTE applies the GTE predicate on the "short_name" field.
func ShortNameGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldShortName, v))
}

// ShortNameLT applies the LT predicate on the "short_name" field.
func ShortNameLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldShortName, v))
}

// ShortNameLTE applies the LTE predicate on the "short_name" field.
func ShortNameLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldShortName, v))
}

// ShortNameContains applies the Contains predicate on the "short_name" field.
func ShortNameContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldShortName, v))
}

// ShortNameHasPrefix applies the HasPrefix predicate on the "short_name" field.
func ShortNameHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldShortName, v))
}

// ShortNameHasSuffix applies the HasSuffix predicate on the "short_name" field.
func ShortNameHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldShortName, v))
}

// ShortNameEqualFold applies the EqualFold predicate on the "short_name" field.
func ShortNameEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldShortName, v))
}

// ShortNameContainsFold applies the ContainsFold predicate on the "short_name" field.
func ShortNameContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldShortName, v))
}

// AdminDomainEQ applies the EQ predicate on the "admin_domain" field.
func AdminDomainEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldAdminDomain, v))
}

// AdminDomainNEQ applies the NEQ predicate on the "admin_domain" field.
func AdminDomainNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldAdminDomain, v))
}

// AdminDomainIn applies the In predicate on the "admin_domain" field.
func AdminDomainIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldAdminDomain, vs...))
}

// AdminDomainNotIn applies the NotIn predicate on the "admin_domain" field.
func AdminDomainNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldAdminDomain, vs...))
}

// AdminDomainGT applies the GT predicate on the "admin_domain" field.
func AdminDomainGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldAdminDomain, v))
}

// AdminDomainGTE applies the GTE predicate on the "admin_domain" field.
func AdminDomainGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldAdminDomain, v))
}

// AdminDomainLT applies the LT predicate on the "admin_domain" field.
func AdminDomainLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldAdminDomain, v))
}

// AdminDomainLTE applies the LTE predicate on the "admin_domain" field.
func AdminDomainLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldAdminDomain, v))
}

// AdminDomainContains applies the Contains predicate on the "admin_domain" field.
func AdminDomainContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldAdminDomain, v))
}

// AdminDomainHasPrefix applies the HasPrefix predicate on the "admin_domain" field.
func AdminDomainHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldAdminDomain, v))
}

// AdminDomainHasSuffix applies the HasSuffix predicate on the "admin_domain" field.
func AdminDomainHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldAdminDomain, v))
}

// AdminDomainEqualFold applies the EqualFold predicate on the "admin_domain" field.
func AdminDomainEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldAdminDomain, v))
}

// AdminDomainContainsFold applies the ContainsFold predicate on the "admin_domain" field.
func AdminDomainContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldAdminDomain, v))
}

// StudentDomainEQ applies the EQ predicate on the "student_domain" field.
func StudentDomainEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEQ(FieldStudentDomain, v))
}

// StudentDomainNEQ applies the NEQ predicate on the "student_domain" field.
func StudentDomainNEQ(v string) predicate.Institution {
	return predicate.Institution(sql.FieldNEQ(FieldStudentDomain, v))
}

// StudentDomainIn applies the In predicate on the "student_domain" field.
func StudentDomainIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldIn(FieldStudentDomain, vs...))
}

// StudentDomainNotIn applies the NotIn predicate on the "student_domain" field.
func StudentDomainNotIn(vs ...string) predicate.Institution {
	return predicate.Institution(sql.FieldNotIn(FieldStudentDomain, vs...))
}

// StudentDomainGT applies the GT predicate on the "student_domain" field.
func StudentDomainGT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGT(FieldStudentDomain, v))
}

// StudentDomainGTE applies the GTE predicate on the "student_domain" field.
func StudentDomainGTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldGTE(FieldStudentDomain, v))
}

// StudentDomainLT applies the LT predicate on the "student_domain" field.
func StudentDomainLT(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLT(FieldStudentDomain, v))
}

// StudentDomainLTE applies the LTE predicate on the "student_domain" field.
func StudentDomainLTE(v string) predicate.Institution {
	return predicate.Institution(sql.FieldLTE(FieldStudentDomain, v))
}

// StudentDomainContains applies the Contains predicate on the "student_domain" field.
func StudentDomainContains(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContains(FieldStudentDomain, v))
}

// StudentDomainHasPrefix applies the HasPrefix predicate on the "student_domain" field.
func StudentDomainHasPrefix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasPrefix(FieldStudentDomain, v))
}

// StudentDomainHasSuffix applies the HasSuffix predicate on the "student_domain" field.
func StudentDomainHasSuffix(v string) predicate.Institution {
	return predicate.Institution(sql.FieldHasSuffix(FieldStudentDomain, v))
}

// StudentDomainEqualFold applies the EqualFold predicate on the "student_domain" field.
func StudentDomainEqualFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldEqualFold(FieldStudentDomain, v))
}

// StudentDomainContainsFold applies the ContainsFold predicate on the "student_domain" field.
func StudentDomainContainsFold(v string) predicate.Institution {
	return predicate.Institution(sql.FieldContainsFold(FieldStudentDomain, v))
}

// HasAdmins applies the HasEdge predicate on the "admins" edge.
func HasAdmins() predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AdminsTable, AdminsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminsWith applies the HasEdge predicate on the "admins" edge with a given conditions (other predicates).
func HasAdminsWith(preds ...predicate.User) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := newAdminsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVouchers applies the HasEdge predicate on the "vouchers" edge.
func HasVouchers() predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VouchersTable, VouchersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVouchersWith applies the HasEdge predicate on the "vouchers" edge with a given conditions (other predicates).
func HasVouchersWith(preds ...predicate.Voucher) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := newVouchersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccessories applies the HasEdge predicate on the "accessories" edge.
func HasAccessories() predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccessoriesTable, AccessoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccessoriesWith applies the HasEdge predicate on the "accessories" edge with a given conditions (other predicates).
func HasAccessoriesWith(preds ...predicate.Accessory) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := newAccessoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartments applies the HasEdge predicate on the "departments" edge.
func HasDepartments() predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DepartmentsTable, DepartmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentsWith applies the HasEdge predicate on the "departments" edge with a given conditions (other predicates).
func HasDepartmentsWith(preds ...predicate.Department) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		step := newDepartmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Institution) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Institution) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Institution) predicate.Institution {
	return predicate.Institution(func(s *sql.Selector) {
		p(s.Not())
	})
}
