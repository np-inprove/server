// Code generated by ent, DO NOT EDIT.

package institution

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the institution type in the database.
	Label = "institution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeAdmins holds the string denoting the admins edge name in mutations.
	EdgeAdmins = "admins"
	// EdgePrizes holds the string denoting the prizes edge name in mutations.
	EdgePrizes = "prizes"
	// EdgeAcademicSchools holds the string denoting the academic_schools edge name in mutations.
	EdgeAcademicSchools = "academic_schools"
	// Table holds the table name of the institution in the database.
	Table = "institutions"
	// AdminsTable is the table that holds the admins relation/edge. The primary key declared below.
	AdminsTable = "institution_admins"
	// AdminsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AdminsInverseTable = "users"
	// PrizesTable is the table that holds the prizes relation/edge.
	PrizesTable = "prizes"
	// PrizesInverseTable is the table name for the Prize entity.
	// It exists in this package in order to avoid circular dependency with the "prize" package.
	PrizesInverseTable = "prizes"
	// PrizesColumn is the table column denoting the prizes relation/edge.
	PrizesColumn = "institution_prizes"
	// AcademicSchoolsTable is the table that holds the academic_schools relation/edge.
	AcademicSchoolsTable = "academic_schools"
	// AcademicSchoolsInverseTable is the table name for the AcademicSchool entity.
	// It exists in this package in order to avoid circular dependency with the "academicschool" package.
	AcademicSchoolsInverseTable = "academic_schools"
	// AcademicSchoolsColumn is the table column denoting the academic_schools relation/edge.
	AcademicSchoolsColumn = "institution_academic_schools"
)

// Columns holds all SQL columns for institution fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// AdminsPrimaryKey and AdminsColumn2 are the table columns denoting the
	// primary key for the admins relation (M2M).
	AdminsPrimaryKey = []string{"institution_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Institution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAdminsCount orders the results by admins count.
func ByAdminsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAdminsStep(), opts...)
	}
}

// ByAdmins orders the results by admins terms.
func ByAdmins(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAdminsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPrizesCount orders the results by prizes count.
func ByPrizesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrizesStep(), opts...)
	}
}

// ByPrizes orders the results by prizes terms.
func ByPrizes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrizesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAcademicSchoolsCount orders the results by academic_schools count.
func ByAcademicSchoolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAcademicSchoolsStep(), opts...)
	}
}

// ByAcademicSchools orders the results by academic_schools terms.
func ByAcademicSchools(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAcademicSchoolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAdminsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AdminsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AdminsTable, AdminsPrimaryKey...),
	)
}
func newPrizesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrizesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PrizesTable, PrizesColumn),
	)
}
func newAcademicSchoolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AcademicSchoolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AcademicSchoolsTable, AcademicSchoolsColumn),
	)
}
