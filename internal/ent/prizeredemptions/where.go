// Code generated by ent, DO NOT EDIT.

package prizeredemptions

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/np-inprove/server/internal/ent/predicate"
)

// RedeemedAt applies equality check predicate on the "redeemed_at" field. It's identical to RedeemedAtEQ.
func RedeemedAt(v time.Time) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldEQ(FieldRedeemedAt, v))
}

// PrizeID applies equality check predicate on the "prize_id" field. It's identical to PrizeIDEQ.
func PrizeID(v int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldEQ(FieldPrizeID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldEQ(FieldUserID, v))
}

// RedeemedAtEQ applies the EQ predicate on the "redeemed_at" field.
func RedeemedAtEQ(v time.Time) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldEQ(FieldRedeemedAt, v))
}

// RedeemedAtNEQ applies the NEQ predicate on the "redeemed_at" field.
func RedeemedAtNEQ(v time.Time) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldNEQ(FieldRedeemedAt, v))
}

// RedeemedAtIn applies the In predicate on the "redeemed_at" field.
func RedeemedAtIn(vs ...time.Time) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldIn(FieldRedeemedAt, vs...))
}

// RedeemedAtNotIn applies the NotIn predicate on the "redeemed_at" field.
func RedeemedAtNotIn(vs ...time.Time) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldNotIn(FieldRedeemedAt, vs...))
}

// RedeemedAtGT applies the GT predicate on the "redeemed_at" field.
func RedeemedAtGT(v time.Time) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldGT(FieldRedeemedAt, v))
}

// RedeemedAtGTE applies the GTE predicate on the "redeemed_at" field.
func RedeemedAtGTE(v time.Time) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldGTE(FieldRedeemedAt, v))
}

// RedeemedAtLT applies the LT predicate on the "redeemed_at" field.
func RedeemedAtLT(v time.Time) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldLT(FieldRedeemedAt, v))
}

// RedeemedAtLTE applies the LTE predicate on the "redeemed_at" field.
func RedeemedAtLTE(v time.Time) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldLTE(FieldRedeemedAt, v))
}

// PrizeIDEQ applies the EQ predicate on the "prize_id" field.
func PrizeIDEQ(v int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldEQ(FieldPrizeID, v))
}

// PrizeIDNEQ applies the NEQ predicate on the "prize_id" field.
func PrizeIDNEQ(v int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldNEQ(FieldPrizeID, v))
}

// PrizeIDIn applies the In predicate on the "prize_id" field.
func PrizeIDIn(vs ...int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldIn(FieldPrizeID, vs...))
}

// PrizeIDNotIn applies the NotIn predicate on the "prize_id" field.
func PrizeIDNotIn(vs ...int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldNotIn(FieldPrizeID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(sql.FieldNotIn(FieldUserID, vs...))
}

// HasPrize applies the HasEdge predicate on the "prize" edge.
func HasPrize() predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, PrizeColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, PrizeTable, PrizeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrizeWith applies the HasEdge predicate on the "prize" edge with a given conditions (other predicates).
func HasPrizeWith(preds ...predicate.Prize) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(func(s *sql.Selector) {
		step := newPrizeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PrizeRedemptions) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PrizeRedemptions) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PrizeRedemptions) predicate.PrizeRedemptions {
	return predicate.PrizeRedemptions(func(s *sql.Selector) {
		p(s.Not())
	})
}
