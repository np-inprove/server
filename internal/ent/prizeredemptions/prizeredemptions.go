// Code generated by ent, DO NOT EDIT.

package prizeredemptions

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the prizeredemptions type in the database.
	Label = "prize_redemptions"
	// FieldRedeemedAt holds the string denoting the redeemed_at field in the database.
	FieldRedeemedAt = "redeemed_at"
	// FieldPrizeID holds the string denoting the prize_id field in the database.
	FieldPrizeID = "prize_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgePrize holds the string denoting the prize edge name in mutations.
	EdgePrize = "prize"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// PrizeFieldID holds the string denoting the ID field of the Prize.
	PrizeFieldID = "id"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// Table holds the table name of the prizeredemptions in the database.
	Table = "prize_redemptions"
	// PrizeTable is the table that holds the prize relation/edge.
	PrizeTable = "prize_redemptions"
	// PrizeInverseTable is the table name for the Prize entity.
	// It exists in this package in order to avoid circular dependency with the "prize" package.
	PrizeInverseTable = "prizes"
	// PrizeColumn is the table column denoting the prize relation/edge.
	PrizeColumn = "prize_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "prize_redemptions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for prizeredemptions fields.
var Columns = []string{
	FieldRedeemedAt,
	FieldPrizeID,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PrizeRedemptions queries.
type OrderOption func(*sql.Selector)

// ByRedeemedAt orders the results by the redeemed_at field.
func ByRedeemedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedeemedAt, opts...).ToFunc()
}

// ByPrizeID orders the results by the prize_id field.
func ByPrizeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrizeID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPrizeField orders the results by prize field.
func ByPrizeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrizeStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newPrizeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, PrizeColumn),
		sqlgraph.To(PrizeInverseTable, PrizeFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PrizeTable, PrizeColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
