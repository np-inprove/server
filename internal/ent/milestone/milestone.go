// Code generated by ent, DO NOT EDIT.

package milestone

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the milestone type in the database.
	Label = "milestone"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTargetCompletionTime holds the string denoting the target_completion_time field in the database.
	FieldTargetCompletionTime = "target_completion_time"
	// EdgeStudyPlan holds the string denoting the study_plan edge name in mutations.
	EdgeStudyPlan = "study_plan"
	// Table holds the table name of the milestone in the database.
	Table = "milestones"
	// StudyPlanTable is the table that holds the study_plan relation/edge.
	StudyPlanTable = "milestones"
	// StudyPlanInverseTable is the table name for the StudyPlan entity.
	// It exists in this package in order to avoid circular dependency with the "studyplan" package.
	StudyPlanInverseTable = "study_plans"
	// StudyPlanColumn is the table column denoting the study_plan relation/edge.
	StudyPlanColumn = "study_plan_milestones"
)

// Columns holds all SQL columns for milestone fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTargetCompletionTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "milestones"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"study_plan_milestones",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Milestone queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTargetCompletionTime orders the results by the target_completion_time field.
func ByTargetCompletionTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetCompletionTime, opts...).ToFunc()
}

// ByStudyPlanField orders the results by study_plan field.
func ByStudyPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudyPlanStep(), sql.OrderByField(field, opts...))
	}
}
func newStudyPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudyPlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StudyPlanTable, StudyPlanColumn),
	)
}
