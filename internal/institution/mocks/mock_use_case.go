// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/np-inprove/server/internal/ent"
	entityinstitution "github.com/np-inprove/server/internal/entity/institution"

	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// CreateInstitution provides a mock function with given fields: ctx, name, shortName, description
func (_m *MockUseCase) CreateInstitution(ctx context.Context, name string, shortName string, description string) (*ent.Institution, error) {
	ret := _m.Called(ctx, name, shortName, description)

	var r0 *ent.Institution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*ent.Institution, error)); ok {
		return rf(ctx, name, shortName, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *ent.Institution); ok {
		r0 = rf(ctx, name, shortName, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Institution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, shortName, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_CreateInstitution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInstitution'
type MockUseCase_CreateInstitution_Call struct {
	*mock.Call
}

// CreateInstitution is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - shortName string
//   - description string
func (_e *MockUseCase_Expecter) CreateInstitution(ctx interface{}, name interface{}, shortName interface{}, description interface{}) *MockUseCase_CreateInstitution_Call {
	return &MockUseCase_CreateInstitution_Call{Call: _e.mock.On("CreateInstitution", ctx, name, shortName, description)}
}

func (_c *MockUseCase_CreateInstitution_Call) Run(run func(ctx context.Context, name string, shortName string, description string)) *MockUseCase_CreateInstitution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUseCase_CreateInstitution_Call) Return(_a0 *ent.Institution, _a1 error) *MockUseCase_CreateInstitution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_CreateInstitution_Call) RunAndReturn(run func(context.Context, string, string, string) (*ent.Institution, error)) *MockUseCase_CreateInstitution_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInviteLink provides a mock function with given fields: ctx, principal, shortName, role
func (_m *MockUseCase) CreateInviteLink(ctx context.Context, principal string, shortName string, role entityinstitution.Role) (*ent.InstitutionInviteLink, error) {
	ret := _m.Called(ctx, principal, shortName, role)

	var r0 *ent.InstitutionInviteLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, entityinstitution.Role) (*ent.InstitutionInviteLink, error)); ok {
		return rf(ctx, principal, shortName, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, entityinstitution.Role) *ent.InstitutionInviteLink); ok {
		r0 = rf(ctx, principal, shortName, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.InstitutionInviteLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, entityinstitution.Role) error); ok {
		r1 = rf(ctx, principal, shortName, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_CreateInviteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInviteLink'
type MockUseCase_CreateInviteLink_Call struct {
	*mock.Call
}

// CreateInviteLink is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
//   - role entityinstitution.Role
func (_e *MockUseCase_Expecter) CreateInviteLink(ctx interface{}, principal interface{}, shortName interface{}, role interface{}) *MockUseCase_CreateInviteLink_Call {
	return &MockUseCase_CreateInviteLink_Call{Call: _e.mock.On("CreateInviteLink", ctx, principal, shortName, role)}
}

func (_c *MockUseCase_CreateInviteLink_Call) Run(run func(ctx context.Context, principal string, shortName string, role entityinstitution.Role)) *MockUseCase_CreateInviteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(entityinstitution.Role))
	})
	return _c
}

func (_c *MockUseCase_CreateInviteLink_Call) Return(_a0 *ent.InstitutionInviteLink, _a1 error) *MockUseCase_CreateInviteLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_CreateInviteLink_Call) RunAndReturn(run func(context.Context, string, string, entityinstitution.Role) (*ent.InstitutionInviteLink, error)) *MockUseCase_CreateInviteLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstitution provides a mock function with given fields: ctx, shortName
func (_m *MockUseCase) DeleteInstitution(ctx context.Context, shortName string) error {
	ret := _m.Called(ctx, shortName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_DeleteInstitution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstitution'
type MockUseCase_DeleteInstitution_Call struct {
	*mock.Call
}

// DeleteInstitution is a helper method to define mock.On call
//   - ctx context.Context
//   - shortName string
func (_e *MockUseCase_Expecter) DeleteInstitution(ctx interface{}, shortName interface{}) *MockUseCase_DeleteInstitution_Call {
	return &MockUseCase_DeleteInstitution_Call{Call: _e.mock.On("DeleteInstitution", ctx, shortName)}
}

func (_c *MockUseCase_DeleteInstitution_Call) Run(run func(ctx context.Context, shortName string)) *MockUseCase_DeleteInstitution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUseCase_DeleteInstitution_Call) Return(_a0 error) *MockUseCase_DeleteInstitution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_DeleteInstitution_Call) RunAndReturn(run func(context.Context, string) error) *MockUseCase_DeleteInstitution_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInviteLink provides a mock function with given fields: ctx, principal, shortName, code
func (_m *MockUseCase) DeleteInviteLink(ctx context.Context, principal string, shortName string, code string) error {
	ret := _m.Called(ctx, principal, shortName, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, principal, shortName, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_DeleteInviteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInviteLink'
type MockUseCase_DeleteInviteLink_Call struct {
	*mock.Call
}

// DeleteInviteLink is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
//   - code string
func (_e *MockUseCase_Expecter) DeleteInviteLink(ctx interface{}, principal interface{}, shortName interface{}, code interface{}) *MockUseCase_DeleteInviteLink_Call {
	return &MockUseCase_DeleteInviteLink_Call{Call: _e.mock.On("DeleteInviteLink", ctx, principal, shortName, code)}
}

func (_c *MockUseCase_DeleteInviteLink_Call) Run(run func(ctx context.Context, principal string, shortName string, code string)) *MockUseCase_DeleteInviteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUseCase_DeleteInviteLink_Call) Return(_a0 error) *MockUseCase_DeleteInviteLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_DeleteInviteLink_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockUseCase_DeleteInviteLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetInviteLink provides a mock function with given fields: ctx, code
func (_m *MockUseCase) GetInviteLinkWithInstitution(ctx context.Context, code string) (*ent.InstitutionInviteLink, error) {
	ret := _m.Called(ctx, code)

	var r0 *ent.InstitutionInviteLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.InstitutionInviteLink, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.InstitutionInviteLink); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.InstitutionInviteLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetInviteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInviteLink'
type MockUseCase_GetInviteLink_Call struct {
	*mock.Call
}

// GetInviteLink is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockUseCase_Expecter) GetInviteLink(ctx interface{}, code interface{}) *MockUseCase_GetInviteLink_Call {
	return &MockUseCase_GetInviteLink_Call{Call: _e.mock.On("GetInviteLink", ctx, code)}
}

func (_c *MockUseCase_GetInviteLink_Call) Run(run func(ctx context.Context, code string)) *MockUseCase_GetInviteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUseCase_GetInviteLink_Call) Return(_a0 *ent.InstitutionInviteLink, _a1 error) *MockUseCase_GetInviteLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetInviteLink_Call) RunAndReturn(run func(context.Context, string) (*ent.InstitutionInviteLink, error)) *MockUseCase_GetInviteLink_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstitutions provides a mock function with given fields: ctx
func (_m *MockUseCase) ListInstitutions(ctx context.Context) ([]*ent.Institution, error) {
	ret := _m.Called(ctx)

	var r0 []*ent.Institution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ent.Institution, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.Institution); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Institution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_ListInstitutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstitutions'
type MockUseCase_ListInstitutions_Call struct {
	*mock.Call
}

// ListInstitutions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUseCase_Expecter) ListInstitutions(ctx interface{}) *MockUseCase_ListInstitutions_Call {
	return &MockUseCase_ListInstitutions_Call{Call: _e.mock.On("ListInstitutions", ctx)}
}

func (_c *MockUseCase_ListInstitutions_Call) Run(run func(ctx context.Context)) *MockUseCase_ListInstitutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUseCase_ListInstitutions_Call) Return(_a0 []*ent.Institution, _a1 error) *MockUseCase_ListInstitutions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_ListInstitutions_Call) RunAndReturn(run func(context.Context) ([]*ent.Institution, error)) *MockUseCase_ListInstitutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListInviteLinks provides a mock function with given fields: ctx, principal, shortName
func (_m *MockUseCase) ListInviteLinks(ctx context.Context, principal string, shortName string) ([]*ent.InstitutionInviteLink, error) {
	ret := _m.Called(ctx, principal, shortName)

	var r0 []*ent.InstitutionInviteLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*ent.InstitutionInviteLink, error)); ok {
		return rf(ctx, principal, shortName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*ent.InstitutionInviteLink); ok {
		r0 = rf(ctx, principal, shortName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.InstitutionInviteLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, principal, shortName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_ListInviteLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInviteLinks'
type MockUseCase_ListInviteLinks_Call struct {
	*mock.Call
}

// ListInviteLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
func (_e *MockUseCase_Expecter) ListInviteLinks(ctx interface{}, principal interface{}, shortName interface{}) *MockUseCase_ListInviteLinks_Call {
	return &MockUseCase_ListInviteLinks_Call{Call: _e.mock.On("ListInviteLinks", ctx, principal, shortName)}
}

func (_c *MockUseCase_ListInviteLinks_Call) Run(run func(ctx context.Context, principal string, shortName string)) *MockUseCase_ListInviteLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUseCase_ListInviteLinks_Call) Return(_a0 []*ent.InstitutionInviteLink, _a1 error) *MockUseCase_ListInviteLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_ListInviteLinks_Call) RunAndReturn(run func(context.Context, string, string) ([]*ent.InstitutionInviteLink, error)) *MockUseCase_ListInviteLinks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInstitution provides a mock function with given fields: ctx, principal, name, shortName, description
func (_m *MockUseCase) UpdateInstitution(ctx context.Context, principal string, name string, shortName string, description string) (*ent.Institution, error) {
	ret := _m.Called(ctx, principal, name, shortName, description)

	var r0 *ent.Institution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*ent.Institution, error)); ok {
		return rf(ctx, principal, name, shortName, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *ent.Institution); ok {
		r0 = rf(ctx, principal, name, shortName, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Institution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, principal, name, shortName, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_UpdateInstitution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInstitution'
type MockUseCase_UpdateInstitution_Call struct {
	*mock.Call
}

// UpdateInstitution is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - name string
//   - shortName string
//   - description string
func (_e *MockUseCase_Expecter) UpdateInstitution(ctx interface{}, principal interface{}, name interface{}, shortName interface{}, description interface{}) *MockUseCase_UpdateInstitution_Call {
	return &MockUseCase_UpdateInstitution_Call{Call: _e.mock.On("UpdateInstitution", ctx, principal, name, shortName, description)}
}

func (_c *MockUseCase_UpdateInstitution_Call) Run(run func(ctx context.Context, principal string, name string, shortName string, description string)) *MockUseCase_UpdateInstitution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockUseCase_UpdateInstitution_Call) Return(_a0 *ent.Institution, _a1 error) *MockUseCase_UpdateInstitution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_UpdateInstitution_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*ent.Institution, error)) *MockUseCase_UpdateInstitution_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUseCase(t mockConstructorTestingTNewMockUseCase) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
