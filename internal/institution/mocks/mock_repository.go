// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/np-inprove/server/internal/ent"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateInstitution provides a mock function with given fields: ctx, name, shortName, description
func (_m *MockRepository) CreateInstitution(ctx context.Context, name string, shortName string, description string) (*ent.Institution, error) {
	ret := _m.Called(ctx, name, shortName, description)

	var r0 *ent.Institution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*ent.Institution, error)); ok {
		return rf(ctx, name, shortName, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *ent.Institution); ok {
		r0 = rf(ctx, name, shortName, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Institution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, shortName, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateInstitution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInstitution'
type MockRepository_CreateInstitution_Call struct {
	*mock.Call
}

// CreateInstitution is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - shortName string
//   - description string
func (_e *MockRepository_Expecter) CreateInstitution(ctx interface{}, name interface{}, shortName interface{}, description interface{}) *MockRepository_CreateInstitution_Call {
	return &MockRepository_CreateInstitution_Call{Call: _e.mock.On("CreateInstitution", ctx, name, shortName, description)}
}

func (_c *MockRepository_CreateInstitution_Call) Run(run func(ctx context.Context, name string, shortName string, description string)) *MockRepository_CreateInstitution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRepository_CreateInstitution_Call) Return(_a0 *ent.Institution, _a1 error) *MockRepository_CreateInstitution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateInstitution_Call) RunAndReturn(run func(context.Context, string, string, string) (*ent.Institution, error)) *MockRepository_CreateInstitution_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstitution provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeleteInstitution(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteInstitution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstitution'
type MockRepository_DeleteInstitution_Call struct {
	*mock.Call
}

// DeleteInstitution is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockRepository_Expecter) DeleteInstitution(ctx interface{}, id interface{}) *MockRepository_DeleteInstitution_Call {
	return &MockRepository_DeleteInstitution_Call{Call: _e.mock.On("DeleteInstitution", ctx, id)}
}

func (_c *MockRepository_DeleteInstitution_Call) Run(run func(ctx context.Context, id int)) *MockRepository_DeleteInstitution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_DeleteInstitution_Call) Return(_a0 error) *MockRepository_DeleteInstitution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteInstitution_Call) RunAndReturn(run func(context.Context, int) error) *MockRepository_DeleteInstitution_Call {
	_c.Call.Return(run)
	return _c
}

// FindInstitution provides a mock function with given fields: ctx, shortName
func (_m *MockRepository) FindInstitution(ctx context.Context, shortName string) (*ent.Institution, error) {
	ret := _m.Called(ctx, shortName)

	var r0 *ent.Institution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.Institution, error)); ok {
		return rf(ctx, shortName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.Institution); ok {
		r0 = rf(ctx, shortName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Institution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindInstitution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindInstitution'
type MockRepository_FindInstitution_Call struct {
	*mock.Call
}

// FindInstitution is a helper method to define mock.On call
//   - ctx context.Context
//   - shortName string
func (_e *MockRepository_Expecter) FindInstitution(ctx interface{}, shortName interface{}) *MockRepository_FindInstitution_Call {
	return &MockRepository_FindInstitution_Call{Call: _e.mock.On("FindInstitution", ctx, shortName)}
}

func (_c *MockRepository_FindInstitution_Call) Run(run func(ctx context.Context, shortName string)) *MockRepository_FindInstitution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_FindInstitution_Call) Return(_a0 *ent.Institution, _a1 error) *MockRepository_FindInstitution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindInstitution_Call) RunAndReturn(run func(context.Context, string) (*ent.Institution, error)) *MockRepository_FindInstitution_Call {
	_c.Call.Return(run)
	return _c
}

// FindInstitutions provides a mock function with given fields: ctx
func (_m *MockRepository) FindInstitutions(ctx context.Context) ([]*ent.Institution, error) {
	ret := _m.Called(ctx)

	var r0 []*ent.Institution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ent.Institution, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.Institution); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Institution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindInstitutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindInstitutions'
type MockRepository_FindInstitutions_Call struct {
	*mock.Call
}

// FindInstitutions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) FindInstitutions(ctx interface{}) *MockRepository_FindInstitutions_Call {
	return &MockRepository_FindInstitutions_Call{Call: _e.mock.On("FindInstitutions", ctx)}
}

func (_c *MockRepository_FindInstitutions_Call) Run(run func(ctx context.Context)) *MockRepository_FindInstitutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_FindInstitutions_Call) Return(_a0 []*ent.Institution, _a1 error) *MockRepository_FindInstitutions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindInstitutions_Call) RunAndReturn(run func(context.Context) ([]*ent.Institution, error)) *MockRepository_FindInstitutions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInstitution provides a mock function with given fields: ctx, id, name, shortName, description
func (_m *MockRepository) UpdateInstitution(ctx context.Context, id int, name string, shortName string, description string) (*ent.Institution, error) {
	ret := _m.Called(ctx, id, name, shortName, description)

	var r0 *ent.Institution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string) (*ent.Institution, error)); ok {
		return rf(ctx, id, name, shortName, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string) *ent.Institution); ok {
		r0 = rf(ctx, id, name, shortName, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Institution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string, string) error); ok {
		r1 = rf(ctx, id, name, shortName, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_UpdateInstitution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInstitution'
type MockRepository_UpdateInstitution_Call struct {
	*mock.Call
}

// UpdateInstitution is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - name string
//   - shortName string
//   - description string
func (_e *MockRepository_Expecter) UpdateInstitution(ctx interface{}, id interface{}, name interface{}, shortName interface{}, description interface{}) *MockRepository_UpdateInstitution_Call {
	return &MockRepository_UpdateInstitution_Call{Call: _e.mock.On("UpdateInstitution", ctx, id, name, shortName, description)}
}

func (_c *MockRepository_UpdateInstitution_Call) Run(run func(ctx context.Context, id int, name string, shortName string, description string)) *MockRepository_UpdateInstitution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockRepository_UpdateInstitution_Call) Return(_a0 *ent.Institution, _a1 error) *MockRepository_UpdateInstitution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_UpdateInstitution_Call) RunAndReturn(run func(context.Context, int, string, string, string) (*ent.Institution, error)) *MockRepository_UpdateInstitution_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) WithTx(_a0 context.Context, _a1 func(context.Context) (interface{}, error)) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) (interface{}, error)) (interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) (interface{}, error)) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(context.Context) (interface{}, error)) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type MockRepository_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 func(context.Context)(interface{} , error)
func (_e *MockRepository_Expecter) WithTx(_a0 interface{}, _a1 interface{}) *MockRepository_WithTx_Call {
	return &MockRepository_WithTx_Call{Call: _e.mock.On("WithTx", _a0, _a1)}
}

func (_c *MockRepository_WithTx_Call) Run(run func(_a0 context.Context, _a1 func(context.Context) (interface{}, error))) *MockRepository_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) (interface{}, error)))
	})
	return _c
}

func (_c *MockRepository_WithTx_Call) Return(_a0 interface{}, _a1 error) *MockRepository_WithTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_WithTx_Call) RunAndReturn(run func(context.Context, func(context.Context) (interface{}, error)) (interface{}, error)) *MockRepository_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
