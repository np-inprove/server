// Code generated by mockery v2.28.1. DO NOT EDIT.

package dash

import (
	context "context"

	dash "github.com/np-inprove/server/internal/dash"
	ent "github.com/np-inprove/server/internal/ent"

	group "github.com/np-inprove/server/internal/ent/group"

	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// CreateGroup provides a mock function with given fields: ctx, adminEmail, groupType, opts
func (_m *MockUseCase) CreateGroup(ctx context.Context, adminEmail string, groupType string, opts ...dash.CreateGroupOption) (*ent.Group, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, adminEmail, groupType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...dash.CreateGroupOption) (*ent.Group, error)); ok {
		return rf(ctx, adminEmail, groupType, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...dash.CreateGroupOption) *ent.Group); ok {
		r0 = rf(ctx, adminEmail, groupType, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...dash.CreateGroupOption) error); ok {
		r1 = rf(ctx, adminEmail, groupType, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockUseCase_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - adminEmail string
//   - groupType string
//   - opts ...dash.CreateGroupOption
func (_e *MockUseCase_Expecter) CreateGroup(ctx interface{}, adminEmail interface{}, groupType interface{}, opts ...interface{}) *MockUseCase_CreateGroup_Call {
	return &MockUseCase_CreateGroup_Call{Call: _e.mock.On("CreateGroup",
		append([]interface{}{ctx, adminEmail, groupType}, opts...)...)}
}

func (_c *MockUseCase_CreateGroup_Call) Run(run func(ctx context.Context, adminEmail string, groupType string, opts ...dash.CreateGroupOption)) *MockUseCase_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]dash.CreateGroupOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(dash.CreateGroupOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUseCase_CreateGroup_Call) Return(_a0 *ent.Group, _a1 error) *MockUseCase_CreateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_CreateGroup_Call) RunAndReturn(run func(context.Context, string, string, ...dash.CreateGroupOption) (*ent.Group, error)) *MockUseCase_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: ctx, adminEmail, path
func (_m *MockUseCase) DeleteGroup(ctx context.Context, adminEmail string, path string) error {
	ret := _m.Called(ctx, adminEmail, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, adminEmail, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockUseCase_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - adminEmail string
//   - path string
func (_e *MockUseCase_Expecter) DeleteGroup(ctx interface{}, adminEmail interface{}, path interface{}) *MockUseCase_DeleteGroup_Call {
	return &MockUseCase_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, adminEmail, path)}
}

func (_c *MockUseCase_DeleteGroup_Call) Run(run func(ctx context.Context, adminEmail string, path string)) *MockUseCase_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUseCase_DeleteGroup_Call) Return(_a0 error) *MockUseCase_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_DeleteGroup_Call) RunAndReturn(run func(context.Context, string, string) error) *MockUseCase_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupTypes provides a mock function with given fields:
func (_m *MockUseCase) ListGroupTypes() ([]*group.GroupType, error) {
	ret := _m.Called()

	var r0 []*group.GroupType
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*group.GroupType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*group.GroupType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*group.GroupType)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_ListGroupTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupTypes'
type MockUseCase_ListGroupTypes_Call struct {
	*mock.Call
}

// ListGroupTypes is a helper method to define mock.On call
func (_e *MockUseCase_Expecter) ListGroupTypes() *MockUseCase_ListGroupTypes_Call {
	return &MockUseCase_ListGroupTypes_Call{Call: _e.mock.On("ListGroupTypes")}
}

func (_c *MockUseCase_ListGroupTypes_Call) Run(run func()) *MockUseCase_ListGroupTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUseCase_ListGroupTypes_Call) Return(_a0 []*group.GroupType, _a1 error) *MockUseCase_ListGroupTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_ListGroupTypes_Call) RunAndReturn(run func() ([]*group.GroupType, error)) *MockUseCase_ListGroupTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function with given fields: ctx, email
func (_m *MockUseCase) ListGroups(ctx context.Context, email string) ([]*ent.Group, error) {
	ret := _m.Called(ctx, email)

	var r0 []*ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*ent.Group, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ent.Group); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type MockUseCase_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUseCase_Expecter) ListGroups(ctx interface{}, email interface{}) *MockUseCase_ListGroups_Call {
	return &MockUseCase_ListGroups_Call{Call: _e.mock.On("ListGroups", ctx, email)}
}

func (_c *MockUseCase_ListGroups_Call) Run(run func(ctx context.Context, email string)) *MockUseCase_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUseCase_ListGroups_Call) Return(_a0 []*ent.Group, _a1 error) *MockUseCase_ListGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_ListGroups_Call) RunAndReturn(run func(context.Context, string) ([]*ent.Group, error)) *MockUseCase_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUseCase(t mockConstructorTestingTNewMockUseCase) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
