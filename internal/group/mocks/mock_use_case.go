// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/np-inprove/server/internal/ent"
	group "github.com/np-inprove/server/internal/entity/group"

	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// CreateGroup provides a mock function with given fields: ctx, principal, opts
func (_m *MockUseCase) CreateGroup(ctx context.Context, principal string, opts ...group.Option) (*ent.Group, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, principal)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...group.Option) (*ent.Group, error)); ok {
		return rf(ctx, principal, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...group.Option) *ent.Group); ok {
		r0 = rf(ctx, principal, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...group.Option) error); ok {
		r1 = rf(ctx, principal, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockUseCase_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - opts ...group.Option
func (_e *MockUseCase_Expecter) CreateGroup(ctx interface{}, principal interface{}, opts ...interface{}) *MockUseCase_CreateGroup_Call {
	return &MockUseCase_CreateGroup_Call{Call: _e.mock.On("CreateGroup",
		append([]interface{}{ctx, principal}, opts...)...)}
}

func (_c *MockUseCase_CreateGroup_Call) Run(run func(ctx context.Context, principal string, opts ...group.Option)) *MockUseCase_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]group.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(group.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUseCase_CreateGroup_Call) Return(_a0 *ent.Group, _a1 error) *MockUseCase_CreateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_CreateGroup_Call) RunAndReturn(run func(context.Context, string, ...group.Option) (*ent.Group, error)) *MockUseCase_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInviteLink provides a mock function with given fields: ctx, principal, shortName, role
func (_m *MockUseCase) CreateInviteLink(ctx context.Context, principal string, shortName string, role group.Role) (*ent.GroupInviteLink, error) {
	ret := _m.Called(ctx, principal, shortName, role)

	var r0 *ent.GroupInviteLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, group.Role) (*ent.GroupInviteLink, error)); ok {
		return rf(ctx, principal, shortName, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, group.Role) *ent.GroupInviteLink); ok {
		r0 = rf(ctx, principal, shortName, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GroupInviteLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, group.Role) error); ok {
		r1 = rf(ctx, principal, shortName, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_CreateInviteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInviteLink'
type MockUseCase_CreateInviteLink_Call struct {
	*mock.Call
}

// CreateInviteLink is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
//   - role group.Role
func (_e *MockUseCase_Expecter) CreateInviteLink(ctx interface{}, principal interface{}, shortName interface{}, role interface{}) *MockUseCase_CreateInviteLink_Call {
	return &MockUseCase_CreateInviteLink_Call{Call: _e.mock.On("CreateInviteLink", ctx, principal, shortName, role)}
}

func (_c *MockUseCase_CreateInviteLink_Call) Run(run func(ctx context.Context, principal string, shortName string, role group.Role)) *MockUseCase_CreateInviteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(group.Role))
	})
	return _c
}

func (_c *MockUseCase_CreateInviteLink_Call) Return(_a0 *ent.GroupInviteLink, _a1 error) *MockUseCase_CreateInviteLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_CreateInviteLink_Call) RunAndReturn(run func(context.Context, string, string, group.Role) (*ent.GroupInviteLink, error)) *MockUseCase_CreateInviteLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: ctx, principal, shortName
func (_m *MockUseCase) DeleteGroup(ctx context.Context, principal string, shortName string) error {
	ret := _m.Called(ctx, principal, shortName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, principal, shortName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockUseCase_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
func (_e *MockUseCase_Expecter) DeleteGroup(ctx interface{}, principal interface{}, shortName interface{}) *MockUseCase_DeleteGroup_Call {
	return &MockUseCase_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, principal, shortName)}
}

func (_c *MockUseCase_DeleteGroup_Call) Run(run func(ctx context.Context, principal string, shortName string)) *MockUseCase_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUseCase_DeleteGroup_Call) Return(_a0 error) *MockUseCase_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_DeleteGroup_Call) RunAndReturn(run func(context.Context, string, string) error) *MockUseCase_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInviteLink provides a mock function with given fields: ctx, principal, shortName, code
func (_m *MockUseCase) DeleteInviteLink(ctx context.Context, principal string, shortName string, code string) error {
	ret := _m.Called(ctx, principal, shortName, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, principal, shortName, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_DeleteInviteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInviteLink'
type MockUseCase_DeleteInviteLink_Call struct {
	*mock.Call
}

// DeleteInviteLink is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
//   - code string
func (_e *MockUseCase_Expecter) DeleteInviteLink(ctx interface{}, principal interface{}, shortName interface{}, code interface{}) *MockUseCase_DeleteInviteLink_Call {
	return &MockUseCase_DeleteInviteLink_Call{Call: _e.mock.On("DeleteInviteLink", ctx, principal, shortName, code)}
}

func (_c *MockUseCase_DeleteInviteLink_Call) Run(run func(ctx context.Context, principal string, shortName string, code string)) *MockUseCase_DeleteInviteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUseCase_DeleteInviteLink_Call) Return(_a0 error) *MockUseCase_DeleteInviteLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_DeleteInviteLink_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockUseCase_DeleteInviteLink_Call {
	_c.Call.Return(run)
	return _c
}

// ListInviteLinks provides a mock function with given fields: ctx, principal, shortName
func (_m *MockUseCase) ListInviteLinks(ctx context.Context, principal string, shortName string) ([]*ent.GroupInviteLink, error) {
	ret := _m.Called(ctx, principal, shortName)

	var r0 []*ent.GroupInviteLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*ent.GroupInviteLink, error)); ok {
		return rf(ctx, principal, shortName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*ent.GroupInviteLink); ok {
		r0 = rf(ctx, principal, shortName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.GroupInviteLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, principal, shortName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_ListInviteLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInviteLinks'
type MockUseCase_ListInviteLinks_Call struct {
	*mock.Call
}

// ListInviteLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
func (_e *MockUseCase_Expecter) ListInviteLinks(ctx interface{}, principal interface{}, shortName interface{}) *MockUseCase_ListInviteLinks_Call {
	return &MockUseCase_ListInviteLinks_Call{Call: _e.mock.On("ListInviteLinks", ctx, principal, shortName)}
}

func (_c *MockUseCase_ListInviteLinks_Call) Run(run func(ctx context.Context, principal string, shortName string)) *MockUseCase_ListInviteLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUseCase_ListInviteLinks_Call) Return(_a0 []*ent.GroupInviteLink, _a1 error) *MockUseCase_ListInviteLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_ListInviteLinks_Call) RunAndReturn(run func(context.Context, string, string) ([]*ent.GroupInviteLink, error)) *MockUseCase_ListInviteLinks_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrincipalGroups provides a mock function with given fields: ctx, principal
func (_m *MockUseCase) ListPrincipalGroups(ctx context.Context, principal string) ([]*ent.Group, error) {
	ret := _m.Called(ctx, principal)

	var r0 []*ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*ent.Group, error)); ok {
		return rf(ctx, principal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ent.Group); ok {
		r0 = rf(ctx, principal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, principal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_ListPrincipalGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrincipalGroups'
type MockUseCase_ListPrincipalGroups_Call struct {
	*mock.Call
}

// ListPrincipalGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
func (_e *MockUseCase_Expecter) ListPrincipalGroups(ctx interface{}, principal interface{}) *MockUseCase_ListPrincipalGroups_Call {
	return &MockUseCase_ListPrincipalGroups_Call{Call: _e.mock.On("ListPrincipalGroups", ctx, principal)}
}

func (_c *MockUseCase_ListPrincipalGroups_Call) Run(run func(ctx context.Context, principal string)) *MockUseCase_ListPrincipalGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUseCase_ListPrincipalGroups_Call) Return(_a0 []*ent.Group, _a1 error) *MockUseCase_ListPrincipalGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_ListPrincipalGroups_Call) RunAndReturn(run func(context.Context, string) ([]*ent.Group, error)) *MockUseCase_ListPrincipalGroups_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: ctx, principal, shortName, opts
func (_m *MockUseCase) UpdateGroup(ctx context.Context, principal string, shortName string, opts ...group.Option) (*ent.Group, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, principal, shortName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...group.Option) (*ent.Group, error)); ok {
		return rf(ctx, principal, shortName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...group.Option) *ent.Group); ok {
		r0 = rf(ctx, principal, shortName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...group.Option) error); ok {
		r1 = rf(ctx, principal, shortName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockUseCase_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
//   - opts ...group.Option
func (_e *MockUseCase_Expecter) UpdateGroup(ctx interface{}, principal interface{}, shortName interface{}, opts ...interface{}) *MockUseCase_UpdateGroup_Call {
	return &MockUseCase_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup",
		append([]interface{}{ctx, principal, shortName}, opts...)...)}
}

func (_c *MockUseCase_UpdateGroup_Call) Run(run func(ctx context.Context, principal string, shortName string, opts ...group.Option)) *MockUseCase_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]group.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(group.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockUseCase_UpdateGroup_Call) Return(_a0 *ent.Group, _a1 error) *MockUseCase_UpdateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_UpdateGroup_Call) RunAndReturn(run func(context.Context, string, string, ...group.Option) (*ent.Group, error)) *MockUseCase_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUseCase(t mockConstructorTestingTNewMockUseCase) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
