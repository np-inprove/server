// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/np-inprove/server/internal/ent"

	mock "github.com/stretchr/testify/mock"
)

// MockReader is an autogenerated mock type for the Reader type
type MockReader struct {
	mock.Mock
}

type MockReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReader) EXPECT() *MockReader_Expecter {
	return &MockReader_Expecter{mock: &_m.Mock}
}

// FindGroupByInstitutionIDAndShortName provides a mock function with given fields: ctx, institutionID, shortName
func (_m *MockReader) FindGroupByInstitutionIDAndShortName(ctx context.Context, institutionID int, shortName string) (*ent.Group, error) {
	ret := _m.Called(ctx, institutionID, shortName)

	var r0 *ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*ent.Group, error)); ok {
		return rf(ctx, institutionID, shortName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *ent.Group); ok {
		r0 = rf(ctx, institutionID, shortName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, institutionID, shortName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_FindGroupByInstitutionIDAndShortName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGroupByInstitutionIDAndShortName'
type MockReader_FindGroupByInstitutionIDAndShortName_Call struct {
	*mock.Call
}

// FindGroupByInstitutionIDAndShortName is a helper method to define mock.On call
//   - ctx context.Context
//   - institutionID int
//   - shortName string
func (_e *MockReader_Expecter) FindGroupByInstitutionIDAndShortName(ctx interface{}, institutionID interface{}, shortName interface{}) *MockReader_FindGroupByInstitutionIDAndShortName_Call {
	return &MockReader_FindGroupByInstitutionIDAndShortName_Call{Call: _e.mock.On("FindGroupByInstitutionIDAndShortName", ctx, institutionID, shortName)}
}

func (_c *MockReader_FindGroupByInstitutionIDAndShortName_Call) Run(run func(ctx context.Context, institutionID int, shortName string)) *MockReader_FindGroupByInstitutionIDAndShortName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockReader_FindGroupByInstitutionIDAndShortName_Call) Return(_a0 *ent.Group, _a1 error) *MockReader_FindGroupByInstitutionIDAndShortName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_FindGroupByInstitutionIDAndShortName_Call) RunAndReturn(run func(context.Context, int, string) (*ent.Group, error)) *MockReader_FindGroupByInstitutionIDAndShortName_Call {
	_c.Call.Return(run)
	return _c
}

// FindGroupUser provides a mock function with given fields: ctx, principal, shortName
func (_m *MockReader) FindGroupUser(ctx context.Context, principal string, shortName string) (*ent.GroupUser, error) {
	ret := _m.Called(ctx, principal, shortName)

	var r0 *ent.GroupUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*ent.GroupUser, error)); ok {
		return rf(ctx, principal, shortName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ent.GroupUser); ok {
		r0 = rf(ctx, principal, shortName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GroupUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, principal, shortName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_FindGroupUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGroupUser'
type MockReader_FindGroupUser_Call struct {
	*mock.Call
}

// FindGroupUser is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
func (_e *MockReader_Expecter) FindGroupUser(ctx interface{}, principal interface{}, shortName interface{}) *MockReader_FindGroupUser_Call {
	return &MockReader_FindGroupUser_Call{Call: _e.mock.On("FindGroupUser", ctx, principal, shortName)}
}

func (_c *MockReader_FindGroupUser_Call) Run(run func(ctx context.Context, principal string, shortName string)) *MockReader_FindGroupUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockReader_FindGroupUser_Call) Return(_a0 *ent.GroupUser, _a1 error) *MockReader_FindGroupUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_FindGroupUser_Call) RunAndReturn(run func(context.Context, string, string) (*ent.GroupUser, error)) *MockReader_FindGroupUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindGroupsByUser provides a mock function with given fields: ctx, principal
func (_m *MockReader) FindGroupsByUser(ctx context.Context, principal string) ([]*ent.Group, error) {
	ret := _m.Called(ctx, principal)

	var r0 []*ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*ent.Group, error)); ok {
		return rf(ctx, principal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ent.Group); ok {
		r0 = rf(ctx, principal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, principal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_FindGroupsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGroupsByUser'
type MockReader_FindGroupsByUser_Call struct {
	*mock.Call
}

// FindGroupsByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
func (_e *MockReader_Expecter) FindGroupsByUser(ctx interface{}, principal interface{}) *MockReader_FindGroupsByUser_Call {
	return &MockReader_FindGroupsByUser_Call{Call: _e.mock.On("FindGroupsByUser", ctx, principal)}
}

func (_c *MockReader_FindGroupsByUser_Call) Run(run func(ctx context.Context, principal string)) *MockReader_FindGroupsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockReader_FindGroupsByUser_Call) Return(_a0 []*ent.Group, _a1 error) *MockReader_FindGroupsByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_FindGroupsByUser_Call) RunAndReturn(run func(context.Context, string) ([]*ent.Group, error)) *MockReader_FindGroupsByUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserWithInstitution provides a mock function with given fields: ctx, principal
func (_m *MockReader) FindUserWithInstitution(ctx context.Context, principal string) (*ent.User, error) {
	ret := _m.Called(ctx, principal)

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.User, error)); ok {
		return rf(ctx, principal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.User); ok {
		r0 = rf(ctx, principal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, principal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_FindUserWithInstitution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserWithInstitution'
type MockReader_FindUserWithInstitution_Call struct {
	*mock.Call
}

// FindUserWithInstitution is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
func (_e *MockReader_Expecter) FindUserWithInstitution(ctx interface{}, principal interface{}) *MockReader_FindUserWithInstitution_Call {
	return &MockReader_FindUserWithInstitution_Call{Call: _e.mock.On("FindUserWithInstitution", ctx, principal)}
}

func (_c *MockReader_FindUserWithInstitution_Call) Run(run func(ctx context.Context, principal string)) *MockReader_FindUserWithInstitution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockReader_FindUserWithInstitution_Call) Return(_a0 *ent.User, _a1 error) *MockReader_FindUserWithInstitution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_FindUserWithInstitution_Call) RunAndReturn(run func(context.Context, string) (*ent.User, error)) *MockReader_FindUserWithInstitution_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockReader creates a new instance of MockReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockReader(t mockConstructorTestingTNewMockReader) *MockReader {
	mock := &MockReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
