// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/np-inprove/server/internal/ent"
	group "github.com/np-inprove/server/internal/ent/group"

	mock "github.com/stretchr/testify/mock"
)

// MockReader is an autogenerated mock type for the Reader type
type MockReader struct {
	mock.Mock
}

type MockReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReader) EXPECT() *MockReader_Expecter {
	return &MockReader_Expecter{mock: &_m.Mock}
}

// FindGroupTypes provides a mock function with given fields:
func (_m *MockReader) FindGroupTypes() ([]*group.GroupType, error) {
	ret := _m.Called()

	var r0 []*group.GroupType
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*group.GroupType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*group.GroupType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*group.GroupType)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_FindGroupTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGroupTypes'
type MockReader_FindGroupTypes_Call struct {
	*mock.Call
}

// FindGroupTypes is a helper method to define mock.On call
func (_e *MockReader_Expecter) FindGroupTypes() *MockReader_FindGroupTypes_Call {
	return &MockReader_FindGroupTypes_Call{Call: _e.mock.On("FindGroupTypes")}
}

func (_c *MockReader_FindGroupTypes_Call) Run(run func()) *MockReader_FindGroupTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReader_FindGroupTypes_Call) Return(_a0 []*group.GroupType, _a1 error) *MockReader_FindGroupTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_FindGroupTypes_Call) RunAndReturn(run func() ([]*group.GroupType, error)) *MockReader_FindGroupTypes_Call {
	_c.Call.Return(run)
	return _c
}

// FindGroupsByUser provides a mock function with given fields: ctx, email
func (_m *MockReader) FindGroupsByUser(ctx context.Context, email string) ([]*ent.Group, error) {
	ret := _m.Called(ctx, email)

	var r0 []*ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*ent.Group, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ent.Group); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_FindGroupsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGroupsByUser'
type MockReader_FindGroupsByUser_Call struct {
	*mock.Call
}

// FindGroupsByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockReader_Expecter) FindGroupsByUser(ctx interface{}, email interface{}) *MockReader_FindGroupsByUser_Call {
	return &MockReader_FindGroupsByUser_Call{Call: _e.mock.On("FindGroupsByUser", ctx, email)}
}

func (_c *MockReader_FindGroupsByUser_Call) Run(run func(ctx context.Context, email string)) *MockReader_FindGroupsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockReader_FindGroupsByUser_Call) Return(_a0 []*ent.Group, _a1 error) *MockReader_FindGroupsByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_FindGroupsByUser_Call) RunAndReturn(run func(context.Context, string) ([]*ent.Group, error)) *MockReader_FindGroupsByUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindInstitutionByAdminDomain provides a mock function with given fields: ctx, domain
func (_m *MockReader) FindInstitutionByAdminDomain(ctx context.Context, domain string) (*ent.Institution, error) {
	ret := _m.Called(ctx, domain)

	var r0 *ent.Institution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.Institution, error)); ok {
		return rf(ctx, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.Institution); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Institution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_FindInstitutionByAdminDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindInstitutionByAdminDomain'
type MockReader_FindInstitutionByAdminDomain_Call struct {
	*mock.Call
}

// FindInstitutionByAdminDomain is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *MockReader_Expecter) FindInstitutionByAdminDomain(ctx interface{}, domain interface{}) *MockReader_FindInstitutionByAdminDomain_Call {
	return &MockReader_FindInstitutionByAdminDomain_Call{Call: _e.mock.On("FindInstitutionByAdminDomain", ctx, domain)}
}

func (_c *MockReader_FindInstitutionByAdminDomain_Call) Run(run func(ctx context.Context, domain string)) *MockReader_FindInstitutionByAdminDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockReader_FindInstitutionByAdminDomain_Call) Return(_a0 *ent.Institution, _a1 error) *MockReader_FindInstitutionByAdminDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_FindInstitutionByAdminDomain_Call) RunAndReturn(run func(context.Context, string) (*ent.Institution, error)) *MockReader_FindInstitutionByAdminDomain_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockReader creates a new instance of MockReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockReader(t mockConstructorTestingTNewMockReader) *MockReader {
	mock := &MockReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
