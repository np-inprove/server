// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ent "github.com/np-inprove/server/internal/ent"
	group "github.com/np-inprove/server/internal/entity/group"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateGroup provides a mock function with given fields: ctx, institutionID, opts
func (_m *MockRepository) CreateGroup(ctx context.Context, institutionID int, opts ...group.Option) (*ent.Group, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, institutionID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ...group.Option) (*ent.Group, error)); ok {
		return rf(ctx, institutionID, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ...group.Option) *ent.Group); ok {
		r0 = rf(ctx, institutionID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ...group.Option) error); ok {
		r1 = rf(ctx, institutionID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockRepository_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - institutionID int
//   - opts ...group.Option
func (_e *MockRepository_Expecter) CreateGroup(ctx interface{}, institutionID interface{}, opts ...interface{}) *MockRepository_CreateGroup_Call {
	return &MockRepository_CreateGroup_Call{Call: _e.mock.On("CreateGroup",
		append([]interface{}{ctx, institutionID}, opts...)...)}
}

func (_c *MockRepository_CreateGroup_Call) Run(run func(ctx context.Context, institutionID int, opts ...group.Option)) *MockRepository_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]group.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(group.Option)
			}
		}
		run(args[0].(context.Context), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *MockRepository_CreateGroup_Call) Return(_a0 *ent.Group, _a1 error) *MockRepository_CreateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateGroup_Call) RunAndReturn(run func(context.Context, int, ...group.Option) (*ent.Group, error)) *MockRepository_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeleteGroup(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockRepository_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockRepository_Expecter) DeleteGroup(ctx interface{}, id interface{}) *MockRepository_DeleteGroup_Call {
	return &MockRepository_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, id)}
}

func (_c *MockRepository_DeleteGroup_Call) Run(run func(ctx context.Context, id int)) *MockRepository_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_DeleteGroup_Call) Return(_a0 error) *MockRepository_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteGroup_Call) RunAndReturn(run func(context.Context, int) error) *MockRepository_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// FindGroupByInstitutionIDAndShortName provides a mock function with given fields: ctx, institutionID, shortName
func (_m *MockRepository) FindGroupByInstitutionIDAndShortName(ctx context.Context, institutionID int, shortName string) (*ent.Group, error) {
	ret := _m.Called(ctx, institutionID, shortName)

	var r0 *ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*ent.Group, error)); ok {
		return rf(ctx, institutionID, shortName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *ent.Group); ok {
		r0 = rf(ctx, institutionID, shortName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, institutionID, shortName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindGroupByInstitutionIDAndShortName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGroupByInstitutionIDAndShortName'
type MockRepository_FindGroupByInstitutionIDAndShortName_Call struct {
	*mock.Call
}

// FindGroupByInstitutionIDAndShortName is a helper method to define mock.On call
//   - ctx context.Context
//   - institutionID int
//   - shortName string
func (_e *MockRepository_Expecter) FindGroupByInstitutionIDAndShortName(ctx interface{}, institutionID interface{}, shortName interface{}) *MockRepository_FindGroupByInstitutionIDAndShortName_Call {
	return &MockRepository_FindGroupByInstitutionIDAndShortName_Call{Call: _e.mock.On("FindGroupByInstitutionIDAndShortName", ctx, institutionID, shortName)}
}

func (_c *MockRepository_FindGroupByInstitutionIDAndShortName_Call) Run(run func(ctx context.Context, institutionID int, shortName string)) *MockRepository_FindGroupByInstitutionIDAndShortName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_FindGroupByInstitutionIDAndShortName_Call) Return(_a0 *ent.Group, _a1 error) *MockRepository_FindGroupByInstitutionIDAndShortName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindGroupByInstitutionIDAndShortName_Call) RunAndReturn(run func(context.Context, int, string) (*ent.Group, error)) *MockRepository_FindGroupByInstitutionIDAndShortName_Call {
	_c.Call.Return(run)
	return _c
}

// FindGroupUser provides a mock function with given fields: ctx, principal, shortName
func (_m *MockRepository) FindGroupUser(ctx context.Context, principal string, shortName string) (*ent.GroupUser, error) {
	ret := _m.Called(ctx, principal, shortName)

	var r0 *ent.GroupUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*ent.GroupUser, error)); ok {
		return rf(ctx, principal, shortName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ent.GroupUser); ok {
		r0 = rf(ctx, principal, shortName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.GroupUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, principal, shortName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindGroupUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGroupUser'
type MockRepository_FindGroupUser_Call struct {
	*mock.Call
}

// FindGroupUser is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
//   - shortName string
func (_e *MockRepository_Expecter) FindGroupUser(ctx interface{}, principal interface{}, shortName interface{}) *MockRepository_FindGroupUser_Call {
	return &MockRepository_FindGroupUser_Call{Call: _e.mock.On("FindGroupUser", ctx, principal, shortName)}
}

func (_c *MockRepository_FindGroupUser_Call) Run(run func(ctx context.Context, principal string, shortName string)) *MockRepository_FindGroupUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_FindGroupUser_Call) Return(_a0 *ent.GroupUser, _a1 error) *MockRepository_FindGroupUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindGroupUser_Call) RunAndReturn(run func(context.Context, string, string) (*ent.GroupUser, error)) *MockRepository_FindGroupUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindGroupsByUser provides a mock function with given fields: ctx, principal
func (_m *MockRepository) FindGroupsByUser(ctx context.Context, principal string) ([]*ent.Group, error) {
	ret := _m.Called(ctx, principal)

	var r0 []*ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*ent.Group, error)); ok {
		return rf(ctx, principal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ent.Group); ok {
		r0 = rf(ctx, principal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, principal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindGroupsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindGroupsByUser'
type MockRepository_FindGroupsByUser_Call struct {
	*mock.Call
}

// FindGroupsByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
func (_e *MockRepository_Expecter) FindGroupsByUser(ctx interface{}, principal interface{}) *MockRepository_FindGroupsByUser_Call {
	return &MockRepository_FindGroupsByUser_Call{Call: _e.mock.On("FindGroupsByUser", ctx, principal)}
}

func (_c *MockRepository_FindGroupsByUser_Call) Run(run func(ctx context.Context, principal string)) *MockRepository_FindGroupsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_FindGroupsByUser_Call) Return(_a0 []*ent.Group, _a1 error) *MockRepository_FindGroupsByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindGroupsByUser_Call) RunAndReturn(run func(context.Context, string) ([]*ent.Group, error)) *MockRepository_FindGroupsByUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserWithInstitution provides a mock function with given fields: ctx, principal
func (_m *MockRepository) FindUserWithInstitution(ctx context.Context, principal string) (*ent.User, error) {
	ret := _m.Called(ctx, principal)

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.User, error)); ok {
		return rf(ctx, principal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.User); ok {
		r0 = rf(ctx, principal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, principal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindUserWithInstitution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserWithInstitution'
type MockRepository_FindUserWithInstitution_Call struct {
	*mock.Call
}

// FindUserWithInstitution is a helper method to define mock.On call
//   - ctx context.Context
//   - principal string
func (_e *MockRepository_Expecter) FindUserWithInstitution(ctx interface{}, principal interface{}) *MockRepository_FindUserWithInstitution_Call {
	return &MockRepository_FindUserWithInstitution_Call{Call: _e.mock.On("FindUserWithInstitution", ctx, principal)}
}

func (_c *MockRepository_FindUserWithInstitution_Call) Run(run func(ctx context.Context, principal string)) *MockRepository_FindUserWithInstitution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_FindUserWithInstitution_Call) Return(_a0 *ent.User, _a1 error) *MockRepository_FindUserWithInstitution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindUserWithInstitution_Call) RunAndReturn(run func(context.Context, string) (*ent.User, error)) *MockRepository_FindUserWithInstitution_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: ctx, id, opts
func (_m *MockRepository) UpdateGroup(ctx context.Context, id int, opts ...group.Option) (*ent.Group, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ent.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ...group.Option) (*ent.Group, error)); ok {
		return rf(ctx, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ...group.Option) *ent.Group); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ...group.Option) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockRepository_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - opts ...group.Option
func (_e *MockRepository_Expecter) UpdateGroup(ctx interface{}, id interface{}, opts ...interface{}) *MockRepository_UpdateGroup_Call {
	return &MockRepository_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup",
		append([]interface{}{ctx, id}, opts...)...)}
}

func (_c *MockRepository_UpdateGroup_Call) Run(run func(ctx context.Context, id int, opts ...group.Option)) *MockRepository_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]group.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(group.Option)
			}
		}
		run(args[0].(context.Context), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *MockRepository_UpdateGroup_Call) Return(_a0 *ent.Group, _a1 error) *MockRepository_UpdateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_UpdateGroup_Call) RunAndReturn(run func(context.Context, int, ...group.Option) (*ent.Group, error)) *MockRepository_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
